{"version":3,"sources":["game/player.ts","game/card.ts","game/noble.ts","utils/utilities.ts","game/tier1Cards.ts","game/tier2Cards.ts","game/tier3Cards.ts","game/game.ts","stores/Stores.ts","stores/GameStore.ts","components/Game/PlayerComponent.tsx","components/Game/NobleComponent.tsx","components/Game/CardStackComponent.tsx","components/Game/ChipStackComponent.tsx","components/Game/GameComponent.tsx","components/App/App.tsx","index.tsx"],"names":["fakeTableau","pointValue","color","tier","costs","Player","id","name","reserveCards","this","forEach","card","tableau","push","chipColor","filter","length","chips","get","deficit","cost","amount","buyingPowerForColor","wildAmount","noble","cardRequirements","requirement","meetsNobleRequirement","tempChips","currentValue","set","temp","index","indexOf","splice","console","log","values","Array","from","reduce","s","c","cardPoints","noblesPoints","nobles","getChipCount","tempChipCount","observable","Map","computed","action","AllCardColors","keyForNoble","JSON","stringify","allNobles","randomizeArray","array","map","a","sort","Math","random","value","b","tier1Cards","tier2Cards","tier3Cards","SplendorGame","numberOfPlayers","players","initializePlayers","initializeChips","initializeCards","initializeNobles","times","callback","_","chipStacks","cardStacks","currentPlayer","hasTempChips","canBuyCard","fulfillsRequirementsForNoble","grabbedNoble","newValue","split","nobleCheck","currentPlayerIndex","currentRound","canReserveCard","targetId","chipColorForId","removeChips","addChip","saveTempChips","endPlayerTurn","ids","costTier","Number","cardIndex","cardStack","cardToBuy","costReduction","costReductionFor","netCostForColor","chipAmount","finalCost","removeChip","addChips","stores","gameStore","game","PlayerComponent","observer","handleChange","event","tempName","target","handleSubmit","props","player","preventDefault","activeClass","className","totalPoints","chipCount","quantity","onSubmit","type","onChange","React","Component","NobleComponent","key","cards","cardCostTier","remaining","remainingCards","visibleCards","slice","canPurchase","playerCanPurchase","onClick","reserveHandler","currentTarget","disabled","playerCanReserve","purchaseHandler","chipStackKeys","keys","returnChipHandler","stackColor","stackAmount","playerAmount","find","chip","grabOneEnabled","grabTwoEnabled","singleChipHandler","doubleChipHandler","GameComponent","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cda6d7f8.chunk.js","sourcesContent":["import { ChipColor } from \"./game\";\nimport { Card } from \"./card\";\nimport { observable, computed, action } from \"mobx\";\nimport { Noble, CardRequirement } from \"./noble\";\n\nconst fakeTableau: Card[] = [\n  { pointValue: 0, color: \"red\", tier: 1, costs: [] },\n  { pointValue: 0, color: \"red\", tier: 1, costs: [] },\n  { pointValue: 0, color: \"blue\", tier: 1, costs: [] },\n  { pointValue: 0, color: \"blue\", tier: 1, costs: [] },\n  { pointValue: 0, color: \"green\", tier: 1, costs: [] },\n  { pointValue: 0, color: \"green\", tier: 1, costs: [] },\n  { pointValue: 0, color: \"white\", tier: 1, costs: [] },\n  { pointValue: 0, color: \"white\", tier: 1, costs: [] },\n  { pointValue: 0, color: \"black\", tier: 1, costs: [] },\n  { pointValue: 0, color: \"black\", tier: 1, costs: [] },\n] \nexport default class Player {\n  \n  id: number;\n  @observable name: string;\n  @observable chips = new Map<ChipColor, number>();\n  @observable tempChips: ChipColor[] = [];\n  @observable nobles: Noble[] = [];\n\n  @observable tableau: Card[] = [];\n  reserveCards: Card[] = [];\n\n  constructor(id: number, name: string) {\n    this.id = id;\n    this.name = name;\n    fakeTableau.forEach(card => this.tableau.push(card))\n  }\n\n  public costReductionFor(chipColor: ChipColor): number {\n    return this.tableau.filter((card) => card.color === chipColor).length;\n  }\n\n  public buyingPowerForColor(chipColor: ChipColor): number {\n    const chipPower = this.chips.get(chipColor) || 0;\n    const cardPower = this.tableau.filter((card) => card.color === chipColor)\n      .length;\n    return chipPower + cardPower;\n  }\n\n  public canBuyCard(card: Card): boolean {\n    var deficit = 0;\n    card.costs.forEach((cost) => {\n      const amount = this.buyingPowerForColor(cost.color);\n      if (cost.amount > amount) {\n        deficit += cost.amount - amount;\n      }\n    });\n    const wildAmount = this.chips.get(\"wild\") || 0;\n    const deficitMinusWilds = deficit - wildAmount;\n    return deficitMinusWilds <= 0;\n  }\n\n  public fulfillsRequirementsForNoble(noble: Noble): boolean {\n    const numberOfNotMetConditions = noble.cardRequirements.filter( requirement => {\n      return !this.meetsNobleRequirement(requirement)\n    })\n    return numberOfNotMetConditions.length === 0;\n  }\n\n  private meetsNobleRequirement(requirement: CardRequirement):boolean {\n    return this.tableau.filter( card => card.color === requirement.color).length >= requirement.amount\n  }\n\n  @computed\n  get canReserveCard(): boolean {\n    return this.reserveCards.length < 3;\n  }\n\n  @computed\n  get totalPoints(): number {\n    var cardPoints = 0;\n    this.tableau.forEach( card => cardPoints += card.pointValue)\n    var noblesPoints = 0;\n    this.nobles.forEach( noble => noblesPoints += noble.pointValue)\n    return cardPoints + noblesPoints;\n  }\n\n  @computed\n  get chipCount(): number {\n    return this.getChipCount();\n  }\n\n  @computed\n  get tempChipCount(): number {\n    return this.getChipCount(true);\n  }\n\n  @computed\n  get hasTempChips(): boolean {\n    return this.tempChipCount > 0;\n  }\n\n  public saveTempChips() {\n    this.tempChips.forEach((color: ChipColor) => {\n      const currentValue = this.chips.get(color) || 0;\n      this.chips.set(color, currentValue + 1);\n    });\n    this.tempChips = [];\n  }\n\n  public addChip(\n    chipColor: ChipColor,\n    amount: number = 1,\n    temp: boolean = false\n  ) {\n    if (temp) {\n      this.tempChips.push(chipColor);\n    } else {\n      const currentValue = this.chips.get(chipColor) || 0;\n      this.chips.set(chipColor, currentValue + amount);\n    }\n  }\n\n  @action\n  removeChip(chipColor: ChipColor, amount: number = 1, temp: boolean = false) {\n    if (temp) {\n      const index = this.tempChips.indexOf(chipColor);\n      this.tempChips.splice(index, 1);\n    } else {\n    }\n    const currentValue = this.chips.get(chipColor);\n    if (!currentValue) {\n      return;\n    }\n    console.log(\"removing chip\", chipColor, currentValue, amount);\n    if (currentValue >= amount) {\n      this.chips.set(chipColor, currentValue - amount);\n    } else {\n      this.chips.set(chipColor, 0);\n    }\n  }\n\n  private getChipCount(temp: boolean = false): number {\n    if (temp) {\n      return this.tempChips.length;\n    }\n    const values = Array.from(this.chips.values());\n    if (!values.length) {\n      return 0;\n    }\n    return values.reduce((s, c) => s + c);\n  }\n}\n","import { ChipColor } from \"./game\";\n\nexport type CardColor = \"white\" | \"blue\" | \"green\" | \"red\" | \"black\";\n\nexport const AllCardColors: CardColor[] = [\n  \"white\",\n  \"blue\",\n  \"green\",\n  \"red\",\n  \"black\",\n];\n\nexport type CardCostTier = 1 | 2 | 3;\n\nexport type CardCost = {\n  color: ChipColor;\n  amount: number;\n};\n\nexport type Card = {\n  pointValue: number;\n  color: CardColor;\n  tier: CardCostTier;\n  costs: CardCost[];\n};\n","import { CardColor } from \"./card\";\n\nexport type CardRequirement = {\n  color: CardColor;\n  amount: number;\n};\n\nexport function keyForNoble(noble: Noble): string {\n  return JSON.stringify(noble.cardRequirements);\n}\n\nexport type Noble = {\n  pointValue: number;\n  cardRequirements: CardRequirement[];\n};\n\nexport const allNobles: Noble[] = [\n  {\n    pointValue: 3,\n    cardRequirements: [\n      { color: \"blue\", amount: 4 },\n      { color: \"white\", amount: 4 },\n    ],\n  },\n  {\n    pointValue: 3,\n    cardRequirements: [\n      { color: \"blue\", amount: 4 },\n      { color: \"green\", amount: 4 },\n    ],\n  },\n  {\n    pointValue: 3,\n    cardRequirements: [\n      { color: \"black\", amount: 4 },\n      { color: \"red\", amount: 4 },\n    ],\n  },\n  {\n    pointValue: 3,\n    cardRequirements: [\n      { color: \"red\", amount: 4 },\n      { color: \"green\", amount: 4 },\n    ],\n  },\n  {\n    pointValue: 3,\n    cardRequirements: [\n      { color: \"black\", amount: 4 },\n      { color: \"white\", amount: 4 },\n    ],\n  },\n  {\n    pointValue: 3,\n    cardRequirements: [\n      { color: \"black\", amount: 3 },\n      { color: \"blue\", amount: 3 },\n      { color: \"white\", amount: 3 },\n    ],\n  },\n  {\n    pointValue: 3,\n    cardRequirements: [\n      { color: \"black\", amount: 3 },\n      { color: \"red\", amount: 3 },\n      { color: \"white\", amount: 3 },\n    ],\n  },\n  {\n    pointValue: 3,\n    cardRequirements: [\n      { color: \"black\", amount: 3 },\n      { color: \"red\", amount: 3 },\n      { color: \"green\", amount: 3 },\n    ],\n  },\n  {\n    pointValue: 3,\n    cardRequirements: [\n      { color: \"green\", amount: 3 },\n      { color: \"blue\", amount: 3 },\n      { color: \"red\", amount: 3 },\n    ],\n  },\n  {\n    pointValue: 3,\n    cardRequirements: [\n      { color: \"green\", amount: 3 },\n      { color: \"blue\", amount: 3 },\n      { color: \"white\", amount: 3 },\n    ],\n  },\n];\n","export function randomizeArray(array: any[]): any[] {\n  return array\n    .map((a) => ({ sort: Math.random(), value: a }))\n    .sort((a, b) => a.sort - b.sort)\n    .map((a) => a.value);\n}\n\nexport function repeat(times: number, callback: (index: number) => void) {\n  [...Array(times)].forEach((_, index) => {\n    callback(index);\n  });\n}\n","import { Card } from \"./card\";\n\nexport const tier1Cards: Card[] = [\n  // best value\n  {\n    color: \"white\",\n    pointValue: 1,\n    tier: 1,\n    costs: [{ color: \"green\", amount: 4 }],\n  },\n  {\n    color: \"blue\",\n    pointValue: 1,\n    tier: 1,\n    costs: [{ color: \"red\", amount: 4 }],\n  },\n  {\n    color: \"green\",\n    pointValue: 1,\n    tier: 1,\n    costs: [{ color: \"black\", amount: 4 }],\n  },\n  {\n    color: \"red\",\n    pointValue: 1,\n    tier: 1,\n    costs: [{ color: \"white\", amount: 4 }],\n  },\n  {\n    color: \"black\",\n    pointValue: 1,\n    tier: 1,\n    costs: [{ color: \"blue\", amount: 4 }],\n  },\n  // great value\n  {\n    color: \"white\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"red\", amount: 2 },\n      { color: \"black\", amount: 1 },\n    ],\n  },\n  {\n    color: \"blue\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"white\", amount: 1 },\n      { color: \"black\", amount: 2 },\n    ],\n  },\n  {\n    color: \"green\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"white\", amount: 2 },\n      { color: \"blue\", amount: 1 },\n    ],\n  },\n  {\n    color: \"red\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"blue\", amount: 2 },\n      { color: \"green\", amount: 1 },\n    ],\n  },\n  {\n    color: \"black\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"green\", amount: 2 },\n      { color: \"red\", amount: 1 },\n    ],\n  },\n  // medium value\n  {\n    color: \"white\",\n    pointValue: 0,\n    tier: 1,\n    costs: [{ color: \"blue\", amount: 3 }],\n  },\n  {\n    color: \"blue\",\n    pointValue: 0,\n    tier: 1,\n    costs: [{ color: \"black\", amount: 3 }],\n  },\n  {\n    color: \"green\",\n    pointValue: 0,\n    tier: 1,\n    costs: [{ color: \"red\", amount: 3 }],\n  },\n  {\n    color: \"red\",\n    pointValue: 0,\n    tier: 1,\n    costs: [{ color: \"white\", amount: 3 }],\n  },\n  {\n    color: \"black\",\n    pointValue: 0,\n    tier: 1,\n    costs: [{ color: \"green\", amount: 3 }],\n  },\n  // ok value\n  {\n    color: \"white\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"blue\", amount: 1 },\n      { color: \"green\", amount: 1 },\n      { color: \"red\", amount: 1 },\n      { color: \"black\", amount: 1 },\n    ],\n  },\n  {\n    color: \"blue\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"white\", amount: 1 },\n      { color: \"green\", amount: 1 },\n      { color: \"red\", amount: 1 },\n      { color: \"black\", amount: 1 },\n    ],\n  },\n  {\n    color: \"green\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"white\", amount: 1 },\n      { color: \"blue\", amount: 1 },\n      { color: \"red\", amount: 1 },\n      { color: \"black\", amount: 1 },\n    ],\n  },\n  {\n    color: \"red\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"white\", amount: 1 },\n      { color: \"blue\", amount: 1 },\n      { color: \"green\", amount: 1 },\n      { color: \"black\", amount: 1 },\n    ],\n  },\n  {\n    color: \"black\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"white\", amount: 1 },\n      { color: \"blue\", amount: 1 },\n      { color: \"green\", amount: 1 },\n      { color: \"red\", amount: 1 },\n    ],\n  },\n  // middling value\n  {\n    color: \"white\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"blue\", amount: 2 },\n      { color: \"black\", amount: 2 },\n    ],\n  },\n  {\n    color: \"blue\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"green\", amount: 2 },\n      { color: \"black\", amount: 2 },\n    ],\n  },\n  {\n    color: \"green\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"blue\", amount: 2 },\n      { color: \"red\", amount: 2 },\n    ],\n  },\n  {\n    color: \"red\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"white\", amount: 2 },\n      { color: \"red\", amount: 2 },\n    ],\n  },\n  {\n    color: \"black\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"white\", amount: 2 },\n      { color: \"green\", amount: 2 },\n    ],\n  },\n  {\n    color: \"white\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"white\", amount: 3 },\n      { color: \"blue\", amount: 1 },\n      { color: \"black\", amount: 1 },\n    ],\n  },\n  {\n    color: \"blue\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"green\", amount: 3 },\n      { color: \"blue\", amount: 1 },\n      { color: \"red\", amount: 1 },\n    ],\n  },\n  {\n    color: \"green\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"green\", amount: 1 },\n      { color: \"blue\", amount: 3 },\n      { color: \"white\", amount: 1 },\n    ],\n  },\n  {\n    color: \"red\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"red\", amount: 1 },\n      { color: \"black\", amount: 3 },\n      { color: \"white\", amount: 1 },\n    ],\n  },\n  {\n    color: \"black\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"red\", amount: 3 },\n      { color: \"black\", amount: 1 },\n      { color: \"green\", amount: 1 },\n    ],\n  },\n  {\n    color: \"white\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"blue\", amount: 2 },\n      { color: \"black\", amount: 1 },\n      { color: \"green\", amount: 2 },\n    ],\n  },\n  {\n    color: \"blue\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"red\", amount: 2 },\n      { color: \"white\", amount: 1 },\n      { color: \"green\", amount: 2 },\n    ],\n  },\n  {\n    color: \"green\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"red\", amount: 2 },\n      { color: \"blue\", amount: 1 },\n      { color: \"black\", amount: 2 },\n    ],\n  },\n  {\n    color: \"red\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"white\", amount: 2 },\n      { color: \"green\", amount: 1 },\n      { color: \"black\", amount: 2 },\n    ],\n  },\n  {\n    color: \"black\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"white\", amount: 2 },\n      { color: \"red\", amount: 1 },\n      { color: \"blue\", amount: 2 },\n    ],\n  },\n  {\n    color: \"white\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"green\", amount: 2 },\n      { color: \"red\", amount: 1 },\n      { color: \"blue\", amount: 1 },\n      { color: \"black\", amount: 1 },\n    ],\n  },\n  {\n    color: \"blue\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"green\", amount: 1 },\n      { color: \"red\", amount: 2 },\n      { color: \"white\", amount: 1 },\n      { color: \"black\", amount: 1 },\n    ],\n  },\n  {\n    color: \"green\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"blue\", amount: 1 },\n      { color: \"red\", amount: 1 },\n      { color: \"white\", amount: 1 },\n      { color: \"black\", amount: 2 },\n    ],\n  },\n  {\n    color: \"red\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"blue\", amount: 1 },\n      { color: \"green\", amount: 1 },\n      { color: \"white\", amount: 2 },\n      { color: \"black\", amount: 1 },\n    ],\n  },\n  {\n    color: \"black\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"blue\", amount: 2 },\n      { color: \"green\", amount: 1 },\n      { color: \"white\", amount: 1 },\n      { color: \"red\", amount: 1 },\n    ],\n  },\n];\n","import { Card } from \"./card\";\n\nexport const tier2Cards: Card[] = [\n  {\n    color: \"white\",\n    pointValue: 3,\n    tier: 2,\n    costs: [{ color: \"white\", amount: 6 }],\n  },\n  {\n    color: \"blue\",\n    pointValue: 3,\n    tier: 2,\n    costs: [{ color: \"blue\", amount: 6 }],\n  },\n  {\n    color: \"green\",\n    pointValue: 3,\n    tier: 2,\n    costs: [{ color: \"green\", amount: 6 }],\n  },\n  {\n    color: \"red\",\n    pointValue: 3,\n    tier: 2,\n    costs: [{ color: \"red\", amount: 6 }],\n  },\n  {\n    color: \"black\",\n    pointValue: 3,\n    tier: 2,\n    costs: [{ color: \"black\", amount: 6 }],\n  },\n  {\n    color: \"black\",\n    pointValue: 2,\n    tier: 2,\n    costs: [\n      { color: \"green\", amount: 4 },\n      { color: \"blue\", amount: 1 },\n      { color: \"red\", amount: 2 },\n    ],\n  },\n  {\n    color: \"white\",\n    pointValue: 2,\n    tier: 2,\n    costs: [\n      { color: \"red\", amount: 4 },\n      { color: \"green\", amount: 1 },\n      { color: \"black\", amount: 2 },\n    ],\n  },\n  {\n    color: \"blue\",\n    pointValue: 2,\n    tier: 2,\n    costs: [\n      { color: \"black\", amount: 4 },\n      { color: \"white\", amount: 2 },\n      { color: \"red\", amount: 1 },\n    ],\n  },\n  {\n    color: \"green\",\n    pointValue: 2,\n    tier: 2,\n    costs: [\n      { color: \"white\", amount: 4 },\n      { color: \"blue\", amount: 2 },\n      { color: \"black\", amount: 1 },\n    ],\n  },\n  {\n    color: \"red\",\n    pointValue: 2,\n    tier: 2,\n    costs: [\n      { color: \"blue\", amount: 4 },\n      { color: \"white\", amount: 1 },\n      { color: \"green\", amount: 2 },\n    ],\n  },\n  {\n    color: \"black\",\n    pointValue: 2,\n    tier: 2,\n    costs: [{ color: \"white\", amount: 5 }],\n  },\n  {\n    color: \"white\",\n    pointValue: 2,\n    tier: 2,\n    costs: [{ color: \"red\", amount: 5 }],\n  },\n  {\n    color: \"blue\",\n    pointValue: 2,\n    tier: 2,\n    costs: [{ color: \"blue\", amount: 5 }],\n  },\n  {\n    color: \"green\",\n    pointValue: 2,\n    tier: 2,\n    costs: [{ color: \"green\", amount: 5 }],\n  },\n  {\n    color: \"red\",\n    pointValue: 2,\n    tier: 2,\n    costs: [{ color: \"black\", amount: 5 }],\n  },\n  {\n    color: \"red\",\n    pointValue: 2,\n    tier: 2,\n    costs: [\n      { color: \"black\", amount: 5 },\n      { color: \"white\", amount: 3 },\n    ],\n  },\n  {\n    color: \"white\",\n    pointValue: 2,\n    tier: 2,\n    costs: [\n      { color: \"black\", amount: 3 },\n      { color: \"red\", amount: 5 },\n    ],\n  },\n  {\n    color: \"black\",\n    pointValue: 2,\n    tier: 2,\n    costs: [\n      { color: \"green\", amount: 5 },\n      { color: \"red\", amount: 3 },\n    ],\n  },\n  {\n    color: \"green\",\n    pointValue: 2,\n    tier: 2,\n    costs: [\n      { color: \"blue\", amount: 5 },\n      { color: \"green\", amount: 3 },\n    ],\n  },\n  {\n    color: \"blue\",\n    pointValue: 2,\n    tier: 2,\n    costs: [\n      { color: \"white\", amount: 5 },\n      { color: \"blue\", amount: 3 },\n    ],\n  },\n  {\n    color: \"white\",\n    pointValue: 1,\n    tier: 2,\n    costs: [\n      { color: \"red\", amount: 2 },\n      { color: \"black\", amount: 2 },\n      { color: \"green\", amount: 3 },\n    ],\n  },\n  {\n    color: \"blue\",\n    pointValue: 1,\n    tier: 2,\n    costs: [\n      { color: \"red\", amount: 3 },\n      { color: \"blue\", amount: 2 },\n      { color: \"green\", amount: 2 },\n    ],\n  },\n  {\n    color: \"green\",\n    pointValue: 1,\n    tier: 2,\n    costs: [\n      { color: \"white\", amount: 2 },\n      { color: \"blue\", amount: 3 },\n      { color: \"black\", amount: 2 },\n    ],\n  },\n  {\n    color: \"red\",\n    pointValue: 1,\n    tier: 2,\n    costs: [\n      { color: \"white\", amount: 2 },\n      { color: \"red\", amount: 2 },\n      { color: \"black\", amount: 3 },\n    ],\n  },\n  {\n    color: \"black\",\n    pointValue: 1,\n    tier: 2,\n    costs: [\n      { color: \"white\", amount: 3 },\n      { color: \"blue\", amount: 2 },\n      { color: \"green\", amount: 2 },\n    ],\n  },\n  {\n    color: \"green\",\n    pointValue: 1,\n    tier: 2,\n    costs: [\n      { color: \"white\", amount: 3 },\n      { color: \"red\", amount: 3 },\n      { color: \"green\", amount: 2 },\n    ],\n  },\n  {\n    color: \"white\",\n    pointValue: 1,\n    tier: 2,\n    costs: [\n      { color: \"white\", amount: 2 },\n      { color: \"red\", amount: 3 },\n      { color: \"blue\", amount: 3 },\n    ],\n  },\n  {\n    color: \"red\",\n    pointValue: 1,\n    tier: 2,\n    costs: [\n      { color: \"black\", amount: 3 },\n      { color: \"red\", amount: 2 },\n      { color: \"blue\", amount: 3 },\n    ],\n  },\n  {\n    color: \"blue\",\n    pointValue: 1,\n    tier: 2,\n    costs: [\n      { color: \"black\", amount: 3 },\n      { color: \"green\", amount: 3 },\n      { color: \"blue\", amount: 2 },\n    ],\n  },\n  {\n    color: \"black\",\n    pointValue: 1,\n    tier: 2,\n    costs: [\n      { color: \"black\", amount: 2 },\n      { color: \"green\", amount: 3 },\n      { color: \"white\", amount: 3 },\n    ],\n  },\n];\n","import { Card } from \"./card\";\n\nexport const tier3Cards: Card[] = [\n  {\n    color: \"white\",\n    pointValue: 3,\n    tier: 3,\n    costs: [\n      { color: \"blue\", amount: 3 },\n      { color: \"green\", amount: 3 },\n      { color: \"red\", amount: 5 },\n      { color: \"black\", amount: 3 },\n    ],\n  },\n  {\n    color: \"blue\",\n    pointValue: 3,\n    tier: 3,\n    costs: [\n      { color: \"white\", amount: 3 },\n      { color: \"green\", amount: 3 },\n      { color: \"red\", amount: 3 },\n      { color: \"black\", amount: 5 },\n    ],\n  },\n  {\n    color: \"green\",\n    pointValue: 3,\n    tier: 3,\n    costs: [\n      { color: \"white\", amount: 5 },\n      { color: \"blue\", amount: 3 },\n      { color: \"red\", amount: 3 },\n      { color: \"black\", amount: 3 },\n    ],\n  },\n  {\n    color: \"red\",\n    pointValue: 3,\n    tier: 3,\n    costs: [\n      { color: \"white\", amount: 3 },\n      { color: \"blue\", amount: 5 },\n      { color: \"green\", amount: 3 },\n      { color: \"black\", amount: 3 },\n    ],\n  },\n  {\n    color: \"black\",\n    pointValue: 3,\n    tier: 3,\n    costs: [\n      { color: \"white\", amount: 3 },\n      { color: \"blue\", amount: 3 },\n      { color: \"green\", amount: 5 },\n      { color: \"red\", amount: 3 },\n    ],\n  },\n  {\n    color: \"white\",\n    pointValue: 4,\n    tier: 3,\n    costs: [{ color: \"black\", amount: 7 }],\n  },\n  {\n    color: \"black\",\n    pointValue: 4,\n    tier: 3,\n    costs: [{ color: \"red\", amount: 7 }],\n  },\n  {\n    color: \"blue\",\n    pointValue: 4,\n    tier: 3,\n    costs: [{ color: \"white\", amount: 7 }],\n  },\n  {\n    color: \"red\",\n    pointValue: 4,\n    tier: 3,\n    costs: [{ color: \"green\", amount: 7 }],\n  },\n  {\n    color: \"green\",\n    pointValue: 4,\n    tier: 3,\n    costs: [{ color: \"blue\", amount: 7 }],\n  },\n  {\n    color: \"red\",\n    pointValue: 4,\n    tier: 3,\n    costs: [\n      { color: \"blue\", amount: 3 },\n      { color: \"green\", amount: 6 },\n      { color: \"red\", amount: 3 },\n    ],\n  },\n  {\n    color: \"black\",\n    pointValue: 4,\n    tier: 3,\n    costs: [\n      { color: \"green\", amount: 3 },\n      { color: \"red\", amount: 6 },\n      { color: \"black\", amount: 3 },\n    ],\n  },\n  {\n    color: \"white\",\n    pointValue: 4,\n    tier: 3,\n    costs: [\n      { color: \"white\", amount: 3 },\n      { color: \"red\", amount: 3 },\n      { color: \"black\", amount: 6 },\n    ],\n  },\n  {\n    color: \"blue\",\n    pointValue: 4,\n    tier: 3,\n    costs: [\n      { color: \"white\", amount: 6 },\n      { color: \"blue\", amount: 3 },\n      { color: \"black\", amount: 3 },\n    ],\n  },\n  {\n    color: \"green\",\n    pointValue: 4,\n    tier: 3,\n    costs: [\n      { color: \"white\", amount: 3 },\n      { color: \"blue\", amount: 6 },\n      { color: \"green\", amount: 3 },\n    ],\n  },\n  {\n    color: \"white\",\n    pointValue: 5,\n    tier: 3,\n    costs: [\n      { color: \"white\", amount: 3 },\n      { color: \"black\", amount: 7 },\n    ],\n  },\n  {\n    color: \"blue\",\n    pointValue: 5,\n    tier: 3,\n    costs: [\n      { color: \"white\", amount: 7 },\n      { color: \"blue\", amount: 3 },\n    ],\n  },\n  {\n    color: \"green\",\n    pointValue: 5,\n    tier: 3,\n    costs: [\n      { color: \"green\", amount: 3 },\n      { color: \"blue\", amount: 7 },\n    ],\n  },\n  {\n    color: \"red\",\n    pointValue: 5,\n    tier: 3,\n    costs: [\n      { color: \"green\", amount: 7 },\n      { color: \"red\", amount: 3 },\n    ],\n  },\n  {\n    color: \"black\",\n    pointValue: 5,\n    tier: 3,\n    costs: [\n      { color: \"black\", amount: 3 },\n      { color: \"red\", amount: 7 },\n    ],\n  },\n];\n","import Player from \"./player\";\nimport { CardCostTier, Card, CardColor, AllCardColors } from \"./card\";\nimport { Noble, allNobles } from \"./noble\";\nimport { randomizeArray, repeat } from \"../utils/utilities\";\nimport { computed, observable, action } from \"mobx\";\nimport { tier1Cards } from \"./tier1Cards\";\nimport { tier2Cards } from \"./tier2Cards\";\nimport { tier3Cards } from \"./tier3Cards\";\n\nexport type PlayerCount = 2 | 3 | 4;\nexport type ChipColor = CardColor | \"wild\";\n\nexport default class SplendorGame {\n  @observable currentRound: number = 1;\n\n  players: Player[] = [];\n\n  @observable chipStacks = new Map<ChipColor, number>();\n  @observable cardStacks = new Map<CardCostTier, Card[]>();\n  @observable nobles: Noble[] = [];\n\n  @observable private currentPlayerIndex = 0;\n\n  constructor(numberOfPlayers: PlayerCount) {\n    this.initializePlayers(numberOfPlayers);\n    this.initializeChips(numberOfPlayers === 4 ? 7 : numberOfPlayers + 2);\n    this.initializeCards();\n    this.initializeNobles(numberOfPlayers + 1);\n  }\n\n  private initializePlayers(amount: number) {\n    repeat(amount, (index) => {\n      this.players.push(new Player(index + 1, \"player\"));\n    });\n  }\n\n  private initializeChips(amount: number) {\n    AllCardColors.forEach((color) => {\n      this.chipStacks.set(color, amount);\n    });\n    this.chipStacks.set(\"wild\", 5);\n  }\n\n  private initializeCards() {\n    this.cardStacks.set(1, randomizeArray(tier1Cards));\n    this.cardStacks.set(2, randomizeArray(tier2Cards));\n    this.cardStacks.set(3, randomizeArray(tier3Cards));\n  }\n\n  private initializeNobles(amount: number) {\n    this.nobles = randomizeArray(allNobles).splice(0, amount);\n  }\n\n  @computed\n  get currentPlayer(): Player {\n    return this.players[this.currentPlayerIndex];\n  }\n\n  public playerCanPurchase(card: Card): boolean {\n    return (\n      !this.currentPlayer.hasTempChips && this.currentPlayer.canBuyCard(card)\n    );\n  }\n\n  @computed\n  get playerCanReserve(): boolean {\n    return (\n      !this.currentPlayer.hasTempChips && this.currentPlayer.canReserveCard\n    );\n  }\n\n  @action\n  singleChipHandler = (targetId: string) => {\n    const chipColor = this.chipColorForId(targetId);\n    this.removeChips(chipColor, 1);\n    this.currentPlayer.addChip(chipColor, 1, true);\n    if (this.currentPlayer.tempChipCount >= 3) {\n      this.currentPlayer.saveTempChips();\n      this.endPlayerTurn();\n    }\n  };\n\n  @action\n  doubleChipHandler = (targetId: string) => {\n    const chipColor = this.chipColorForId(targetId);\n    this.removeChips(chipColor, 2);\n    this.currentPlayer.addChip(chipColor, 2);\n    this.endPlayerTurn();\n  };\n\n  @action purchaseHandler = (targetId: string) => {\n    const ids = targetId.split(\"-\");\n    const costTier = Number(ids[0]) as CardCostTier;\n    const cardIndex = Number(ids[1]);\n    const cardStack = this.cardStacks.get(costTier);\n    if (!cardStack) {\n      this.endPlayerTurn();\n      return;\n    }\n    const cardToBuy = cardStack.splice(cardIndex, 1)[0];\n\n    var deficit = 0;\n    cardToBuy.costs.forEach((cost) => {\n      const costReduction = this.currentPlayer.costReductionFor(cost.color);\n      const netCostForColor = cost.amount - costReduction;\n      const chipAmount = this.currentPlayer.chips.get(cost.color) || 0;\n      if (netCostForColor > chipAmount) {\n        deficit += netCostForColor - chipAmount;\n      }\n      const finalCost = netCostForColor >= 0 ? netCostForColor : 0;\n      this.currentPlayer.removeChip(cost.color, finalCost);\n      this.addChips(cost.color, finalCost);\n    });\n\n    if (deficit) {\n      this.currentPlayer.removeChip(\"wild\", deficit);\n      this.addChips(\"wild\", deficit);\n    }\n    this.currentPlayer.tableau.push(cardToBuy);\n    this.endPlayerTurn();\n  };\n\n  @action\n  returnChipHandler = (targetId: string) => {\n    const color = this.chipColorForId(targetId);\n    this.currentPlayer.removeChip(color, 1, true);\n    this.addChips(color, 1);\n  };\n\n  @action\n  reserveHandler = (targetId: string) => {\n    const ids = targetId.split(\"-\");\n    const tier = Number(ids[0]) as CardCostTier;\n    const index = Number(ids[1]);\n    const cardStack = this.cardStacks.get(tier);\n\n    if (cardStack) {\n      const card = cardStack.splice(index, 1)[0];\n      this.currentPlayer.reserveCards.push(card);\n      const currentValue = this.chipStacks.get(\"wild\");\n      if (currentValue && currentValue > 0) {\n        this.chipStacks.set(\"wild\", currentValue - 1);\n        this.currentPlayer.addChip(\"wild\");\n      }\n      this.endPlayerTurn();\n    }\n  };\n\n  private nobleCheck() {\n    const availableNobles = this.nobles.filter((noble) => {\n      return this.currentPlayer.fulfillsRequirementsForNoble(noble);\n    });\n    if (availableNobles.length > 0) {\n      const grabbedNoble = this.nobles.splice(0, 1)[0];\n      this.currentPlayer.nobles.push(grabbedNoble);\n    }\n  }\n\n  private removeChips(chipColor: ChipColor, amount: number) {\n    const currentValue = this.chipStacks.get(chipColor) || 0;\n    const newValue = currentValue - amount;\n    this.chipStacks.set(chipColor, newValue < 0 ? 0 : newValue);\n  }\n\n  private addChips(chipColor: ChipColor, amount: number = 1) {\n    const currentValue = this.chipStacks.get(chipColor) || 0;\n    this.chipStacks.set(chipColor, currentValue + amount);\n  }\n\n  private chipColorForId(id: string): ChipColor {\n    return id.split(\"-\")[0] as ChipColor;\n  }\n\n  private endPlayerTurn() {\n    this.nobleCheck();\n    this.currentPlayerIndex++;\n    if (this.currentPlayerIndex >= this.players.length) {\n      this.currentRound++;\n      this.currentPlayerIndex = 0;\n    }\n  }\n}\n","import GameStore from \"./GameStore\";\n\nconst stores = {\n  gameStore: new GameStore(),\n  // client: new SocketClient(\"http://localhost:8080\"),\n};\n\nexport default stores;\n","import SplendorGame from \"../game/game\";\n\nexport default class GameStore {\n  game: SplendorGame = new SplendorGame(4);\n}\n","import React from \"react\";\nimport stores from \"../../stores/Stores\";\nimport { observer } from \"mobx-react\";\nimport { observable } from \"mobx\";\nimport Player from \"../../game/player\";\nimport \"./PlayerComponent.scss\";\n\nexport type PlayerProps = {\n  player: Player;\n};\n\n@observer\nexport default class PlayerComponent extends React.Component<PlayerProps> {\n  @observable tempName: string = \"\";\n\n  handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.tempName = event.target.value;\n  };\n\n  handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    this.props.player.name = this.tempName;\n    event.preventDefault();\n  };\n\n  render() {\n    const { player } = this.props;\n    const isActive = stores.gameStore.game.currentPlayer === this.props.player;\n    const activeClass = isActive ? \"active\" : \"inactive\";\n    return (\n      <div className=\"PlayerComponent\">\n        <div className={activeClass}>\n          <div>player {player.name}</div>\n          <div>id {player.id}</div>\n          <div>points {player.totalPoints}</div>\n          <div className=\"chips-container\">\n            chips ({player.chipCount}){/* {JSON.stringify(player.chips)} */}\n            <div className=\"player-chips\">\n              {Array.from(player.chips).map((value) => {\n                const color = value[0];\n                const quantity = value[1];\n                return <div className={`chip ${color}`}>{quantity}</div>;\n              })}\n            </div>\n          </div>\n          <div>\n            tempchips ({player.tempChipCount}){JSON.stringify(player.tempChips)}\n          </div>\n          <div>\n            cards ({player.tableau.length}){JSON.stringify(player.tableau)}\n          </div>\n          <div>\n            nobles ({player.nobles.length}){JSON.stringify(player.nobles)}\n          </div>\n          <form onSubmit={this.handleSubmit}>\n            <label>\n              change name:\n              <input\n                type=\"text\"\n                value={this.tempName}\n                onChange={this.handleChange}\n              ></input>\n            </label>\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n","import { Noble } from \"../../game/noble\";\nimport React from \"react\";\nimport \"./NobleComponent.scss\";\n\nexport type NobleComponentProps = {\n  noble: Noble;\n};\n\nexport const NobleComponent: React.FunctionComponent<NobleComponentProps> = (\n  props\n) => {\n  return (\n    <div className=\"NobleComponent\">\n      <div className=\"point-value\">{props.noble.pointValue}</div>\n      {props.noble.cardRequirements.map((requirement) => {\n        return (\n          <div className={\"requirement \" + requirement.color} key={`${requirement.color}${requirement.amount}`}>\n            {requirement.amount}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./CardStackComponent.scss\";\nimport stores from \"../../stores/Stores\";\nimport { observer } from \"mobx-react\";\nimport { CardCostTier } from \"../../game/card\";\n\nexport type CardStackComponentProps = {\n  cardCostTier: CardCostTier;\n};\n\nconst VISIBLE_SLOTS = 4;\n\nexport default observer((props: CardStackComponentProps) => {\n  const { game } = stores.gameStore;\n  const cards = game.cardStacks.get(props.cardCostTier);\n  if (!cards) {\n    return <div />;\n  }\n\n  const remaining = cards.length - VISIBLE_SLOTS;\n  const remainingCards = remaining > 0 ? remaining : 0;\n  const visibleCards = cards.slice(0, VISIBLE_SLOTS);\n  return (\n    <div className=\"CardStackComponent\">\n      <div className=\"card remaining\">{remainingCards} cards remaining</div>\n      {visibleCards.map((card, index) => {\n        const canPurchase = game.playerCanPurchase(card);\n        const id = `${props.cardCostTier}-${index}`;\n        return (\n          <div className=\"card\" key={id}>\n            <div className=\"point-value\">\n              {card.pointValue > 0 ? card.pointValue : \"\\u00a0\"}\n            </div>\n            <div className=\"indicator\">\n              <div className={\"color-indicator \" + card.color}> </div>\n            </div>\n            <div className=\"costs\">\n              {card.costs.map((cost) => {\n                const className = `cost ${cost.color}`;\n                return (\n                  <div className={className} key={className}>\n                    {cost.amount}\n                  </div>\n                );\n              })}\n            </div>\n            <div className=\"actions\">\n              <button\n                id={id}\n                onClick={(event) => game.reserveHandler(event.currentTarget.id)}\n                disabled={!game.playerCanReserve}\n              >\n                hold\n              </button>\n              <button\n                id={id}\n                onClick={(event) =>\n                  game.purchaseHandler(event.currentTarget.id)\n                }\n                disabled={!canPurchase}\n              >\n                buy\n              </button>\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n});\n","import React from \"react\";\nimport stores from \"../../stores/Stores\";\nimport { observer } from \"mobx-react\";\nimport \"./ChipStackComponent.scss\";\n\nexport default observer(() => {\n  const { game } = stores.gameStore;\n  const player = game.currentPlayer;\n  const chipStackKeys = Array.from(game.chipStacks.keys());\n  return (\n    <div className=\"ChipStackComponent\">\n      <div className=\"temp-chips\">\n        temp chips:\n        <br />\n        {player.tempChips.map((color) => {\n          return (\n            <div key={color}>\n              <div className={`chip-stack ${color}`}>1</div>\n              <button\n                id={`${color}-temp-chip`}\n                onClick={(event) =>\n                  game.returnChipHandler(event.currentTarget.id)\n                }\n              >\n                return\n              </button>\n            </div>\n          );\n        })}\n      </div>\n      {chipStackKeys.map((stackColor) => {\n        const stackAmount = game.chipStacks.get(stackColor) || 0;\n        const playerAmount = player.tempChips.find(\n          (chip) => chip === stackColor\n        )?.length\n          ? 1\n          : 0;\n        const grabOneEnabled = stackAmount && playerAmount === 0;\n        const grabTwoEnabled = stackAmount >= 4 && !player.tempChipCount;\n        return (\n          <div key={stackColor}>\n            <div className={`chip-stack ${stackColor}`}>{stackAmount}</div>\n            {stackColor !== \"wild\" && (\n              <>\n                <button\n                  id={`${stackColor}-1`}\n                  disabled={!grabOneEnabled}\n                  onClick={(event) =>\n                    game.singleChipHandler(event.currentTarget.id)\n                  }\n                >\n                  grab 1\n                </button>\n                <button\n                  id={`${stackColor}-2`}\n                  disabled={!grabTwoEnabled}\n                  onClick={(event) =>\n                    game.doubleChipHandler(event.currentTarget.id)\n                  }\n                >\n                  grab 2\n                </button>\n              </>\n            )}\n          </div>\n        );\n      })}\n    </div>\n  );\n});\n","import React from \"react\";\nimport stores from \"../../stores/Stores\";\nimport { observer } from \"mobx-react\";\nimport PlayerComponent from \"./PlayerComponent\";\nimport { NobleComponent } from \"./NobleComponent\";\nimport CardStackComponent from \"./CardStackComponent\";\nimport ChipStackComponent from \"./ChipStackComponent\";\nimport \"./GameComponent.scss\";\nimport { keyForNoble } from \"../../game/noble\";\n\n@observer\nexport default class GameComponent extends React.Component {\n  render() {\n    const { game } = stores.gameStore;\n    return (\n      <div className=\"GameComponent\">\n        <div>\n          round #{game.currentRound}, players:\n          {game.players.map((player) => {\n            return <PlayerComponent player={player} key={player.id} />;\n          })}\n        </div>\n        <div>\n          chips:\n          <ChipStackComponent />\n        </div>\n        <div>\n          cards:\n          <CardStackComponent cardCostTier={1} />\n          <CardStackComponent cardCostTier={2} />\n          <CardStackComponent cardCostTier={3} />\n        </div>\n        <div>\n          nobles:\n          {game.nobles.map((noble) => {\n            return <NobleComponent noble={noble} key={keyForNoble(noble)} />;\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport GameComponent from \"../Game/GameComponent\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div>it not splendor</div>\n\n      <GameComponent />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App/App\";\nimport \"mobx-react-lite/batchingForReactDom\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}