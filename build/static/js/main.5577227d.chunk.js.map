{"version":3,"sources":["game/player.ts","game/noble.ts","utils/utilities.ts","game/tier1Cards.ts","game/tier2Cards.ts","game/tier3Cards.ts","game/game.ts","client/SocketClient.ts","stores/Stores.ts","stores/GameStore.ts","components/Game/PlayerComponent.tsx","components/Game/NobleComponent.tsx","components/Game/CardStackComponent.tsx","components/Game/ChipStackComponent.tsx","components/Game/GameComponent.tsx","components/App/App.tsx","index.tsx"],"names":["Player","id","name","tableau","reserveCards","this","chipColor","filter","card","color","length","chips","get","deficit","costs","forEach","cost","amount","buyingPowerForColor","wildAmount","tempChips","value","key","currentValue","set","Map","temp","actualChips","values","Array","from","reduce","s","c","getChipCount","tempChipCount","observable","computed","allNobles","pointValue","cardRequirements","randomizeArray","array","map","a","sort","Math","random","b","tier1Cards","tier","tier2Cards","tier3Cards","AllCardColors","SplendorGame","numberOfPlayers","players","initializePlayers","initializeChips","initializeCards","initializeNobles","times","callbackfn","index","push","_","chipStacks","cardStacks","nobles","splice","currentPlayer","hasTempChips","canBuyCard","newValue","split","currentPlayerIndex","currentRound","canReserveCard","action","event","chipColorForId","currentTarget","removeChips","addChip","saveTempChips","endPlayerTurn","ids","costTier","Number","cardIndex","cardStack","cardToBuy","costReduction","costReductionFor","netCostForColor","chipAmount","finalCost","removeChip","addChips","SocketClient","url","socket","cook","document","cookie","console","log","uuidv4","openSocket","on","emit","message","stores","gameStore","game","client","PlayerComponent","observer","handleChange","target","handleSubmit","props","player","preventDefault","activeClass","className","chipCount","JSON","stringify","onSubmit","type","onChange","React","Component","NobleComponent","noble","requirement","cards","cardCostTier","remaining","remainingCards","visibleCards","slice","canPurchase","playerCanPurchase","onClick","reserveHandler","disabled","playerCanReserve","purchaseHandler","chipStackKeys","keys","stackColor","stackAmount","playerAmount","grabOneEnabled","grabTwoEnabled","singleChipHandler","doubleChipHandler","GameComponent","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5577227d.chunk.js","sourcesContent":["import { ChipColor } from \"./game\";\nimport { Card } from \"./card\";\nimport { observable, computed } from \"mobx\";\n\nexport default class Player {\n  id: number;\n  @observable name: string;\n  @observable chips = new Map<ChipColor, number>();\n  @observable tempChips = new Map<ChipColor, number>();\n  tableau: Card[] = [];\n  reserveCards: Card[] = [];\n\n  constructor(id: number, name: string) {\n    this.id = id;\n    this.name = name;\n  }\n\n  public costReductionFor(chipColor: ChipColor): number {\n    return this.tableau.filter((card) => card.color === chipColor).length;\n  }\n\n  public buyingPowerForColor(chipColor: ChipColor): number {\n    const chipPower = this.chips.get(chipColor) || 0;\n    const cardPower = this.tableau.filter((card) => card.color === chipColor)\n      .length;\n    return chipPower + cardPower;\n  }\n\n  public canBuyCard(card: Card): boolean {\n    var deficit = 0;\n    card.costs.forEach((cost) => {\n      const amount = this.buyingPowerForColor(cost.color);\n      if (cost.amount > amount) {\n        deficit += cost.amount - amount;\n      }\n    });\n    const wildAmount = this.chips.get(\"wild\") || 0;\n    const deficitMinusWilds = deficit - wildAmount;\n    return deficitMinusWilds <= 0;\n  }\n\n  @computed\n  get canReserveCard(): boolean {\n    return this.reserveCards.length < 3;\n  }\n\n  @computed\n  get chipCount(): number {\n    return this.getChipCount();\n  }\n\n  @computed\n  get tempChipCount(): number {\n    return this.getChipCount(true);\n  }\n\n  @computed\n  get hasTempChips(): boolean {\n    return this.tempChipCount > 0;\n  }\n\n  public saveTempChips() {\n    this.tempChips.forEach((value: number, key: ChipColor) => {\n      const currentValue = this.chips.get(key) || 0;\n      this.chips.set(key, currentValue + value);\n    });\n    this.tempChips = new Map<ChipColor, number>();\n  }\n\n  public addChip(\n    chipColor: ChipColor,\n    amount: number = 1,\n    temp: boolean = false\n  ) {\n    const actualChips = temp ? this.tempChips : this.chips;\n    const currentValue = actualChips.get(chipColor) || 0;\n    actualChips.set(chipColor, currentValue + amount);\n  }\n\n  public removeChip(\n    chipColor: ChipColor,\n    amount: number = 1,\n    temp: boolean = false\n  ) {\n    const actualChips = temp ? this.tempChips : this.chips;\n    const currentValue = actualChips.get(chipColor);\n    if (!currentValue) {\n      return;\n    }\n    if (currentValue > amount) {\n      actualChips.set(chipColor, currentValue - amount);\n    } else {\n      actualChips.set(chipColor, 0);\n    }\n  }\n\n  private getChipCount(temp: boolean = false): number {\n    const values = Array.from(\n      temp ? this.tempChips.values() : this.chips.values()\n    );\n    if (!values.length) {\n      return 0;\n    }\n    return values.reduce((s, c) => s + c);\n  }\n}\n","import { CardColor } from \"./game\";\n\nexport type CardRequirement = {\n  color: CardColor;\n  amount: number;\n};\n\nexport type Noble = {\n  pointValue: number;\n  cardRequirements: CardRequirement[];\n};\n\nexport const allNobles: Noble[] = [\n  {\n    pointValue: 3,\n    cardRequirements: [\n      { color: \"blue\", amount: 4 },\n      { color: \"white\", amount: 4 },\n    ],\n  },\n  {\n    pointValue: 3,\n    cardRequirements: [\n      { color: \"blue\", amount: 4 },\n      { color: \"green\", amount: 4 },\n    ],\n  },\n  {\n    pointValue: 3,\n    cardRequirements: [\n      { color: \"black\", amount: 4 },\n      { color: \"red\", amount: 4 },\n    ],\n  },\n  {\n    pointValue: 3,\n    cardRequirements: [\n      { color: \"red\", amount: 4 },\n      { color: \"green\", amount: 4 },\n    ],\n  },\n  {\n    pointValue: 3,\n    cardRequirements: [\n      { color: \"black\", amount: 4 },\n      { color: \"white\", amount: 4 },\n    ],\n  },\n  {\n    pointValue: 3,\n    cardRequirements: [\n      { color: \"black\", amount: 3 },\n      { color: \"blue\", amount: 3 },\n      { color: \"white\", amount: 3 },\n    ],\n  },\n  {\n    pointValue: 3,\n    cardRequirements: [\n      { color: \"black\", amount: 3 },\n      { color: \"red\", amount: 3 },\n      { color: \"white\", amount: 3 },\n    ],\n  },\n  {\n    pointValue: 3,\n    cardRequirements: [\n      { color: \"black\", amount: 3 },\n      { color: \"red\", amount: 3 },\n      { color: \"green\", amount: 3 },\n    ],\n  },\n  {\n    pointValue: 3,\n    cardRequirements: [\n      { color: \"green\", amount: 3 },\n      { color: \"blue\", amount: 3 },\n      { color: \"red\", amount: 3 },\n    ],\n  },\n  {\n    pointValue: 3,\n    cardRequirements: [\n      { color: \"green\", amount: 3 },\n      { color: \"blue\", amount: 3 },\n      { color: \"white\", amount: 3 },\n    ],\n  },\n];\n","export function randomizeArray(array: any[]): any[] {\n  return array\n    .map((a) => ({ sort: Math.random(), value: a }))\n    .sort((a, b) => a.sort - b.sort)\n    .map((a) => a.value);\n}\n\nexport function repeat(times: number, callbackfn: (index: number) => void) {\n  [...Array(times)].forEach((_, index) => {\n    callbackfn(index);\n  });\n}\n","import { Card } from \"./card\";\n\nexport const tier1Cards: Card[] = [\n  // best value\n  {\n    color: \"white\",\n    pointValue: 1,\n    tier: 1,\n    costs: [{ color: \"green\", amount: 4 }],\n  },\n  {\n    color: \"blue\",\n    pointValue: 1,\n    tier: 1,\n    costs: [{ color: \"red\", amount: 4 }],\n  },\n  {\n    color: \"green\",\n    pointValue: 1,\n    tier: 1,\n    costs: [{ color: \"black\", amount: 4 }],\n  },\n  {\n    color: \"red\",\n    pointValue: 1,\n    tier: 1,\n    costs: [{ color: \"white\", amount: 4 }],\n  },\n  {\n    color: \"black\",\n    pointValue: 1,\n    tier: 1,\n    costs: [{ color: \"blue\", amount: 4 }],\n  },\n  // great value\n  {\n    color: \"white\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"red\", amount: 2 },\n      { color: \"black\", amount: 1 },\n    ],\n  },\n  {\n    color: \"blue\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"white\", amount: 1 },\n      { color: \"black\", amount: 2 },\n    ],\n  },\n  {\n    color: \"green\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"white\", amount: 2 },\n      { color: \"blue\", amount: 1 },\n    ],\n  },\n  {\n    color: \"red\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"blue\", amount: 2 },\n      { color: \"green\", amount: 1 },\n    ],\n  },\n  {\n    color: \"black\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"green\", amount: 2 },\n      { color: \"red\", amount: 1 },\n    ],\n  },\n  // medium value\n  {\n    color: \"white\",\n    pointValue: 0,\n    tier: 1,\n    costs: [{ color: \"blue\", amount: 3 }],\n  },\n  {\n    color: \"blue\",\n    pointValue: 0,\n    tier: 1,\n    costs: [{ color: \"black\", amount: 3 }],\n  },\n  {\n    color: \"green\",\n    pointValue: 0,\n    tier: 1,\n    costs: [{ color: \"red\", amount: 3 }],\n  },\n  {\n    color: \"red\",\n    pointValue: 0,\n    tier: 1,\n    costs: [{ color: \"white\", amount: 3 }],\n  },\n  {\n    color: \"black\",\n    pointValue: 0,\n    tier: 1,\n    costs: [{ color: \"green\", amount: 3 }],\n  },\n  // ok value\n  {\n    color: \"white\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"blue\", amount: 1 },\n      { color: \"green\", amount: 1 },\n      { color: \"red\", amount: 1 },\n      { color: \"black\", amount: 1 },\n    ],\n  },\n  {\n    color: \"blue\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"white\", amount: 1 },\n      { color: \"green\", amount: 1 },\n      { color: \"red\", amount: 1 },\n      { color: \"black\", amount: 1 },\n    ],\n  },\n  {\n    color: \"green\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"white\", amount: 1 },\n      { color: \"blue\", amount: 1 },\n      { color: \"red\", amount: 1 },\n      { color: \"black\", amount: 1 },\n    ],\n  },\n  {\n    color: \"red\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"white\", amount: 1 },\n      { color: \"blue\", amount: 1 },\n      { color: \"green\", amount: 1 },\n      { color: \"black\", amount: 1 },\n    ],\n  },\n  {\n    color: \"black\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"white\", amount: 1 },\n      { color: \"blue\", amount: 1 },\n      { color: \"green\", amount: 1 },\n      { color: \"red\", amount: 1 },\n    ],\n  },\n  // middling value\n  {\n    color: \"white\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"blue\", amount: 2 },\n      { color: \"black\", amount: 2 },\n    ],\n  },\n  {\n    color: \"blue\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"green\", amount: 2 },\n      { color: \"black\", amount: 2 },\n    ],\n  },\n  {\n    color: \"green\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"blue\", amount: 2 },\n      { color: \"red\", amount: 2 },\n    ],\n  },\n  {\n    color: \"red\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"white\", amount: 2 },\n      { color: \"red\", amount: 2 },\n    ],\n  },\n  {\n    color: \"black\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"white\", amount: 2 },\n      { color: \"green\", amount: 2 },\n    ],\n  },\n];\n","import { Card } from \"./card\";\n\nexport const tier2Cards: Card[] = [\n  {\n    color: \"red\",\n    pointValue: 3,\n    tier: 2,\n    costs: [\n      { color: \"white\", amount: 3 },\n      { color: \"blue\", amount: 5 },\n      { color: \"green\", amount: 3 },\n      { color: \"black\", amount: 3 },\n    ],\n  },\n  {\n    color: \"red\",\n    pointValue: 3,\n    tier: 2,\n    costs: [\n      { color: \"white\", amount: 3 },\n      { color: \"blue\", amount: 5 },\n      { color: \"green\", amount: 3 },\n      { color: \"black\", amount: 3 },\n    ],\n  },\n  {\n    color: \"red\",\n    pointValue: 3,\n    tier: 2,\n    costs: [\n      { color: \"white\", amount: 3 },\n      { color: \"blue\", amount: 5 },\n      { color: \"green\", amount: 3 },\n      { color: \"black\", amount: 3 },\n    ],\n  },\n  {\n    color: \"red\",\n    pointValue: 3,\n    tier: 2,\n    costs: [\n      { color: \"white\", amount: 3 },\n      { color: \"blue\", amount: 5 },\n      { color: \"green\", amount: 3 },\n      { color: \"black\", amount: 3 },\n    ],\n  },\n];\n","import { Card } from \"./card\";\n\nexport const tier3Cards: Card[] = [\n  {\n    color: \"white\",\n    pointValue: 3,\n    tier: 3,\n    costs: [\n      { color: \"blue\", amount: 3 },\n      { color: \"green\", amount: 3 },\n      { color: \"red\", amount: 5 },\n      { color: \"black\", amount: 3 },\n    ],\n  },\n  {\n    color: \"blue\",\n    pointValue: 3,\n    tier: 3,\n    costs: [\n      { color: \"white\", amount: 3 },\n      { color: \"green\", amount: 3 },\n      { color: \"red\", amount: 3 },\n      { color: \"black\", amount: 5 },\n    ],\n  },\n  {\n    color: \"green\",\n    pointValue: 3,\n    tier: 3,\n    costs: [\n      { color: \"white\", amount: 5 },\n      { color: \"blue\", amount: 3 },\n      { color: \"red\", amount: 3 },\n      { color: \"black\", amount: 3 },\n    ],\n  },\n  {\n    color: \"red\",\n    pointValue: 3,\n    tier: 3,\n    costs: [\n      { color: \"white\", amount: 3 },\n      { color: \"blue\", amount: 5 },\n      { color: \"green\", amount: 3 },\n      { color: \"black\", amount: 3 },\n    ],\n  },\n  {\n    color: \"black\",\n    pointValue: 3,\n    tier: 3,\n    costs: [\n      { color: \"white\", amount: 3 },\n      { color: \"blue\", amount: 3 },\n      { color: \"green\", amount: 5 },\n      { color: \"red\", amount: 3 },\n    ],\n  },\n  {\n    color: \"white\",\n    pointValue: 4,\n    tier: 3,\n    costs: [{ color: \"black\", amount: 7 }],\n  },\n  {\n    color: \"black\",\n    pointValue: 4,\n    tier: 3,\n    costs: [{ color: \"red\", amount: 7 }],\n  },\n  {\n    color: \"blue\",\n    pointValue: 4,\n    tier: 3,\n    costs: [{ color: \"white\", amount: 7 }],\n  },\n  {\n    color: \"red\",\n    pointValue: 4,\n    tier: 3,\n    costs: [{ color: \"green\", amount: 7 }],\n  },\n  {\n    color: \"green\",\n    pointValue: 4,\n    tier: 3,\n    costs: [{ color: \"blue\", amount: 7 }],\n  },\n  {\n    color: \"red\",\n    pointValue: 4,\n    tier: 3,\n    costs: [\n      { color: \"blue\", amount: 3 },\n      { color: \"green\", amount: 6 },\n      { color: \"red\", amount: 3 },\n    ],\n  },\n  {\n    color: \"black\",\n    pointValue: 4,\n    tier: 3,\n    costs: [\n      { color: \"green\", amount: 3 },\n      { color: \"red\", amount: 6 },\n      { color: \"black\", amount: 3 },\n    ],\n  },\n];\n","import Player from \"./player\";\nimport { CardCostTier, Card } from \"./card\";\nimport { Noble, allNobles } from \"./noble\";\nimport { randomizeArray, repeat } from \"../utils/utilities\";\nimport { computed, observable, action } from \"mobx\";\nimport { tier1Cards } from \"./tier1Cards\";\nimport { tier2Cards } from \"./tier2Cards\";\nimport { tier3Cards } from \"./tier3Cards\";\n\nexport type PlayerCount = 2 | 3 | 4;\nexport type CardColor = \"white\" | \"blue\" | \"green\" | \"red\" | \"black\";\nexport type ChipColor = CardColor | \"wild\";\n\nexport const AllCardColors: CardColor[] = [\n  \"white\",\n  \"blue\",\n  \"green\",\n  \"red\",\n  \"black\",\n];\n\nexport default class SplendorGame {\n  players: Player[] = [];\n  @observable chipStacks = new Map<ChipColor, number>();\n  @observable cardStacks = new Map<CardCostTier, Card[]>();\n  @observable nobles: Noble[] = [];\n\n  @observable currentRound: number = 1;\n\n  @observable private currentPlayerIndex = 0;\n\n  constructor(numberOfPlayers: PlayerCount) {\n    this.initializePlayers(numberOfPlayers);\n    this.initializeChips(numberOfPlayers === 4 ? 7 : numberOfPlayers + 2);\n    this.initializeCards();\n    this.initializeNobles(numberOfPlayers + 1);\n  }\n\n  private initializePlayers(amount: number) {\n    repeat(amount, (index) => {\n      this.players.push(new Player(index + 1, \"player\"));\n    });\n  }\n\n  private initializeChips(amount: number) {\n    AllCardColors.forEach((color) => {\n      this.chipStacks.set(color, amount);\n    });\n    this.chipStacks.set(\"wild\", 5);\n  }\n\n  private initializeCards() {\n    this.cardStacks.set(1, randomizeArray(tier1Cards));\n    this.cardStacks.set(2, randomizeArray(tier2Cards));\n    this.cardStacks.set(3, randomizeArray(tier3Cards));\n  }\n\n  private initializeNobles(amount: number) {\n    this.nobles = randomizeArray(allNobles).splice(0, amount);\n  }\n\n  @computed\n  get currentPlayer(): Player {\n    return this.players[this.currentPlayerIndex];\n  }\n\n  public playerCanPurchase(card: Card): boolean {\n    return (\n      !this.currentPlayer.hasTempChips && this.currentPlayer.canBuyCard(card)\n    );\n  }\n\n  @computed\n  get playerCanReserve(): boolean {\n    return (\n      !this.currentPlayer.hasTempChips && this.currentPlayer.canReserveCard\n    );\n  }\n\n  @action\n  singleChipHandler = (\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>\n  ) => {\n    const chipColor = this.chipColorForId(event.currentTarget.id);\n    this.removeChips(chipColor, 1);\n    this.currentPlayer.addChip(chipColor, 1, true);\n    if (this.currentPlayer.tempChipCount >= 3) {\n      this.currentPlayer.saveTempChips();\n      this.endPlayerTurn();\n    }\n  };\n\n  @action\n  doubleChipHandler = (\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>\n  ) => {\n    const chipColor = this.chipColorForId(event.currentTarget.id);\n    this.removeChips(chipColor, 2);\n    this.currentPlayer.addChip(chipColor, 2);\n    this.endPlayerTurn();\n  };\n\n  @action purchaseHandler = (\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>\n  ) => {\n    const ids = event.currentTarget.id.split(\"-\");\n    const costTier = Number(ids[0]) as CardCostTier;\n    const cardIndex = Number(ids[1]);\n    const cardStack = this.cardStacks.get(costTier);\n    if (!cardStack) {\n      this.endPlayerTurn();\n      return;\n    }\n    const cardToBuy = cardStack.splice(cardIndex, 1)[0];\n\n    var deficit = 0;\n    cardToBuy.costs.forEach((cost) => {\n      const costReduction = this.currentPlayer.costReductionFor(cost.color);\n      const netCostForColor = cost.amount - costReduction;\n      const chipAmount = this.currentPlayer.chips.get(cost.color) || 0;\n      if (netCostForColor > chipAmount) {\n        deficit += netCostForColor - chipAmount;\n      }\n      const finalCost = netCostForColor >= 0 ? netCostForColor : 0;\n      this.currentPlayer.removeChip(cost.color, finalCost);\n      this.addChips(cost.color, finalCost);\n    });\n\n    if (deficit) {\n      this.currentPlayer.removeChip(\"wild\", deficit);\n      this.addChips(\"wild\", deficit);\n    }\n    this.currentPlayer.tableau.push(cardToBuy);\n    this.endPlayerTurn();\n  };\n\n  @action\n  reserveHandler = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    const ids = event.currentTarget.id.split(\"-\");\n    const tier = Number(ids[0]) as CardCostTier;\n    const index = Number(ids[1]);\n    const cardStack = this.cardStacks.get(tier);\n\n    if (cardStack) {\n      const card = cardStack.splice(index, 1)[0];\n      this.currentPlayer.reserveCards.push(card);\n      const currentValue = this.chipStacks.get(\"wild\");\n      if (currentValue && currentValue > 0) {\n        this.chipStacks.set(\"wild\", currentValue - 1);\n        this.currentPlayer.addChip(\"wild\");\n      }\n      this.endPlayerTurn();\n    }\n  };\n\n  private removeChips(chipColor: ChipColor, amount: number) {\n    const currentValue = this.chipStacks.get(chipColor) || 0;\n    const newValue = currentValue - amount;\n    this.chipStacks.set(chipColor, newValue < 0 ? 0 : newValue);\n  }\n\n  private addChips(chipColor: ChipColor, amount: number) {\n    const currentValue = this.chipStacks.get(chipColor) || 0;\n    this.chipStacks.set(chipColor, currentValue + amount);\n  }\n\n  private chipColorForId(id: string): ChipColor {\n    return id.split(\"-\")[0] as ChipColor;\n  }\n\n  private endPlayerTurn() {\n    this.currentPlayerIndex++;\n    if (this.currentPlayerIndex >= this.players.length) {\n      this.currentRound++;\n      this.currentPlayerIndex = 0;\n    }\n  }\n}\n","import openSocket from \"socket.io-client\";\nimport { observable } from \"mobx\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nexport default class SocketClient {\n  private socket: SocketIOClient.Socket;\n\n  @observable clientId: string = \"\";\n\n  constructor(url: string) {\n    const cook = document.cookie;\n    console.log(cook);\n    console.log(uuidv4());\n    this.socket = openSocket(url);\n    this.socket.on(\"connect\", () => {\n      console.log(\"connected to server\");\n      this.socket.emit(\"message\", \"hi from me\");\n    });\n  }\n\n  public sendMessage(message: string) {\n    this.socket.emit(\"message\", message);\n  }\n\n  private configureClientId() {}\n}\n","import GameStore from \"./GameStore\";\nimport SocketClient from \"../client/SocketClient\";\n\nconst stores = {\n  gameStore: new GameStore(),\n  client: new SocketClient(\"http://localhost:8080\"),\n};\n\nexport default stores;\n","import SplendorGame from \"../game/game\";\n\nexport default class GameStore {\n  game: SplendorGame = new SplendorGame(3);\n}\n","import React from \"react\";\nimport stores from \"../../stores/Stores\";\nimport { observer } from \"mobx-react\";\nimport { observable } from \"mobx\";\nimport Player from \"../../game/player\";\nimport \"./PlayerComponent.scss\";\n\nexport type PlayerProps = {\n  player: Player;\n};\n\n@observer\nexport default class PlayerComponent extends React.Component<PlayerProps> {\n  @observable name: string = \"\";\n\n  handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.name = event.target.value;\n  };\n\n  handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    this.props.player.name = this.name;\n    event.preventDefault();\n  };\n\n  render() {\n    const { player } = this.props;\n    const isActive = stores.gameStore.game.currentPlayer === this.props.player;\n    const activeClass = isActive ? \"active\" : \"\";\n    return (\n      <div className=\"PlayerComponent\">\n        <div className={activeClass}>\n          <div>player {player.name}</div>\n          <div>id {player.id}</div>\n          <div>\n            chips ({player.chipCount}) {JSON.stringify(player.chips)}\n          </div>\n          <div>\n            tempchips ({player.tempChipCount}){JSON.stringify(player.tempChips)}\n          </div>\n          <form onSubmit={this.handleSubmit}>\n            <label>\n              change name:\n              <input\n                type=\"text\"\n                value={this.name}\n                onChange={this.handleChange}\n              ></input>\n            </label>\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n","import { Noble } from \"../../game/noble\";\nimport React from \"react\";\nimport \"./NobleComponent.scss\";\n\nexport type NobleComponentProps = {\n  noble: Noble;\n};\n\nexport const NobleComponent: React.FunctionComponent<NobleComponentProps> = (\n  props\n) => {\n  return (\n    <div className=\"NobleComponent\">\n      <div className=\"point-value\">{props.noble.pointValue}</div>\n      {props.noble.cardRequirements.map((requirement) => {\n        return (\n          <div className={\"requirement \" + requirement.color}>\n            {requirement.amount}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./CardStackComponent.scss\";\nimport stores from \"../../stores/Stores\";\nimport { observer } from \"mobx-react\";\nimport { CardCostTier } from \"../../game/card\";\n\nexport type CardStackComponentProps = {\n  cardCostTier: CardCostTier;\n};\n\nexport default observer((props: CardStackComponentProps) => {\n  const { game } = stores.gameStore;\n  const cards = game.cardStacks.get(props.cardCostTier);\n  if (!cards) {\n    return <div />;\n  }\n\n  const remaining = cards.length - 4;\n  const remainingCards = remaining > 0 ? remaining : 0;\n  const visibleCards = cards.slice(0, 4);\n  return (\n    <div className=\"CardStackComponent\">\n      <div className=\"card remaining\">{remainingCards} cards remaining</div>\n      {visibleCards.map((card, index) => {\n        const canPurchase = game.playerCanPurchase(card);\n        const id = `${props.cardCostTier}-${index}`;\n        return (\n          <div className=\"card\">\n            <div className=\"point-value\">\n              {card.pointValue > 0 ? card.pointValue : \"\\u00a0\"}\n            </div>\n            <div className=\"indicator\">\n              <div className={\"color-indicator \" + card.color}> </div>\n            </div>\n            <div className=\"costs\">\n              {card.costs.map((cost) => {\n                return (\n                  <div className={`cost ${cost.color}`}>{cost.amount}</div>\n                );\n              })}\n            </div>\n            <div className=\"actions\">\n              <button\n                id={id}\n                onClick={game.reserveHandler}\n                disabled={!game.playerCanReserve}\n              >\n                hold\n              </button>\n              <button\n                id={id}\n                onClick={game.purchaseHandler}\n                disabled={!canPurchase}\n              >\n                buy\n              </button>\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n});\n","import React from \"react\";\nimport stores from \"../../stores/Stores\";\nimport { observer } from \"mobx-react\";\nimport \"./ChipStackComponent.scss\";\n\nexport default observer(() => {\n  const { game } = stores.gameStore;\n  const player = game.currentPlayer;\n  const chipStackKeys = Array.from(game.chipStacks.keys());\n  return (\n    <div className=\"ChipStackComponent\">\n      {chipStackKeys.map((stackColor) => {\n        const stackAmount = game.chipStacks.get(stackColor) || 0;\n        const playerAmount = player.tempChips.get(stackColor) || 0;\n        const grabOneEnabled = stackAmount && playerAmount === 0;\n        const grabTwoEnabled = stackAmount >= 4 && !player.tempChipCount;\n        return (\n          <div>\n            <div className={`chip-stack ${stackColor}`}>{stackAmount}</div>\n            {stackColor !== \"wild\" && (\n              <>\n                <button\n                  id={`${stackColor}-1`}\n                  disabled={!grabOneEnabled}\n                  onClick={game.singleChipHandler}\n                >\n                  grab 1\n                </button>\n                <button\n                  id={`${stackColor}-2`}\n                  disabled={!grabTwoEnabled}\n                  onClick={game.doubleChipHandler}\n                >\n                  grab 2\n                </button>\n              </>\n            )}\n          </div>\n        );\n      })}\n    </div>\n  );\n});\n","import React from \"react\";\nimport stores from \"../../stores/Stores\";\nimport { observer } from \"mobx-react\";\nimport PlayerComponent from \"./PlayerComponent\";\nimport { NobleComponent } from \"./NobleComponent\";\nimport CardStackComponent from \"./CardStackComponent\";\nimport ChipStackComponent from \"./ChipStackComponent\";\nimport \"./GameComponent.scss\";\n\n@observer\nexport default class GameComponent extends React.Component {\n  render() {\n    const { game } = stores.gameStore;\n    return (\n      <div className=\"GameComponent\">\n        <div>\n          round #{game.currentRound}, players:\n          {game.players.map((player) => {\n            return <PlayerComponent player={player} />;\n          })}\n        </div>\n        <div>\n          chips:\n          <ChipStackComponent />\n        </div>\n        <div>\n          cards:\n          <CardStackComponent cardCostTier={1} />\n          <CardStackComponent cardCostTier={2} />\n          <CardStackComponent cardCostTier={3} />\n        </div>\n        <div>\n          nobles:\n          {game.nobles.map((noble) => {\n            return <NobleComponent noble={noble} />;\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport GameComponent from \"../Game/GameComponent\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div>it not splendor</div>\n\n      <GameComponent />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App/App\";\n\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}