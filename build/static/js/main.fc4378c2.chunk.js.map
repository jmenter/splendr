{"version":3,"sources":["game/player.ts","game/card.ts","game/noble.ts","utils/utilities.ts","game/tier1Cards.ts","game/tier2Cards.ts","game/tier3Cards.ts","game/game.ts","stores/Stores.ts","stores/GameStore.ts","components/Game/CardComponent.tsx","components/Game/PlayerComponent.tsx","components/Game/NobleComponent.tsx","components/Game/CardStackComponent.tsx","components/Game/ChipStackComponent.tsx","components/Game/GameComponent.tsx","components/Game/ResultsComponent.tsx","components/App/App.tsx","index.tsx"],"names":["Player","id","name","this","cardColor","tableau","filter","card","color","length","chipColor","chips","get","deficit","costs","forEach","cost","amount","buyingPowerForColor","wildAmount","noble","cardRequirements","requirement","meetsNobleRequirement","tempChips","currentValue","set","temp","push","index","indexOf","splice","console","log","values","Array","from","reduce","s","c","reserveCards","cardPoints","pointValue","noblesPoints","nobles","getChipCount","tempChipCount","observable","Map","computed","action","AllCardColors","keyForNoble","JSON","stringify","allNobles","randomizeArray","array","map","a","sort","Math","random","value","b","tier1Cards","tier","tier2Cards","tier3Cards","SplendorGame","numberOfPlayers","players","initializePlayers","initializeChips","initializeCards","initializeNobles","times","callback","_","chipStacks","cardStacks","currentPlayer","hasTempChips","canBuyCard","playerShouldDiscard","cardToBuy","totalDeficit","costReduction","costReductionFor","netCostForColor","chipAmount","deficitForColor","finalCost","removeChip","addChips","endPlayerTurn","fulfillsRequirementsForNoble","grabbedNoble","newValue","split","chipCount","nobleCheck","currentPlayerIndex","handleEndOfRoundStuff","playersWithSufficientPoints","player","totalPoints","finishRound","endGame","highestScore","highestScorers","lowestCardCount","playersWithLowestCardCount","currentRound","winners","winningPlayers","runTestsForCards","cards","tierLabel","totalPointsValues","totalPointsValuesReduced","p","cardsOfColor","mappedCostsOfColor","flatMappedCostsOfColor","flat","flatMappedCostsOfColorFilter","cardCost","flatMappedCostsOfColorFilterReMapped","flatMappedCostsOfColorFilterReMappedReduced","canReserveCard","targetId","chipColorForId","currentPlayerChipCountForColor","currentBankChipCountForColor","removeChips","addChip","saveTempChips","ids","costTier","Number","cardIndex","cardStack","handleCardPurchaseTransaction","target","stores","gameStore","game","observer","props","purchaseHandler","reserveHandler","className","key","onClick","event","currentTarget","PlayerComponent","handleChange","tempName","handleSubmit","preventDefault","handleBlur","isActive","activeClass","discardClass","quantity","discardChipHandler","playerCanPurchase","reservePurchaseHandler","undefined","onSubmit","type","onChange","onBlur","React","Component","NobleComponent","cardCostTier","remaining","remainingCards","visibleCards","slice","tablePurchaseHandler","playerCanReserve","chipStackKeys","keys","returnChipHandler","stackColor","stackAmount","playerAmount","find","chip","grabOneEnabled","grabTwoEnabled","disabled","singleChipHandler","doubleChipHandler","GameComponent","ResultsComponent","winningScore","scoreString","winnerString","sortedPlayers","reset","App","TheGame","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fc4378c2.chunk.js","sourcesContent":["import { ChipColor } from \"./game\";\nimport { Card, CardColor } from \"./card\";\nimport { observable, computed, action } from \"mobx\";\nimport { Noble, CardRequirement } from \"./noble\";\n\n// const fakeTableau: Card[] = [\n//   { pointValue: 0, color: \"red\", tier: 1, costs: [] },\n//   { pointValue: 2, color: \"red\", tier: 1, costs: [] },\n//   { pointValue: 1, color: \"blue\", tier: 1, costs: [] },\n//   { pointValue: 0, color: \"blue\", tier: 1, costs: [] },\n//   { pointValue: 0, color: \"green\", tier: 1, costs: [] },\n//   { pointValue: 4, color: \"green\", tier: 1, costs: [] },\n//   { pointValue: 0, color: \"white\", tier: 1, costs: [] },\n//   { pointValue: 0, color: \"white\", tier: 1, costs: [] },\n//   { pointValue: 4, color: \"black\", tier: 1, costs: [] },\n//   { pointValue: 3, color: \"black\", tier: 1, costs: [] },\n// ];\nexport default class Player {\n  id: number;\n  @observable name: string;\n  @observable chips = new Map<ChipColor, number>();\n  @observable tempChips: ChipColor[] = [];\n  @observable nobles: Noble[] = [];\n\n  @observable tableau: Card[] = [];\n  @observable reserveCards: Card[] = [];\n\n  constructor(id: number, name: string) {\n    this.id = id;\n    this.name = name;\n    // fakeTableau.forEach((card) => this.tableau.push(card));\n  }\n\n  public costReductionFor(cardColor: CardColor): number {\n    return this.tableau.filter((card) => card.color === cardColor).length;\n  }\n\n  public buyingPowerForColor(chipColor: ChipColor): number {\n    const chipPower = this.chips.get(chipColor) || 0;\n    const cardPower = this.tableau.filter((card) => card.color === chipColor)\n      .length;\n    return chipPower + cardPower;\n  }\n\n  public canBuyCard(card: Card): boolean {\n    var deficit = 0;\n    card.costs.forEach((cost) => {\n      const amount = this.buyingPowerForColor(cost.color);\n      if (cost.amount > amount) {\n        deficit += cost.amount - amount;\n      }\n    });\n    const wildAmount = this.chips.get(\"wild\") || 0;\n    const deficitMinusWilds = deficit - wildAmount;\n    return deficitMinusWilds <= 0;\n  }\n\n  public fulfillsRequirementsForNoble(noble: Noble): boolean {\n    const numberOfNotMetConditions = noble.cardRequirements.filter(\n      (requirement) => {\n        return !this.meetsNobleRequirement(requirement);\n      }\n    );\n    return numberOfNotMetConditions.length === 0;\n  }\n\n  private meetsNobleRequirement(requirement: CardRequirement): boolean {\n    return (\n      this.tableau.filter((card) => card.color === requirement.color).length >=\n      requirement.amount\n    );\n  }\n\n  @computed\n  get canReserveCard(): boolean {\n    return this.reserveCards.length < 3;\n  }\n\n  @computed\n  get totalPoints(): number {\n    var cardPoints = 0;\n    this.tableau.forEach((card) => (cardPoints += card.pointValue));\n    var noblesPoints = 0;\n    this.nobles.forEach((noble) => (noblesPoints += noble.pointValue));\n    return cardPoints + noblesPoints;\n  }\n\n  @computed\n  get chipCount(): number {\n    return this.getChipCount();\n  }\n\n  @computed\n  get tempChipCount(): number {\n    return this.getChipCount(true);\n  }\n\n  @computed\n  get hasTempChips(): boolean {\n    return this.tempChipCount > 0;\n  }\n\n  public saveTempChips() {\n    this.tempChips.forEach((color: ChipColor) => {\n      const currentValue = this.chips.get(color) || 0;\n      this.chips.set(color, currentValue + 1);\n    });\n    this.tempChips = [];\n  }\n\n  public addChip(\n    chipColor: ChipColor,\n    amount: number = 1,\n    temp: boolean = false\n  ) {\n    if (temp) {\n      this.tempChips.push(chipColor);\n    } else {\n      const currentValue = this.chips.get(chipColor) || 0;\n      this.chips.set(chipColor, currentValue + amount);\n    }\n  }\n\n  @action\n  removeChip(chipColor: ChipColor, amount: number = 1, temp: boolean = false) {\n    if (temp) {\n      const index = this.tempChips.indexOf(chipColor);\n      this.tempChips.splice(index, 1);\n    } else {\n    }\n    const currentValue = this.chips.get(chipColor);\n    if (!currentValue) {\n      return;\n    }\n    console.log(\"removing chip\", chipColor, currentValue, amount);\n    if (currentValue >= amount) {\n      this.chips.set(chipColor, currentValue - amount);\n    } else {\n      this.chips.set(chipColor, 0);\n    }\n  }\n\n  private getChipCount(temp: boolean = false): number {\n    if (temp) {\n      return this.tempChips.length;\n    }\n    const values = Array.from(this.chips.values());\n    if (!values.length) {\n      return 0;\n    }\n    return values.reduce((s, c) => s + c);\n  }\n}\n","export type CardColor = \"white\" | \"blue\" | \"green\" | \"red\" | \"black\";\n\nexport const AllCardColors: CardColor[] = [\n  \"white\",\n  \"blue\",\n  \"green\",\n  \"red\",\n  \"black\",\n];\n\nexport type CardCostTier = 1 | 2 | 3;\n\nexport type CardCost = {\n  color: CardColor;\n  amount: number;\n};\n\nexport type Card = {\n  pointValue: number;\n  color: CardColor;\n  tier: CardCostTier;\n  costs: CardCost[];\n};\n","import { CardColor } from \"./card\";\n\nexport type CardRequirement = {\n  color: CardColor;\n  amount: number;\n};\n\nexport function keyForNoble(noble: Noble): string {\n  return JSON.stringify(noble.cardRequirements);\n}\n\nexport type Noble = {\n  pointValue: number;\n  cardRequirements: CardRequirement[];\n};\n\nexport const allNobles: Noble[] = [\n  {\n    pointValue: 3,\n    cardRequirements: [\n      { color: \"blue\", amount: 4 },\n      { color: \"white\", amount: 4 },\n    ],\n  },\n  {\n    pointValue: 3,\n    cardRequirements: [\n      { color: \"blue\", amount: 4 },\n      { color: \"green\", amount: 4 },\n    ],\n  },\n  {\n    pointValue: 3,\n    cardRequirements: [\n      { color: \"black\", amount: 4 },\n      { color: \"red\", amount: 4 },\n    ],\n  },\n  {\n    pointValue: 3,\n    cardRequirements: [\n      { color: \"red\", amount: 4 },\n      { color: \"green\", amount: 4 },\n    ],\n  },\n  {\n    pointValue: 3,\n    cardRequirements: [\n      { color: \"black\", amount: 4 },\n      { color: \"white\", amount: 4 },\n    ],\n  },\n  {\n    pointValue: 3,\n    cardRequirements: [\n      { color: \"black\", amount: 3 },\n      { color: \"blue\", amount: 3 },\n      { color: \"white\", amount: 3 },\n    ],\n  },\n  {\n    pointValue: 3,\n    cardRequirements: [\n      { color: \"black\", amount: 3 },\n      { color: \"red\", amount: 3 },\n      { color: \"white\", amount: 3 },\n    ],\n  },\n  {\n    pointValue: 3,\n    cardRequirements: [\n      { color: \"black\", amount: 3 },\n      { color: \"red\", amount: 3 },\n      { color: \"green\", amount: 3 },\n    ],\n  },\n  {\n    pointValue: 3,\n    cardRequirements: [\n      { color: \"green\", amount: 3 },\n      { color: \"blue\", amount: 3 },\n      { color: \"red\", amount: 3 },\n    ],\n  },\n  {\n    pointValue: 3,\n    cardRequirements: [\n      { color: \"green\", amount: 3 },\n      { color: \"blue\", amount: 3 },\n      { color: \"white\", amount: 3 },\n    ],\n  },\n];\n","export function randomizeArray(array: any[]): any[] {\n  return array\n    .map((a) => ({ sort: Math.random(), value: a }))\n    .sort((a, b) => a.sort - b.sort)\n    .map((a) => a.value);\n}\n\nexport function repeat(times: number, callback: (index: number) => void) {\n  [...Array(times)].forEach((_, index) => {\n    callback(index);\n  });\n}\n","import { Card } from \"./card\";\n\nexport const tier1Cards: Card[] = [\n  // best value\n  {\n    color: \"white\",\n    pointValue: 1,\n    tier: 1,\n    costs: [{ color: \"green\", amount: 4 }],\n  },\n  {\n    color: \"blue\",\n    pointValue: 1,\n    tier: 1,\n    costs: [{ color: \"red\", amount: 4 }],\n  },\n  {\n    color: \"green\",\n    pointValue: 1,\n    tier: 1,\n    costs: [{ color: \"black\", amount: 4 }],\n  },\n  {\n    color: \"red\",\n    pointValue: 1,\n    tier: 1,\n    costs: [{ color: \"white\", amount: 4 }],\n  },\n  {\n    color: \"black\",\n    pointValue: 1,\n    tier: 1,\n    costs: [{ color: \"blue\", amount: 4 }],\n  },\n  // great value\n  {\n    color: \"white\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"red\", amount: 2 },\n      { color: \"black\", amount: 1 },\n    ],\n  },\n  {\n    color: \"blue\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"white\", amount: 1 },\n      { color: \"black\", amount: 2 },\n    ],\n  },\n  {\n    color: \"green\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"white\", amount: 2 },\n      { color: \"blue\", amount: 1 },\n    ],\n  },\n  {\n    color: \"red\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"blue\", amount: 2 },\n      { color: \"green\", amount: 1 },\n    ],\n  },\n  {\n    color: \"black\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"green\", amount: 2 },\n      { color: \"red\", amount: 1 },\n    ],\n  },\n  // medium value\n  {\n    color: \"white\",\n    pointValue: 0,\n    tier: 1,\n    costs: [{ color: \"blue\", amount: 3 }],\n  },\n  {\n    color: \"blue\",\n    pointValue: 0,\n    tier: 1,\n    costs: [{ color: \"black\", amount: 3 }],\n  },\n  {\n    color: \"green\",\n    pointValue: 0,\n    tier: 1,\n    costs: [{ color: \"red\", amount: 3 }],\n  },\n  {\n    color: \"red\",\n    pointValue: 0,\n    tier: 1,\n    costs: [{ color: \"white\", amount: 3 }],\n  },\n  {\n    color: \"black\",\n    pointValue: 0,\n    tier: 1,\n    costs: [{ color: \"green\", amount: 3 }],\n  },\n  // ok value\n  {\n    color: \"white\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"blue\", amount: 1 },\n      { color: \"green\", amount: 1 },\n      { color: \"red\", amount: 1 },\n      { color: \"black\", amount: 1 },\n    ],\n  },\n  {\n    color: \"blue\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"white\", amount: 1 },\n      { color: \"green\", amount: 1 },\n      { color: \"red\", amount: 1 },\n      { color: \"black\", amount: 1 },\n    ],\n  },\n  {\n    color: \"green\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"white\", amount: 1 },\n      { color: \"blue\", amount: 1 },\n      { color: \"red\", amount: 1 },\n      { color: \"black\", amount: 1 },\n    ],\n  },\n  {\n    color: \"red\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"white\", amount: 1 },\n      { color: \"blue\", amount: 1 },\n      { color: \"green\", amount: 1 },\n      { color: \"black\", amount: 1 },\n    ],\n  },\n  {\n    color: \"black\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"white\", amount: 1 },\n      { color: \"blue\", amount: 1 },\n      { color: \"green\", amount: 1 },\n      { color: \"red\", amount: 1 },\n    ],\n  },\n  // middling value\n  {\n    color: \"white\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"blue\", amount: 2 },\n      { color: \"black\", amount: 2 },\n    ],\n  },\n  {\n    color: \"blue\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"green\", amount: 2 },\n      { color: \"black\", amount: 2 },\n    ],\n  },\n  {\n    color: \"green\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"blue\", amount: 2 },\n      { color: \"red\", amount: 2 },\n    ],\n  },\n  {\n    color: \"red\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"white\", amount: 2 },\n      { color: \"red\", amount: 2 },\n    ],\n  },\n  {\n    color: \"black\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"white\", amount: 2 },\n      { color: \"green\", amount: 2 },\n    ],\n  },\n  {\n    color: \"white\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"white\", amount: 3 },\n      { color: \"blue\", amount: 1 },\n      { color: \"black\", amount: 1 },\n    ],\n  },\n  {\n    color: \"blue\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"green\", amount: 3 },\n      { color: \"blue\", amount: 1 },\n      { color: \"red\", amount: 1 },\n    ],\n  },\n  {\n    color: \"green\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"green\", amount: 1 },\n      { color: \"blue\", amount: 3 },\n      { color: \"white\", amount: 1 },\n    ],\n  },\n  {\n    color: \"red\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"red\", amount: 1 },\n      { color: \"black\", amount: 3 },\n      { color: \"white\", amount: 1 },\n    ],\n  },\n  {\n    color: \"black\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"red\", amount: 3 },\n      { color: \"black\", amount: 1 },\n      { color: \"green\", amount: 1 },\n    ],\n  },\n  {\n    color: \"white\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"blue\", amount: 2 },\n      { color: \"black\", amount: 1 },\n      { color: \"green\", amount: 2 },\n    ],\n  },\n  {\n    color: \"blue\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"red\", amount: 2 },\n      { color: \"white\", amount: 1 },\n      { color: \"green\", amount: 2 },\n    ],\n  },\n  {\n    color: \"green\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"red\", amount: 2 },\n      { color: \"blue\", amount: 1 },\n      { color: \"black\", amount: 2 },\n    ],\n  },\n  {\n    color: \"red\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"white\", amount: 2 },\n      { color: \"green\", amount: 1 },\n      { color: \"black\", amount: 2 },\n    ],\n  },\n  {\n    color: \"black\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"white\", amount: 2 },\n      { color: \"red\", amount: 1 },\n      { color: \"blue\", amount: 2 },\n    ],\n  },\n  {\n    color: \"white\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"green\", amount: 2 },\n      { color: \"red\", amount: 1 },\n      { color: \"blue\", amount: 1 },\n      { color: \"black\", amount: 1 },\n    ],\n  },\n  {\n    color: \"blue\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"green\", amount: 1 },\n      { color: \"red\", amount: 2 },\n      { color: \"white\", amount: 1 },\n      { color: \"black\", amount: 1 },\n    ],\n  },\n  {\n    color: \"green\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"blue\", amount: 1 },\n      { color: \"red\", amount: 1 },\n      { color: \"white\", amount: 1 },\n      { color: \"black\", amount: 2 },\n    ],\n  },\n  {\n    color: \"red\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"blue\", amount: 1 },\n      { color: \"green\", amount: 1 },\n      { color: \"white\", amount: 2 },\n      { color: \"black\", amount: 1 },\n    ],\n  },\n  {\n    color: \"black\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"blue\", amount: 2 },\n      { color: \"green\", amount: 1 },\n      { color: \"white\", amount: 1 },\n      { color: \"red\", amount: 1 },\n    ],\n  },\n];\n","import { Card } from \"./card\";\n\nexport const tier2Cards: Card[] = [\n  {\n    color: \"white\",\n    pointValue: 3,\n    tier: 2,\n    costs: [{ color: \"white\", amount: 6 }],\n  },\n  {\n    color: \"blue\",\n    pointValue: 3,\n    tier: 2,\n    costs: [{ color: \"blue\", amount: 6 }],\n  },\n  {\n    color: \"green\",\n    pointValue: 3,\n    tier: 2,\n    costs: [{ color: \"green\", amount: 6 }],\n  },\n  {\n    color: \"red\",\n    pointValue: 3,\n    tier: 2,\n    costs: [{ color: \"red\", amount: 6 }],\n  },\n  {\n    color: \"black\",\n    pointValue: 3,\n    tier: 2,\n    costs: [{ color: \"black\", amount: 6 }],\n  },\n  {\n    color: \"black\",\n    pointValue: 2,\n    tier: 2,\n    costs: [\n      { color: \"green\", amount: 4 },\n      { color: \"blue\", amount: 1 },\n      { color: \"red\", amount: 2 },\n    ],\n  },\n  {\n    color: \"white\",\n    pointValue: 2,\n    tier: 2,\n    costs: [\n      { color: \"red\", amount: 4 },\n      { color: \"green\", amount: 1 },\n      { color: \"black\", amount: 2 },\n    ],\n  },\n  {\n    color: \"blue\",\n    pointValue: 2,\n    tier: 2,\n    costs: [\n      { color: \"black\", amount: 4 },\n      { color: \"white\", amount: 2 },\n      { color: \"red\", amount: 1 },\n    ],\n  },\n  {\n    color: \"green\",\n    pointValue: 2,\n    tier: 2,\n    costs: [\n      { color: \"white\", amount: 4 },\n      { color: \"blue\", amount: 2 },\n      { color: \"black\", amount: 1 },\n    ],\n  },\n  {\n    color: \"red\",\n    pointValue: 2,\n    tier: 2,\n    costs: [\n      { color: \"blue\", amount: 4 },\n      { color: \"white\", amount: 1 },\n      { color: \"green\", amount: 2 },\n    ],\n  },\n  {\n    color: \"black\",\n    pointValue: 2,\n    tier: 2,\n    costs: [{ color: \"white\", amount: 5 }],\n  },\n  {\n    color: \"white\",\n    pointValue: 2,\n    tier: 2,\n    costs: [{ color: \"red\", amount: 5 }],\n  },\n  {\n    color: \"blue\",\n    pointValue: 2,\n    tier: 2,\n    costs: [{ color: \"blue\", amount: 5 }],\n  },\n  {\n    color: \"green\",\n    pointValue: 2,\n    tier: 2,\n    costs: [{ color: \"green\", amount: 5 }],\n  },\n  {\n    color: \"red\",\n    pointValue: 2,\n    tier: 2,\n    costs: [{ color: \"black\", amount: 5 }],\n  },\n  {\n    color: \"red\",\n    pointValue: 2,\n    tier: 2,\n    costs: [\n      { color: \"black\", amount: 5 },\n      { color: \"white\", amount: 3 },\n    ],\n  },\n  {\n    color: \"white\",\n    pointValue: 2,\n    tier: 2,\n    costs: [\n      { color: \"black\", amount: 3 },\n      { color: \"red\", amount: 5 },\n    ],\n  },\n  {\n    color: \"black\",\n    pointValue: 2,\n    tier: 2,\n    costs: [\n      { color: \"green\", amount: 5 },\n      { color: \"red\", amount: 3 },\n    ],\n  },\n  {\n    color: \"green\",\n    pointValue: 2,\n    tier: 2,\n    costs: [\n      { color: \"blue\", amount: 5 },\n      { color: \"green\", amount: 3 },\n    ],\n  },\n  {\n    color: \"blue\",\n    pointValue: 2,\n    tier: 2,\n    costs: [\n      { color: \"white\", amount: 5 },\n      { color: \"blue\", amount: 3 },\n    ],\n  },\n  {\n    color: \"white\",\n    pointValue: 1,\n    tier: 2,\n    costs: [\n      { color: \"red\", amount: 2 },\n      { color: \"black\", amount: 2 },\n      { color: \"green\", amount: 3 },\n    ],\n  },\n  {\n    color: \"blue\",\n    pointValue: 1,\n    tier: 2,\n    costs: [\n      { color: \"red\", amount: 3 },\n      { color: \"blue\", amount: 2 },\n      { color: \"green\", amount: 2 },\n    ],\n  },\n  {\n    color: \"green\",\n    pointValue: 1,\n    tier: 2,\n    costs: [\n      { color: \"white\", amount: 2 },\n      { color: \"blue\", amount: 3 },\n      { color: \"black\", amount: 2 },\n    ],\n  },\n  {\n    color: \"red\",\n    pointValue: 1,\n    tier: 2,\n    costs: [\n      { color: \"white\", amount: 2 },\n      { color: \"red\", amount: 2 },\n      { color: \"black\", amount: 3 },\n    ],\n  },\n  {\n    color: \"black\",\n    pointValue: 1,\n    tier: 2,\n    costs: [\n      { color: \"white\", amount: 3 },\n      { color: \"blue\", amount: 2 },\n      { color: \"green\", amount: 2 },\n    ],\n  },\n  {\n    color: \"green\",\n    pointValue: 1,\n    tier: 2,\n    costs: [\n      { color: \"white\", amount: 3 },\n      { color: \"red\", amount: 3 },\n      { color: \"green\", amount: 2 },\n    ],\n  },\n  {\n    color: \"white\",\n    pointValue: 1,\n    tier: 2,\n    costs: [\n      { color: \"white\", amount: 2 },\n      { color: \"red\", amount: 3 },\n      { color: \"blue\", amount: 3 },\n    ],\n  },\n  {\n    color: \"red\",\n    pointValue: 1,\n    tier: 2,\n    costs: [\n      { color: \"black\", amount: 3 },\n      { color: \"red\", amount: 2 },\n      { color: \"blue\", amount: 3 },\n    ],\n  },\n  {\n    color: \"blue\",\n    pointValue: 1,\n    tier: 2,\n    costs: [\n      { color: \"black\", amount: 3 },\n      { color: \"green\", amount: 3 },\n      { color: \"blue\", amount: 2 },\n    ],\n  },\n  {\n    color: \"black\",\n    pointValue: 1,\n    tier: 2,\n    costs: [\n      { color: \"black\", amount: 2 },\n      { color: \"green\", amount: 3 },\n      { color: \"white\", amount: 3 },\n    ],\n  },\n];\n","import { Card } from \"./card\";\n\nexport const tier3Cards: Card[] = [\n  {\n    color: \"white\",\n    pointValue: 3,\n    tier: 3,\n    costs: [\n      { color: \"blue\", amount: 3 },\n      { color: \"green\", amount: 3 },\n      { color: \"red\", amount: 5 },\n      { color: \"black\", amount: 3 },\n    ],\n  },\n  {\n    color: \"blue\",\n    pointValue: 3,\n    tier: 3,\n    costs: [\n      { color: \"white\", amount: 3 },\n      { color: \"green\", amount: 3 },\n      { color: \"red\", amount: 3 },\n      { color: \"black\", amount: 5 },\n    ],\n  },\n  {\n    color: \"green\",\n    pointValue: 3,\n    tier: 3,\n    costs: [\n      { color: \"white\", amount: 5 },\n      { color: \"blue\", amount: 3 },\n      { color: \"red\", amount: 3 },\n      { color: \"black\", amount: 3 },\n    ],\n  },\n  {\n    color: \"red\",\n    pointValue: 3,\n    tier: 3,\n    costs: [\n      { color: \"white\", amount: 3 },\n      { color: \"blue\", amount: 5 },\n      { color: \"green\", amount: 3 },\n      { color: \"black\", amount: 3 },\n    ],\n  },\n  {\n    color: \"black\",\n    pointValue: 3,\n    tier: 3,\n    costs: [\n      { color: \"white\", amount: 3 },\n      { color: \"blue\", amount: 3 },\n      { color: \"green\", amount: 5 },\n      { color: \"red\", amount: 3 },\n    ],\n  },\n  {\n    color: \"white\",\n    pointValue: 4,\n    tier: 3,\n    costs: [{ color: \"black\", amount: 7 }],\n  },\n  {\n    color: \"black\",\n    pointValue: 4,\n    tier: 3,\n    costs: [{ color: \"red\", amount: 7 }],\n  },\n  {\n    color: \"blue\",\n    pointValue: 4,\n    tier: 3,\n    costs: [{ color: \"white\", amount: 7 }],\n  },\n  {\n    color: \"red\",\n    pointValue: 4,\n    tier: 3,\n    costs: [{ color: \"green\", amount: 7 }],\n  },\n  {\n    color: \"green\",\n    pointValue: 4,\n    tier: 3,\n    costs: [{ color: \"blue\", amount: 7 }],\n  },\n  {\n    color: \"red\",\n    pointValue: 4,\n    tier: 3,\n    costs: [\n      { color: \"blue\", amount: 3 },\n      { color: \"green\", amount: 6 },\n      { color: \"red\", amount: 3 },\n    ],\n  },\n  {\n    color: \"black\",\n    pointValue: 4,\n    tier: 3,\n    costs: [\n      { color: \"green\", amount: 3 },\n      { color: \"red\", amount: 6 },\n      { color: \"black\", amount: 3 },\n    ],\n  },\n  {\n    color: \"white\",\n    pointValue: 4,\n    tier: 3,\n    costs: [\n      { color: \"white\", amount: 3 },\n      { color: \"red\", amount: 3 },\n      { color: \"black\", amount: 6 },\n    ],\n  },\n  {\n    color: \"blue\",\n    pointValue: 4,\n    tier: 3,\n    costs: [\n      { color: \"white\", amount: 6 },\n      { color: \"blue\", amount: 3 },\n      { color: \"black\", amount: 3 },\n    ],\n  },\n  {\n    color: \"green\",\n    pointValue: 4,\n    tier: 3,\n    costs: [\n      { color: \"white\", amount: 3 },\n      { color: \"blue\", amount: 6 },\n      { color: \"green\", amount: 3 },\n    ],\n  },\n  {\n    color: \"white\",\n    pointValue: 5,\n    tier: 3,\n    costs: [\n      { color: \"white\", amount: 3 },\n      { color: \"black\", amount: 7 },\n    ],\n  },\n  {\n    color: \"blue\",\n    pointValue: 5,\n    tier: 3,\n    costs: [\n      { color: \"white\", amount: 7 },\n      { color: \"blue\", amount: 3 },\n    ],\n  },\n  {\n    color: \"green\",\n    pointValue: 5,\n    tier: 3,\n    costs: [\n      { color: \"green\", amount: 3 },\n      { color: \"blue\", amount: 7 },\n    ],\n  },\n  {\n    color: \"red\",\n    pointValue: 5,\n    tier: 3,\n    costs: [\n      { color: \"green\", amount: 7 },\n      { color: \"red\", amount: 3 },\n    ],\n  },\n  {\n    color: \"black\",\n    pointValue: 5,\n    tier: 3,\n    costs: [\n      { color: \"black\", amount: 3 },\n      { color: \"red\", amount: 7 },\n    ],\n  },\n];\n","import Player from \"./player\";\nimport { CardCostTier, Card, CardColor, AllCardColors } from \"./card\";\nimport { Noble, allNobles } from \"./noble\";\nimport { randomizeArray, repeat } from \"../utils/utilities\";\nimport { computed, observable, action } from \"mobx\";\nimport { tier1Cards } from \"./tier1Cards\";\nimport { tier2Cards } from \"./tier2Cards\";\nimport { tier3Cards } from \"./tier3Cards\";\n\nexport type PlayerCount = 2 | 3 | 4;\nexport type ChipColor = CardColor | \"wild\";\n\nexport default class SplendorGame {\n  @observable currentRound: number = 1;\n  @observable private currentPlayerIndex = 0;\n\n  players: Player[] = [];\n  @observable winningPlayers?: Player[];\n\n  @observable chipStacks = new Map<ChipColor, number>();\n  @observable cardStacks = new Map<CardCostTier, Card[]>();\n  @observable nobles: Noble[] = [];\n  @observable playerShouldDiscard: boolean = false;\n\n  constructor(numberOfPlayers: PlayerCount) {\n    this.initializePlayers(numberOfPlayers);\n    this.initializeChips(numberOfPlayers === 4 ? 7 : numberOfPlayers + 2);\n    this.initializeCards();\n    this.initializeNobles(numberOfPlayers + 1);\n    // this.runCardTests();\n    // this.winningPlayer = this.players[0];\n  }\n\n  private initializePlayers(amount: number) {\n    repeat(amount, (index) => {\n      this.players.push(new Player(index + 1, \"player\"));\n    });\n  }\n\n  private initializeChips(amount: number) {\n    AllCardColors.forEach((color) => {\n      this.chipStacks.set(color, amount);\n    });\n    this.chipStacks.set(\"wild\", 5);\n  }\n\n  private initializeCards() {\n    this.cardStacks.set(1, randomizeArray(tier1Cards));\n    this.cardStacks.set(2, randomizeArray(tier2Cards));\n    this.cardStacks.set(3, randomizeArray(tier3Cards));\n  }\n\n  private initializeNobles(amount: number) {\n    this.nobles = randomizeArray(allNobles).splice(0, amount);\n  }\n\n  @computed\n  get currentPlayer(): Player {\n    return this.players[this.currentPlayerIndex];\n  }\n\n  @computed\n  get sortedPlayers(): Player[] {\n    return this.players.sort((a, b) => b.totalPoints - a.totalPoints);\n  }\n\n  @computed\n  get playerCanReserve(): boolean {\n    return (\n      !this.currentPlayer.hasTempChips &&\n      this.currentPlayer.canReserveCard &&\n      !this.playerShouldDiscard\n    );\n  }\n\n  public playerCanPurchase(card: Card): boolean {\n    return (\n      !this.currentPlayer.hasTempChips &&\n      this.currentPlayer.canBuyCard(card) &&\n      !this.playerShouldDiscard\n    );\n  }\n\n  @action\n  discardChipHandler = (targetId: string) => {\n    const chipColor = this.chipColorForId(targetId);\n    const currentPlayerChipCountForColor =\n      this.currentPlayer.chips.get(chipColor) || 0;\n    this.currentPlayer.chips.set(chipColor, currentPlayerChipCountForColor - 1);\n    const currentBankChipCountForColor = this.chipStacks.get(chipColor) || 0;\n    this.chipStacks.set(chipColor, currentBankChipCountForColor + 1);\n    this.endPlayerTurn();\n  };\n\n  @action\n  singleChipHandler = (targetId: string) => {\n    const chipColor = this.chipColorForId(targetId);\n    this.removeChips(chipColor, 1);\n    this.currentPlayer.addChip(chipColor, 1, true);\n    if (this.currentPlayer.tempChipCount >= 3) {\n      this.currentPlayer.saveTempChips();\n      this.endPlayerTurn();\n    }\n  };\n\n  @action\n  doubleChipHandler = (targetId: string) => {\n    const chipColor = this.chipColorForId(targetId);\n    this.removeChips(chipColor, 2);\n    this.currentPlayer.addChip(chipColor, 2);\n    this.endPlayerTurn();\n  };\n\n  @action tablePurchaseHandler = (targetId: string) => {\n    const ids = targetId.split(\"-\");\n    const costTier = Number(ids[0]) as CardCostTier;\n    const cardIndex = Number(ids[1]);\n    const cardStack = this.cardStacks.get(costTier);\n    if (!cardStack) {\n      this.endPlayerTurn();\n      return;\n    }\n    const cardToBuy = cardStack.splice(cardIndex, 1)[0];\n    this.handleCardPurchaseTransaction(cardToBuy);\n  };\n\n  @action reservePurchaseHandler = (target: string) => {\n    const ids = target.split(\"-\");\n    const index = Number(ids[1]);\n    const cardToBuy = this.currentPlayer.reserveCards.splice(index, 1)[0];\n    this.handleCardPurchaseTransaction(cardToBuy);\n  };\n\n  @action handleCardPurchaseTransaction(cardToBuy: Card) {\n    var totalDeficit = 0;\n    cardToBuy.costs.forEach((cost) => {\n      const costReduction = this.currentPlayer.costReductionFor(cost.color);\n      const netCostForColor = cost.amount - costReduction;\n      const chipAmount = this.currentPlayer.chips.get(cost.color) || 0;\n      var deficitForColor = 0;\n      if (netCostForColor > chipAmount) {\n        deficitForColor = netCostForColor - chipAmount;\n        totalDeficit += deficitForColor;\n      }\n      const finalCost = netCostForColor - deficitForColor;\n      this.currentPlayer.removeChip(cost.color, finalCost);\n      this.addChips(cost.color, finalCost);\n    });\n\n    if (totalDeficit) {\n      this.currentPlayer.removeChip(\"wild\", totalDeficit);\n      this.addChips(\"wild\", totalDeficit);\n    }\n    this.currentPlayer.tableau.push(cardToBuy);\n    this.endPlayerTurn();\n  }\n\n  @action\n  returnChipHandler = (targetId: string) => {\n    const color = this.chipColorForId(targetId);\n    this.currentPlayer.removeChip(color, 1, true);\n    this.addChips(color, 1);\n  };\n\n  @action\n  reserveHandler = (targetId: string) => {\n    const ids = targetId.split(\"-\");\n    const tier = Number(ids[0]) as CardCostTier;\n    const index = Number(ids[1]);\n    const cardStack = this.cardStacks.get(tier);\n\n    if (cardStack) {\n      const card = cardStack.splice(index, 1)[0];\n      this.currentPlayer.reserveCards.push(card);\n      const currentValue = this.chipStacks.get(\"wild\");\n      if (currentValue && currentValue > 0) {\n        this.chipStacks.set(\"wild\", currentValue - 1);\n        this.currentPlayer.addChip(\"wild\");\n      }\n      this.endPlayerTurn();\n    }\n  };\n\n  private nobleCheck() {\n    const availableNobles = this.nobles.filter((noble) => {\n      return this.currentPlayer.fulfillsRequirementsForNoble(noble);\n    });\n    if (availableNobles.length > 0) {\n      const grabbedNoble = this.nobles.splice(0, 1)[0];\n      this.currentPlayer.nobles.push(grabbedNoble);\n    }\n  }\n\n  private removeChips(chipColor: ChipColor, amount: number) {\n    const currentValue = this.chipStacks.get(chipColor) || 0;\n    const newValue = currentValue - amount;\n    this.chipStacks.set(chipColor, newValue < 0 ? 0 : newValue);\n  }\n\n  private addChips(chipColor: ChipColor, amount: number = 1) {\n    const currentValue = this.chipStacks.get(chipColor) || 0;\n    this.chipStacks.set(chipColor, currentValue + amount);\n  }\n\n  private chipColorForId(id: string): ChipColor {\n    return id.split(\"-\")[0] as ChipColor;\n  }\n\n  private endPlayerTurn() {\n    this.playerShouldDiscard = this.currentPlayer.chipCount > 10;\n\n    if (!this.playerShouldDiscard) {\n      this.nobleCheck();\n      this.currentPlayerIndex++;\n      if (this.currentPlayerIndex >= this.players.length) {\n        this.handleEndOfRoundStuff();\n      }\n    }\n  }\n\n  private handleEndOfRoundStuff() {\n    const playersWithSufficientPoints = this.players.filter(\n      (player) => player.totalPoints >= 15\n    );\n    if (playersWithSufficientPoints.length === 0) {\n      this.finishRound();\n    } else if (playersWithSufficientPoints.length === 1) {\n      console.log(\"1 clear winner\");\n      this.endGame(playersWithSufficientPoints);\n    } else {\n      console.log(\"multiple possile winners: \", playersWithSufficientPoints);\n      const sortedByScore = playersWithSufficientPoints.sort(\n        (a: Player, b: Player) => b.totalPoints - a.totalPoints\n      );\n      const highestScore = sortedByScore[0].totalPoints;\n      console.log(\"highest score: \", highestScore);\n      const highestScorers = playersWithSufficientPoints.filter(\n        (player) => player.totalPoints === highestScore\n      );\n      console.log(\"all the higest scoreres:\", highestScorers);\n      if (highestScorers.length === 1) {\n        console.log(\"1 winningest winner\");\n        this.endGame(highestScorers);\n      } else {\n        const sortedByCardCount = highestScorers.sort(\n          (a, b) => a.tableau.length - b.tableau.length\n        );\n        const lowestCardCount = sortedByCardCount[0].tableau.length;\n        console.log(\"lowest card count: \", lowestCardCount);\n        const playersWithLowestCardCount = highestScorers.filter(\n          (player) => player.tableau.length === lowestCardCount\n        );\n        console.log(\n          \"players with lowest card count: \",\n          playersWithLowestCardCount\n        );\n        this.endGame(playersWithLowestCardCount);\n      }\n    }\n  }\n\n  private finishRound() {\n    console.log(\"finishing round\");\n\n    this.currentRound++;\n    this.currentPlayerIndex = 0;\n  }\n\n  private endGame(winners: Player[]) {\n    console.log(\"game has ended, winners: \", winners);\n    this.winningPlayers = winners;\n  }\n\n  private runCardTests() {\n    // this.runTestsForCards(tier1Cards, \"1\");\n    // this.runTestsForCards(tier2Cards, \"2\");\n    this.runTestsForCards(tier3Cards, \"3\");\n  }\n\n  private runTestsForCards(cards: Card[], tierLabel: string) {\n    console.log(\"\\n\\nbeginning test for tier : \", tierLabel);\n    console.log(\"here are my cards: \", cards);\n\n    const totalPointsValues = cards.map((card) => card.pointValue);\n    console.log(\"these are the totalPointsValues: \", totalPointsValues);\n\n    const totalPointsValuesReduced = totalPointsValues.reduce((p, c) => p + c);\n    console.log(\n      \"these are the totalPointsValuesReduced\",\n      totalPointsValuesReduced\n    );\n\n    // const totalPoints = cards\n    //   .map((card) => card.pointValue)\n    //   .reduce((p, c) => p + c);\n    // console.log(`tier ${tierLabel} points: ${totalPoints}`);\n\n    console.log(\"cards of color:\");\n    AllCardColors.forEach((cardColor) => {\n      console.log(\"now checking for: \", cardColor);\n      const cardsOfColor = cards.filter((card) => card.color === cardColor);\n\n      const mappedCostsOfColor = cards.map((card) => card.costs);\n      console.log(\"map: \", mappedCostsOfColor);\n\n      const flatMappedCostsOfColor = mappedCostsOfColor.flat();\n      console.log(\"flat\", flatMappedCostsOfColor);\n      const flatMappedCostsOfColorFilter = flatMappedCostsOfColor.filter(\n        (cardCost) => cardCost.color === cardColor\n      );\n      console.log(\"filter\", flatMappedCostsOfColorFilter);\n      const flatMappedCostsOfColorFilterReMapped = flatMappedCostsOfColorFilter.map(\n        (cardCost) => cardCost.amount\n      );\n      console.log(\"map\", flatMappedCostsOfColorFilterReMapped);\n      const flatMappedCostsOfColorFilterReMappedReduced = flatMappedCostsOfColorFilterReMapped.reduce(\n        (p, c) => p + c\n      );\n      console.log(\"reduced\", flatMappedCostsOfColorFilterReMappedReduced);\n      // const costsOfColor = cards;\n      // .flatMap((card) => card.costs)\n      // .filter((cardCost) => cardCost.color === cardColor)\n      // .map((cardCost) => cardCost.amount)\n      // .reduce((p, c) => p + c);\n      console.log(`${cardsOfColor.length} cards for ${cardColor}`);\n      console.log(\n        `tier ${tierLabel} costs for ${cardColor}: ${flatMappedCostsOfColorFilterReMappedReduced}`\n      );\n    });\n  }\n}\n","import GameStore from \"./GameStore\";\n\nconst stores = {\n  gameStore: new GameStore(),\n  // client: new SocketClient(\"http://localhost:8080\"),\n};\n\nexport default stores;\n","import SplendorGame from \"../game/game\";\nimport { observable } from \"mobx\";\n\nconst NUMBER_OF_PLAYERS = 2;\n\nexport default class GameStore {\n  @observable game: SplendorGame = new SplendorGame(NUMBER_OF_PLAYERS);\n\n  reset() {\n    this.game = new SplendorGame(NUMBER_OF_PLAYERS);\n  }\n}\n","import \"./CardComponent.scss\";\nimport { observer } from \"mobx-react\";\nimport React from \"react\";\nimport { Card } from \"../../game/card\";\n\nexport type CardHandler = (id: string) => void;\n\nexport default observer(\n  (props: {\n    id: string;\n    card: Card;\n    purchaseHandler: CardHandler | undefined;\n    reserveHandler: CardHandler | undefined;\n  }) => {\n    const purchaseHandler = props.purchaseHandler;\n    const reserveHandler = props.reserveHandler;\n    return (\n      <div className=\"CardComponent\" id={props.id}>\n        <div className=\"point-value\">\n          {props.card.pointValue > 0 ? props.card.pointValue : \"\\u00a0\"}\n        </div>\n        <div className=\"indicator\">\n          <div className={\"color-indicator \" + props.card.color}> </div>\n        </div>\n        <div className=\"costs\">\n          {props.card.costs.map((cost) => {\n            const className = `cost ${cost.color}`;\n            return (\n              <div className={className} key={className}>\n                {cost.amount}\n              </div>\n            );\n          })}\n        </div>\n        <div className=\"actions\">\n          {reserveHandler && (\n            <button\n              id={props.id}\n              onClick={(event) => reserveHandler(event.currentTarget.id)}\n            >\n              hold\n            </button>\n          )}\n          {purchaseHandler && (\n            <button\n              id={props.id}\n              onClick={(event) => purchaseHandler(event.currentTarget.id)}\n            >\n              buy\n            </button>\n          )}\n        </div>\n      </div>\n    );\n  }\n);\n","import \"./PlayerComponent.scss\";\n\nimport React from \"react\";\nimport stores from \"../../stores/Stores\";\nimport { observer } from \"mobx-react\";\nimport { observable } from \"mobx\";\nimport Player from \"../../game/player\";\nimport CardComponent from \"./CardComponent\";\n\nexport type PlayerProps = {\n  player: Player;\n};\n\n@observer\nexport default class PlayerComponent extends React.Component<PlayerProps> {\n  @observable tempName: string = \"\";\n\n  handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.tempName = event.target.value;\n  };\n\n  handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    this.props.player.name = this.tempName;\n    event.preventDefault();\n  };\n\n  handleBlur = (event: React.FocusEvent<HTMLInputElement>) => {\n    this.props.player.name = this.tempName;\n  };\n\n  render() {\n    const { player } = this.props;\n    const isActive = stores.gameStore.game.currentPlayer === this.props.player;\n    const activeClass = isActive ? \"active\" : \"inactive\";\n    const playerShouldDiscard =\n      stores.gameStore.game.playerShouldDiscard && isActive;\n    const discardClass = playerShouldDiscard ? \"warning\" : \"normal\";\n    return (\n      <div className=\"PlayerComponent\">\n        <div className={activeClass}>\n          <div>player {player.name}</div>\n          <div>id {player.id}</div>\n          <div>points {player.totalPoints}</div>\n          <div className=\"chips-container\">\n            <div className={`background ${discardClass}`}>\n              {playerShouldDiscard\n                ? \"player chips (click to discard)\"\n                : \"player chips\"}\n            </div>\n            <div className=\"player-chips\">\n              {Array.from(player.chips)\n                .filter((value) => value[1] > 0)\n                .map((value) => {\n                  const color = value[0];\n                  const quantity = value[1];\n                  return playerShouldDiscard ? (\n                    <div\n                      id={`${color}-discard`}\n                      className={`chip ${color}`}\n                      onClick={(event) =>\n                        stores.gameStore.game.discardChipHandler(\n                          event.currentTarget.id\n                        )\n                      }\n                      key={Math.random()}\n                    >\n                      {quantity}\n                    </div>\n                  ) : (\n                    <div className={`chip ${color}`} key={Math.random()}>\n                      {quantity}\n                    </div>\n                  );\n                })}\n            </div>\n          </div>\n\n          <div className=\"cards-container\">\n            <div className=\"background\">player tableau</div>\n            <div className=\"player-cards\">\n              {player.tableau.map((card) => {\n                return (\n                  <div className={`card ${card.color}`} key={Math.random()}>\n                    {card.pointValue}\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n\n          <div className=\"reserve-cards-container\">\n            <div className=\"background\">reserve cards</div>\n            <div className=\"reserve-cards\">\n              {player.reserveCards.map((card, index) => {\n                console.log(\"here's a card: \", card);\n                const id = `reservecard-${index}`;\n                const purchaseHandler = stores.gameStore.game.playerCanPurchase(\n                  card\n                )\n                  ? stores.gameStore.game.reservePurchaseHandler\n                  : undefined;\n                return (\n                  <CardComponent\n                    id={id}\n                    card={card}\n                    purchaseHandler={purchaseHandler}\n                    reserveHandler={undefined}\n                  />\n                );\n              })}\n            </div>\n          </div>\n\n          <div className=\"nobles-container\">\n            <div className=\"player-nobles\">\n              {player.nobles.map((noble) => {\n                return (\n                  <div className={`noble`} key={Math.random()}>\n                    {noble.pointValue}\n                  </div>\n                );\n              })}\n            </div>\n            <form onSubmit={this.handleSubmit}>\n              <label>\n                change name:\n                <input\n                  type=\"text\"\n                  value={this.tempName}\n                  onChange={this.handleChange}\n                  onBlur={this.handleBlur}\n                ></input>\n              </label>\n            </form>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import \"./NobleComponent.scss\";\n\nimport { Noble } from \"../../game/noble\";\nimport React from \"react\";\n\nexport type NobleComponentProps = {\n  noble: Noble;\n};\n\nexport const NobleComponent: React.FunctionComponent<NobleComponentProps> = (\n  props\n) => {\n  return (\n    <div className=\"NobleComponent\">\n      <div className=\"point-value\">{props.noble.pointValue}</div>\n      {props.noble.cardRequirements.map((requirement) => {\n        return (\n          <div\n            className={\"requirement \" + requirement.color}\n            key={`${requirement.color}${requirement.amount}`}\n          >\n            {requirement.amount}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n","import \"./CardStackComponent.scss\";\n\nimport React from \"react\";\nimport stores from \"../../stores/Stores\";\nimport { observer } from \"mobx-react\";\nimport { CardCostTier } from \"../../game/card\";\nimport CardComponent from \"./CardComponent\";\n\nexport type CardStackComponentProps = {\n  cardCostTier: CardCostTier;\n};\n\nconst VISIBLE_SLOTS = 4;\n\nexport default observer((props: CardStackComponentProps) => {\n  const { game } = stores.gameStore;\n  const cards = game.cardStacks.get(props.cardCostTier);\n  if (!cards) {\n    return <div />;\n  }\n\n  const remaining = cards.length - VISIBLE_SLOTS;\n  const remainingCards = remaining > 0 ? remaining : 0;\n  const visibleCards = cards.slice(0, VISIBLE_SLOTS);\n  return (\n    <div className=\"CardStackComponent\">\n      <div className=\"card remaining\">{remainingCards} cards remaining</div>\n      {visibleCards.map((card, index) => {\n        const id = `${props.cardCostTier}-${index}`;\n        return (\n          <CardComponent\n            key={id}\n            id={id}\n            card={card}\n            purchaseHandler={\n              game.playerCanPurchase(card)\n                ? game.tablePurchaseHandler\n                : undefined\n            }\n            reserveHandler={\n              game.playerCanReserve ? game.reserveHandler : undefined\n            }\n          />\n        );\n      })}\n    </div>\n  );\n});\n","import \"./ChipStackComponent.scss\";\n\nimport React from \"react\";\nimport stores from \"../../stores/Stores\";\nimport { observer } from \"mobx-react\";\n\nexport default observer(() => {\n  const { game } = stores.gameStore;\n  const player = game.currentPlayer;\n  const chipStackKeys = Array.from(game.chipStacks.keys());\n  return (\n    <div className=\"ChipStackComponent\">\n      <div className=\"temp-chips\">\n        temp chips:\n        <br />\n        {player.tempChips.map((color) => {\n          return (\n            <div key={color}>\n              <div className={`chip-stack ${color}`}>1</div>\n              <button\n                id={`${color}-temp-chip`}\n                onClick={(event) =>\n                  game.returnChipHandler(event.currentTarget.id)\n                }\n              >\n                return\n              </button>\n            </div>\n          );\n        })}\n      </div>\n      {chipStackKeys.map((stackColor) => {\n        const stackAmount = game.chipStacks.get(stackColor) || 0;\n        const playerAmount = player.tempChips.find(\n          (chip) => chip === stackColor\n        )?.length\n          ? 1\n          : 0;\n        const grabOneEnabled =\n          stackAmount && playerAmount === 0 && !game.playerShouldDiscard;\n        const grabTwoEnabled =\n          stackAmount >= 4 &&\n          !player.tempChipCount &&\n          !game.playerShouldDiscard;\n        return (\n          <div key={stackColor}>\n            <div className={`chip-stack ${stackColor}`}>{stackAmount}</div>\n            {stackColor !== \"wild\" && (\n              <>\n                <button\n                  id={`${stackColor}-1`}\n                  disabled={!grabOneEnabled}\n                  onClick={(event) =>\n                    game.singleChipHandler(event.currentTarget.id)\n                  }\n                >\n                  grab 1\n                </button>\n                <button\n                  id={`${stackColor}-2`}\n                  disabled={!grabTwoEnabled}\n                  onClick={(event) =>\n                    game.doubleChipHandler(event.currentTarget.id)\n                  }\n                >\n                  grab 2\n                </button>\n              </>\n            )}\n          </div>\n        );\n      })}\n    </div>\n  );\n});\n","import \"./GameComponent.scss\";\n\nimport React from \"react\";\nimport stores from \"../../stores/Stores\";\nimport { observer } from \"mobx-react\";\nimport PlayerComponent from \"./PlayerComponent\";\nimport { NobleComponent } from \"./NobleComponent\";\nimport CardStackComponent from \"./CardStackComponent\";\nimport ChipStackComponent from \"./ChipStackComponent\";\nimport { keyForNoble } from \"../../game/noble\";\n\n@observer\nexport default class GameComponent extends React.Component {\n  render() {\n    const { game } = stores.gameStore;\n    return (\n      <div className=\"GameComponent\">\n        <div>\n          round #{game.currentRound}, players:\n          {game.players.map((player) => {\n            return <PlayerComponent player={player} key={player.id} />;\n          })}\n        </div>\n        <div>\n          chips:\n          <ChipStackComponent />\n        </div>\n        <div>\n          <div>\n            cards:\n            <CardStackComponent cardCostTier={1} />\n            <CardStackComponent cardCostTier={2} />\n            <CardStackComponent cardCostTier={3} />\n          </div>\n          <div className=\"nobles-container\">\n            nobles:\n            {game.nobles.map((noble) => {\n              return <NobleComponent noble={noble} key={keyForNoble(noble)} />;\n            })}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import \"./ResultsComponent.scss\";\n\nimport React from \"react\";\nimport stores from \"../../stores/Stores\";\nimport SplendorGame from \"../../game/game\";\n\nexport type ResultsComponentProps = {\n  game: SplendorGame;\n};\n\nexport default class ResultsComponent extends React.Component<\n  ResultsComponentProps\n> {\n  render() {\n    if (!this.props.game.winningPlayers) {\n      return <></>;\n    }\n    const winningScore = this.props.game.winningPlayers[0].totalPoints;\n    const scoreString = `with ${winningScore} points`;\n    const winnerString =\n      this.props.game.winningPlayers.length === 1\n        ? `the winner, ${scoreString}, is:`\n        : `the winners, ${scoreString}, are:`;\n    return (\n      <div className=\"ResultsComponent\">\n        <div className=\"announce\">{winnerString}</div>\n        {this.props.game.winningPlayers.map((player) => {\n          return (\n            <div className=\"winner\" key={Math.random()}>\n              {player.name}\n            </div>\n          );\n        })}\n        <hr />\n        <div>\n          all players, final scores:\n          <table>\n            <tbody>\n              {this.props.game.sortedPlayers.map((player) => {\n                return (\n                  <tr key={Math.random()}>\n                    <td>player Name: {player.name}</td>\n                    <td>player score: {player.totalPoints}</td>\n                    <td>development cards: {player.tableau.length}</td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n          <button onClick={() => stores.gameStore.reset()}>reset game</button>\n        </div>\n      </div>\n    );\n  }\n}\n","import \"./App.css\";\n\nimport React from \"react\";\nimport GameComponent from \"../Game/GameComponent\";\nimport stores from \"../../stores/Stores\";\nimport ResultsComponent from \"../Game/ResultsComponent\";\nimport { observer } from \"mobx-react\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div>it not splendor</div>\n      <TheGame />\n    </div>\n  );\n}\n\nexport default App;\n\nconst TheGame = observer(() => {\n  const { game } = stores.gameStore;\n  return game.winningPlayers ? (\n    <ResultsComponent game={game} />\n  ) : (\n    <GameComponent />\n  );\n});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App/App\";\nimport \"mobx-react-lite/batchingForReactDom\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}