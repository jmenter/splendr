{"version":3,"sources":["game/player.ts","game/noble.ts","utils/utilities.ts","game/tier1Cards.ts","game/tier2Cards.ts","game/tier3Cards.ts","game/game.ts","client/SocketClient.ts","stores/Stores.ts","stores/GameStore.ts","components/Game/PlayerComponent.tsx","components/Game/NobleComponent.tsx","components/Game/CardStackComponent.tsx","components/Game/ChipStackComponent.tsx","components/Game/GameComponent.tsx","components/App/App.tsx","index.tsx"],"names":["Player","id","name","tableau","reserveCards","this","chipColor","filter","card","color","length","chips","get","deficit","costs","forEach","cost","amount","buyingPowerForColor","wildAmount","tempChips","currentValue","set","temp","push","index","indexOf","splice","console","log","values","Array","from","reduce","s","c","getChipCount","tempChipCount","observable","Map","computed","action","allNobles","pointValue","cardRequirements","randomizeArray","array","map","a","sort","Math","random","value","b","tier1Cards","tier","tier2Cards","tier3Cards","AllCardColors","SplendorGame","numberOfPlayers","players","initializePlayers","initializeChips","initializeCards","initializeNobles","times","callbackfn","_","chipStacks","cardStacks","nobles","currentPlayer","hasTempChips","canBuyCard","newValue","split","currentPlayerIndex","currentRound","canReserveCard","event","chipColorForId","currentTarget","removeChips","addChip","saveTempChips","endPlayerTurn","ids","costTier","Number","cardIndex","cardStack","cardToBuy","costReduction","costReductionFor","netCostForColor","chipAmount","finalCost","removeChip","addChips","SocketClient","url","socket","cook","document","cookie","uuidv4","openSocket","on","emit","message","stores","gameStore","game","client","PlayerComponent","observer","handleChange","target","handleSubmit","props","player","preventDefault","activeClass","className","chipCount","JSON","stringify","onSubmit","type","onChange","React","Component","NobleComponent","noble","requirement","cards","cardCostTier","remaining","remainingCards","visibleCards","slice","canPurchase","playerCanPurchase","onClick","reserveHandler","disabled","playerCanReserve","purchaseHandler","chipStackKeys","keys","returnChipHandler","stackColor","stackAmount","playerAmount","find","chip","grabOneEnabled","grabTwoEnabled","singleChipHandler","doubleChipHandler","GameComponent","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"oaAIqBA,G,aAQnB,WAAYC,EAAYC,GAAe,yBAPvCD,QAOsC,6GAHtCE,QAAkB,GAGoB,KAFtCC,aAAuB,GAGrBC,KAAKJ,GAAKA,EACVI,KAAKH,KAAOA,E,6DAGUI,GACtB,OAAOD,KAAKF,QAAQI,QAAO,SAACC,GAAD,OAAUA,EAAKC,QAAUH,KAAWI,S,0CAGtCJ,GAIzB,OAHkBD,KAAKM,MAAMC,IAAIN,IAAc,GAC7BD,KAAKF,QAAQI,QAAO,SAACC,GAAD,OAAUA,EAAKC,QAAUH,KAC5DI,S,iCAIaF,GAAsB,IAAD,OACjCK,EAAU,EACdL,EAAKM,MAAMC,SAAQ,SAACC,GAClB,IAAMC,EAAS,EAAKC,oBAAoBF,EAAKP,OACzCO,EAAKC,OAASA,IAChBJ,GAAWG,EAAKC,OAASA,MAG7B,IAAME,EAAad,KAAKM,MAAMC,IAAI,SAAW,EAE7C,OAD0BC,EAAUM,GACR,I,sCAuBN,IAAD,OACrBd,KAAKe,UAAUL,SAAQ,SAACN,GACtB,IAAMY,EAAe,EAAKV,MAAMC,IAAIH,IAAU,EAC9C,EAAKE,MAAMW,IAAIb,EAAOY,EAAe,MAEvChB,KAAKe,UAAY,K,8BAIjBd,GAGC,IAFDW,EAEA,uDAFiB,EACjBM,EACA,wDACA,GAAIA,EACFlB,KAAKe,UAAUI,KAAKlB,OACf,CACL,IAAMe,EAAehB,KAAKM,MAAMC,IAAIN,IAAc,EAClDD,KAAKM,MAAMW,IAAIhB,EAAWe,EAAeJ,M,iCAKlCX,GAAkE,IAA5CW,EAA2C,uDAA1B,EAAGM,EAAuB,wDAC1E,GAAIA,EAAM,CACR,IAAME,EAAQpB,KAAKe,UAAUM,QAAQpB,GACrCD,KAAKe,UAAUO,OAAOF,EAAO,GAG/B,IAAMJ,EAAehB,KAAKM,MAAMC,IAAIN,GAC/Be,IAGLO,QAAQC,IAAI,gBAAiBvB,EAAWe,EAAcJ,GAClDI,GAAgBJ,EAClBZ,KAAKM,MAAMW,IAAIhB,EAAWe,EAAeJ,GAEzCZ,KAAKM,MAAMW,IAAIhB,EAAW,M,qCAIuB,IAAhCiB,EAA+B,wDAClD,GAAIA,EACF,OAAOlB,KAAKe,UAAUV,OAExB,IAAMoB,EAASC,MAAMC,KAAK3B,KAAKM,MAAMmB,UACrC,OAAKA,EAAOpB,OAGLoB,EAAOG,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KAF1B,I,qCAhET,OAAO9B,KAAKD,aAAaM,OAAS,I,gCAKlC,OAAOL,KAAK+B,iB,oCAKZ,OAAO/B,KAAK+B,cAAa,K,mCAKzB,OAAO/B,KAAKgC,cAAgB,M,uCApD7BC,K,iGACAA,K,yEAAmB,IAAIC,O,uCACvBD,K,wEAAoC,M,0CAiCpCE,K,gHAKAA,K,+GAKAA,K,kHAKAA,K,+GA0BAC,K,0ECtEUC,EAAqB,CAChC,CACEC,WAAY,EACZC,iBAAkB,CAChB,CAAEnC,MAAO,OAAQQ,OAAQ,GACzB,CAAER,MAAO,QAASQ,OAAQ,KAG9B,CACE0B,WAAY,EACZC,iBAAkB,CAChB,CAAEnC,MAAO,OAAQQ,OAAQ,GACzB,CAAER,MAAO,QAASQ,OAAQ,KAG9B,CACE0B,WAAY,EACZC,iBAAkB,CAChB,CAAEnC,MAAO,QAASQ,OAAQ,GAC1B,CAAER,MAAO,MAAOQ,OAAQ,KAG5B,CACE0B,WAAY,EACZC,iBAAkB,CAChB,CAAEnC,MAAO,MAAOQ,OAAQ,GACxB,CAAER,MAAO,QAASQ,OAAQ,KAG9B,CACE0B,WAAY,EACZC,iBAAkB,CAChB,CAAEnC,MAAO,QAASQ,OAAQ,GAC1B,CAAER,MAAO,QAASQ,OAAQ,KAG9B,CACE0B,WAAY,EACZC,iBAAkB,CAChB,CAAEnC,MAAO,QAASQ,OAAQ,GAC1B,CAAER,MAAO,OAAQQ,OAAQ,GACzB,CAAER,MAAO,QAASQ,OAAQ,KAG9B,CACE0B,WAAY,EACZC,iBAAkB,CAChB,CAAEnC,MAAO,QAASQ,OAAQ,GAC1B,CAAER,MAAO,MAAOQ,OAAQ,GACxB,CAAER,MAAO,QAASQ,OAAQ,KAG9B,CACE0B,WAAY,EACZC,iBAAkB,CAChB,CAAEnC,MAAO,QAASQ,OAAQ,GAC1B,CAAER,MAAO,MAAOQ,OAAQ,GACxB,CAAER,MAAO,QAASQ,OAAQ,KAG9B,CACE0B,WAAY,EACZC,iBAAkB,CAChB,CAAEnC,MAAO,QAASQ,OAAQ,GAC1B,CAAER,MAAO,OAAQQ,OAAQ,GACzB,CAAER,MAAO,MAAOQ,OAAQ,KAG5B,CACE0B,WAAY,EACZC,iBAAkB,CAChB,CAAEnC,MAAO,QAASQ,OAAQ,GAC1B,CAAER,MAAO,OAAQQ,OAAQ,GACzB,CAAER,MAAO,QAASQ,OAAQ,M,QCrFzB,SAAS4B,EAAeC,GAC7B,OAAOA,EACJC,KAAI,SAACC,GAAD,MAAQ,CAAEC,KAAMC,KAAKC,SAAUC,MAAOJ,MAC1CC,MAAK,SAACD,EAAGK,GAAJ,OAAUL,EAAEC,KAAOI,EAAEJ,QAC1BF,KAAI,SAACC,GAAD,OAAOA,EAAEI,SCFX,I,kCAAME,EAAqB,CAEhC,CACE7C,MAAO,QACPkC,WAAY,EACZY,KAAM,EACNzC,MAAO,CAAC,CAAEL,MAAO,QAASQ,OAAQ,KAEpC,CACER,MAAO,OACPkC,WAAY,EACZY,KAAM,EACNzC,MAAO,CAAC,CAAEL,MAAO,MAAOQ,OAAQ,KAElC,CACER,MAAO,QACPkC,WAAY,EACZY,KAAM,EACNzC,MAAO,CAAC,CAAEL,MAAO,QAASQ,OAAQ,KAEpC,CACER,MAAO,MACPkC,WAAY,EACZY,KAAM,EACNzC,MAAO,CAAC,CAAEL,MAAO,QAASQ,OAAQ,KAEpC,CACER,MAAO,QACPkC,WAAY,EACZY,KAAM,EACNzC,MAAO,CAAC,CAAEL,MAAO,OAAQQ,OAAQ,KAGnC,CACER,MAAO,QACPkC,WAAY,EACZY,KAAM,EACNzC,MAAO,CACL,CAAEL,MAAO,MAAOQ,OAAQ,GACxB,CAAER,MAAO,QAASQ,OAAQ,KAG9B,CACER,MAAO,OACPkC,WAAY,EACZY,KAAM,EACNzC,MAAO,CACL,CAAEL,MAAO,QAASQ,OAAQ,GAC1B,CAAER,MAAO,QAASQ,OAAQ,KAG9B,CACER,MAAO,QACPkC,WAAY,EACZY,KAAM,EACNzC,MAAO,CACL,CAAEL,MAAO,QAASQ,OAAQ,GAC1B,CAAER,MAAO,OAAQQ,OAAQ,KAG7B,CACER,MAAO,MACPkC,WAAY,EACZY,KAAM,EACNzC,MAAO,CACL,CAAEL,MAAO,OAAQQ,OAAQ,GACzB,CAAER,MAAO,QAASQ,OAAQ,KAG9B,CACER,MAAO,QACPkC,WAAY,EACZY,KAAM,EACNzC,MAAO,CACL,CAAEL,MAAO,QAASQ,OAAQ,GAC1B,CAAER,MAAO,MAAOQ,OAAQ,KAI5B,CACER,MAAO,QACPkC,WAAY,EACZY,KAAM,EACNzC,MAAO,CAAC,CAAEL,MAAO,OAAQQ,OAAQ,KAEnC,CACER,MAAO,OACPkC,WAAY,EACZY,KAAM,EACNzC,MAAO,CAAC,CAAEL,MAAO,QAASQ,OAAQ,KAEpC,CACER,MAAO,QACPkC,WAAY,EACZY,KAAM,EACNzC,MAAO,CAAC,CAAEL,MAAO,MAAOQ,OAAQ,KAElC,CACER,MAAO,MACPkC,WAAY,EACZY,KAAM,EACNzC,MAAO,CAAC,CAAEL,MAAO,QAASQ,OAAQ,KAEpC,CACER,MAAO,QACPkC,WAAY,EACZY,KAAM,EACNzC,MAAO,CAAC,CAAEL,MAAO,QAASQ,OAAQ,KAGpC,CACER,MAAO,QACPkC,WAAY,EACZY,KAAM,EACNzC,MAAO,CACL,CAAEL,MAAO,OAAQQ,OAAQ,GACzB,CAAER,MAAO,QAASQ,OAAQ,GAC1B,CAAER,MAAO,MAAOQ,OAAQ,GACxB,CAAER,MAAO,QAASQ,OAAQ,KAG9B,CACER,MAAO,OACPkC,WAAY,EACZY,KAAM,EACNzC,MAAO,CACL,CAAEL,MAAO,QAASQ,OAAQ,GAC1B,CAAER,MAAO,QAASQ,OAAQ,GAC1B,CAAER,MAAO,MAAOQ,OAAQ,GACxB,CAAER,MAAO,QAASQ,OAAQ,KAG9B,CACER,MAAO,QACPkC,WAAY,EACZY,KAAM,EACNzC,MAAO,CACL,CAAEL,MAAO,QAASQ,OAAQ,GAC1B,CAAER,MAAO,OAAQQ,OAAQ,GACzB,CAAER,MAAO,MAAOQ,OAAQ,GACxB,CAAER,MAAO,QAASQ,OAAQ,KAG9B,CACER,MAAO,MACPkC,WAAY,EACZY,KAAM,EACNzC,MAAO,CACL,CAAEL,MAAO,QAASQ,OAAQ,GAC1B,CAAER,MAAO,OAAQQ,OAAQ,GACzB,CAAER,MAAO,QAASQ,OAAQ,GAC1B,CAAER,MAAO,QAASQ,OAAQ,KAG9B,CACER,MAAO,QACPkC,WAAY,EACZY,KAAM,EACNzC,MAAO,CACL,CAAEL,MAAO,QAASQ,OAAQ,GAC1B,CAAER,MAAO,OAAQQ,OAAQ,GACzB,CAAER,MAAO,QAASQ,OAAQ,GAC1B,CAAER,MAAO,MAAOQ,OAAQ,KAI5B,CACER,MAAO,QACPkC,WAAY,EACZY,KAAM,EACNzC,MAAO,CACL,CAAEL,MAAO,OAAQQ,OAAQ,GACzB,CAAER,MAAO,QAASQ,OAAQ,KAG9B,CACER,MAAO,OACPkC,WAAY,EACZY,KAAM,EACNzC,MAAO,CACL,CAAEL,MAAO,QAASQ,OAAQ,GAC1B,CAAER,MAAO,QAASQ,OAAQ,KAG9B,CACER,MAAO,QACPkC,WAAY,EACZY,KAAM,EACNzC,MAAO,CACL,CAAEL,MAAO,OAAQQ,OAAQ,GACzB,CAAER,MAAO,MAAOQ,OAAQ,KAG5B,CACER,MAAO,MACPkC,WAAY,EACZY,KAAM,EACNzC,MAAO,CACL,CAAEL,MAAO,QAASQ,OAAQ,GAC1B,CAAER,MAAO,MAAOQ,OAAQ,KAG5B,CACER,MAAO,QACPkC,WAAY,EACZY,KAAM,EACNzC,MAAO,CACL,CAAEL,MAAO,QAASQ,OAAQ,GAC1B,CAAER,MAAO,QAASQ,OAAQ,MChNnBuC,EAAqB,CAChC,CACE/C,MAAO,MACPkC,WAAY,EACZY,KAAM,EACNzC,MAAO,CACL,CAAEL,MAAO,QAASQ,OAAQ,GAC1B,CAAER,MAAO,OAAQQ,OAAQ,GACzB,CAAER,MAAO,QAASQ,OAAQ,GAC1B,CAAER,MAAO,QAASQ,OAAQ,KAG9B,CACER,MAAO,MACPkC,WAAY,EACZY,KAAM,EACNzC,MAAO,CACL,CAAEL,MAAO,QAASQ,OAAQ,GAC1B,CAAER,MAAO,OAAQQ,OAAQ,GACzB,CAAER,MAAO,QAASQ,OAAQ,GAC1B,CAAER,MAAO,QAASQ,OAAQ,KAG9B,CACER,MAAO,MACPkC,WAAY,EACZY,KAAM,EACNzC,MAAO,CACL,CAAEL,MAAO,QAASQ,OAAQ,GAC1B,CAAER,MAAO,OAAQQ,OAAQ,GACzB,CAAER,MAAO,QAASQ,OAAQ,GAC1B,CAAER,MAAO,QAASQ,OAAQ,KAG9B,CACER,MAAO,MACPkC,WAAY,EACZY,KAAM,EACNzC,MAAO,CACL,CAAEL,MAAO,QAASQ,OAAQ,GAC1B,CAAER,MAAO,OAAQQ,OAAQ,GACzB,CAAER,MAAO,QAASQ,OAAQ,GAC1B,CAAER,MAAO,QAASQ,OAAQ,MC1CnBwC,EAAqB,CAChC,CACEhD,MAAO,QACPkC,WAAY,EACZY,KAAM,EACNzC,MAAO,CACL,CAAEL,MAAO,OAAQQ,OAAQ,GACzB,CAAER,MAAO,QAASQ,OAAQ,GAC1B,CAAER,MAAO,MAAOQ,OAAQ,GACxB,CAAER,MAAO,QAASQ,OAAQ,KAG9B,CACER,MAAO,OACPkC,WAAY,EACZY,KAAM,EACNzC,MAAO,CACL,CAAEL,MAAO,QAASQ,OAAQ,GAC1B,CAAER,MAAO,QAASQ,OAAQ,GAC1B,CAAER,MAAO,MAAOQ,OAAQ,GACxB,CAAER,MAAO,QAASQ,OAAQ,KAG9B,CACER,MAAO,QACPkC,WAAY,EACZY,KAAM,EACNzC,MAAO,CACL,CAAEL,MAAO,QAASQ,OAAQ,GAC1B,CAAER,MAAO,OAAQQ,OAAQ,GACzB,CAAER,MAAO,MAAOQ,OAAQ,GACxB,CAAER,MAAO,QAASQ,OAAQ,KAG9B,CACER,MAAO,MACPkC,WAAY,EACZY,KAAM,EACNzC,MAAO,CACL,CAAEL,MAAO,QAASQ,OAAQ,GAC1B,CAAER,MAAO,OAAQQ,OAAQ,GACzB,CAAER,MAAO,QAASQ,OAAQ,GAC1B,CAAER,MAAO,QAASQ,OAAQ,KAG9B,CACER,MAAO,QACPkC,WAAY,EACZY,KAAM,EACNzC,MAAO,CACL,CAAEL,MAAO,QAASQ,OAAQ,GAC1B,CAAER,MAAO,OAAQQ,OAAQ,GACzB,CAAER,MAAO,QAASQ,OAAQ,GAC1B,CAAER,MAAO,MAAOQ,OAAQ,KAG5B,CACER,MAAO,QACPkC,WAAY,EACZY,KAAM,EACNzC,MAAO,CAAC,CAAEL,MAAO,QAASQ,OAAQ,KAEpC,CACER,MAAO,QACPkC,WAAY,EACZY,KAAM,EACNzC,MAAO,CAAC,CAAEL,MAAO,MAAOQ,OAAQ,KAElC,CACER,MAAO,OACPkC,WAAY,EACZY,KAAM,EACNzC,MAAO,CAAC,CAAEL,MAAO,QAASQ,OAAQ,KAEpC,CACER,MAAO,MACPkC,WAAY,EACZY,KAAM,EACNzC,MAAO,CAAC,CAAEL,MAAO,QAASQ,OAAQ,KAEpC,CACER,MAAO,QACPkC,WAAY,EACZY,KAAM,EACNzC,MAAO,CAAC,CAAEL,MAAO,OAAQQ,OAAQ,KAEnC,CACER,MAAO,MACPkC,WAAY,EACZY,KAAM,EACNzC,MAAO,CACL,CAAEL,MAAO,OAAQQ,OAAQ,GACzB,CAAER,MAAO,QAASQ,OAAQ,GAC1B,CAAER,MAAO,MAAOQ,OAAQ,KAG5B,CACER,MAAO,QACPkC,WAAY,EACZY,KAAM,EACNzC,MAAO,CACL,CAAEL,MAAO,QAASQ,OAAQ,GAC1B,CAAER,MAAO,MAAOQ,OAAQ,GACxB,CAAER,MAAO,QAASQ,OAAQ,MC5FnByC,EAA6B,CACxC,QACA,OACA,QACA,MACA,SAGmBC,G,aAUnB,WAAYC,GAA+B,yBAT3CC,QAAoB,GASsB,gaACxCxD,KAAKyD,kBAAkBF,GACvBvD,KAAK0D,gBAAoC,IAApBH,EAAwB,EAAIA,EAAkB,GACnEvD,KAAK2D,kBACL3D,KAAK4D,iBAAiBL,EAAkB,G,8DAGhB3C,GAAiB,IJ/BtBiD,EAAeC,EI+BM,OJ/BrBD,EIgCZjD,EJhC2BkD,EIgCnB,SAAC1C,GACd,EAAKoC,QAAQrC,KAAK,IAAIxB,EAAOyB,EAAQ,EAAG,YJhC5C,YAAIM,MAAMmC,IAAQnD,SAAQ,SAACqD,EAAG3C,GAC5B0C,EAAW1C,Q,sCImCWR,GAAiB,IAAD,OACtCyC,EAAc3C,SAAQ,SAACN,GACrB,EAAK4D,WAAW/C,IAAIb,EAAOQ,MAE7BZ,KAAKgE,WAAW/C,IAAI,OAAQ,K,wCAI5BjB,KAAKiE,WAAWhD,IAAI,EAAGuB,EAAeS,IACtCjD,KAAKiE,WAAWhD,IAAI,EAAGuB,EAAeW,IACtCnD,KAAKiE,WAAWhD,IAAI,EAAGuB,EAAeY,M,uCAGfxC,GACvBZ,KAAKkE,OAAS1B,EAAeH,GAAWf,OAAO,EAAGV,K,wCAQ3BT,GACvB,OACGH,KAAKmE,cAAcC,cAAgBpE,KAAKmE,cAAcE,WAAWlE,K,kCAkGlDF,EAAsBW,GACxC,IACM0D,GADetE,KAAKgE,WAAWzD,IAAIN,IAAc,GACvBW,EAChCZ,KAAKgE,WAAW/C,IAAIhB,EAAWqE,EAAW,EAAI,EAAIA,K,+BAGnCrE,GAA2C,IAArBW,EAAoB,uDAAH,EAChDI,EAAehB,KAAKgE,WAAWzD,IAAIN,IAAc,EACvDD,KAAKgE,WAAW/C,IAAIhB,EAAWe,EAAeJ,K,qCAGzBhB,GACrB,OAAOA,EAAG2E,MAAM,KAAK,K,sCAIrBvE,KAAKwE,qBACDxE,KAAKwE,oBAAsBxE,KAAKwD,QAAQnD,SAC1CL,KAAKyE,eACLzE,KAAKwE,mBAAqB,K,oCA1H5B,OAAOxE,KAAKwD,QAAQxD,KAAKwE,sB,uCAWzB,OACGxE,KAAKmE,cAAcC,cAAgBpE,KAAKmE,cAAcO,mB,6CApD1DzC,K,yEAAwB,IAAIC,O,wCAC5BD,K,yEAAwB,IAAIC,O,oCAC5BD,K,wEAA6B,M,0CAE7BA,K,yEAAkC,K,gDAElCA,K,yEAAwC,K,yCAgCxCE,K,sHAWAA,K,4HAOAC,K,oFACmB,SAClBuC,GAEA,IAAM1E,EAAY,EAAK2E,eAAeD,EAAME,cAAcjF,IAC1D,EAAKkF,YAAY7E,EAAW,GAC5B,EAAKkE,cAAcY,QAAQ9E,EAAW,GAAG,GACrC,EAAKkE,cAAcnC,eAAiB,IACtC,EAAKmC,cAAca,gBACnB,EAAKC,qB,+CAIR7C,K,oFACmB,SAClBuC,GAEA,IAAM1E,EAAY,EAAK2E,eAAeD,EAAME,cAAcjF,IAC1D,EAAKkF,YAAY7E,EAAW,GAC5B,EAAKkE,cAAcY,QAAQ9E,EAAW,GACtC,EAAKgF,oB,6CAGN7C,K,oFAAyB,SACxBuC,GAEA,IAAMO,EAAMP,EAAME,cAAcjF,GAAG2E,MAAM,KACnCY,EAAWC,OAAOF,EAAI,IACtBG,EAAYD,OAAOF,EAAI,IACvBI,EAAY,EAAKrB,WAAW1D,IAAI4E,GACtC,GAAKG,EAAL,CAIA,IAAMC,EAAYD,EAAUhE,OAAO+D,EAAW,GAAG,GAE7C7E,EAAU,EACd+E,EAAU9E,MAAMC,SAAQ,SAACC,GACvB,IAAM6E,EAAgB,EAAKrB,cAAcsB,iBAAiB9E,EAAKP,OACzDsF,EAAkB/E,EAAKC,OAAS4E,EAChCG,EAAa,EAAKxB,cAAc7D,MAAMC,IAAII,EAAKP,QAAU,EAC3DsF,EAAkBC,IACpBnF,GAAWkF,EAAkBC,GAE/B,IAAMC,EAAYF,GAAmB,EAAIA,EAAkB,EAC3D,EAAKvB,cAAc0B,WAAWlF,EAAKP,MAAOwF,GAC1C,EAAKE,SAASnF,EAAKP,MAAOwF,MAGxBpF,IACF,EAAK2D,cAAc0B,WAAW,OAAQrF,GACtC,EAAKsF,SAAS,OAAQtF,IAExB,EAAK2D,cAAcrE,QAAQqB,KAAKoE,GAChC,EAAKN,qBAvBH,EAAKA,oB,+CA0BR7C,K,oFACmB,SAClBuC,GAEA,IAAMvE,EAAQ,EAAKwE,eAAeD,EAAME,cAAcjF,IAEtD2B,QAAQC,IAAI,aAAcmD,EAAME,cAAcjF,IAC9C,EAAKuE,cAAc0B,WAAWzF,EAAO,GAAG,GACxC,EAAK0F,SAAS1F,EAAO,O,4CAGtBgC,K,oFACgB,SAACuC,GAChB,IAAMO,EAAMP,EAAME,cAAcjF,GAAG2E,MAAM,KACnCrB,EAAOkC,OAAOF,EAAI,IAClB9D,EAAQgE,OAAOF,EAAI,IACnBI,EAAY,EAAKrB,WAAW1D,IAAI2C,GAEtC,GAAIoC,EAAW,CACb,IAAMnF,EAAOmF,EAAUhE,OAAOF,EAAO,GAAG,GACxC,EAAK+C,cAAcpE,aAAaoB,KAAKhB,GACrC,IAAMa,EAAe,EAAKgD,WAAWzD,IAAI,QACrCS,GAAgBA,EAAe,IACjC,EAAKgD,WAAW/C,IAAI,OAAQD,EAAe,GAC3C,EAAKmD,cAAcY,QAAQ,SAE7B,EAAKE,qB,4BC9JUc,G,aAKnB,WAAYC,GAAc,IAAD,gCAJjBC,YAIiB,sCACvB,IAAMC,EAAOC,SAASC,OACtB7E,QAAQC,IAAI0E,GACZ3E,QAAQC,IAAI6E,eACZrG,KAAKiG,OAASK,IAAWN,GACzBhG,KAAKiG,OAAOM,GAAG,WAAW,WACxBhF,QAAQC,IAAI,uBACZ,EAAKyE,OAAOO,KAAK,UAAW,iB,wDAIbC,GACjBzG,KAAKiG,OAAOO,KAAK,UAAWC,K,0FAd7BxE,K,wEAA8B,M,GCClByE,EALA,CACbC,UAAW,I,sCCDXC,KAAqB,IAAItD,EAAa,IDEtCuD,OAAQ,IAAId,EAAa,0B,eEONe,G,MADpBC,a,sPAICC,aAAe,SAACrC,GACd,EAAK9E,KAAO8E,EAAMsC,OAAOlE,O,EAG3BmE,aAAe,SAACvC,GACd,EAAKwC,MAAMC,OAAOvH,KAAO,EAAKA,KAC9B8E,EAAM0C,kB,uDAGE,IACAD,EAAWpH,KAAKmH,MAAhBC,OAEFE,EADWZ,EAAOC,UAAUC,KAAKzC,gBAAkBnE,KAAKmH,MAAMC,OACrC,SAAW,GAC1C,OACE,yBAAKG,UAAU,mBACb,yBAAKA,UAAWD,GACd,uCAAaF,EAAOvH,MACpB,mCAASuH,EAAOxH,IAChB,uCACUwH,EAAOI,UADjB,KAC8BC,KAAKC,UAAUN,EAAO9G,QAEpD,2CACc8G,EAAOpF,cADrB,IACqCyF,KAAKC,UAAUN,EAAOrG,YAE3D,0BAAM4G,SAAU3H,KAAKkH,cACnB,8CAEE,2BACEU,KAAK,OACL7E,MAAO/C,KAAKH,KACZgI,SAAU7H,KAAKgH,uB,GAjCcc,IAAMC,W,kCAChD9F,K,wEAA0B,M,UCLhB+F,G,MAA+D,SAC1Eb,GAEA,OACE,yBAAKI,UAAU,kBACb,yBAAKA,UAAU,eAAeJ,EAAMc,MAAM3F,YACzC6E,EAAMc,MAAM1F,iBAAiBG,KAAI,SAACwF,GACjC,OACE,yBAAKX,UAAW,eAAiBW,EAAY9H,OAC1C8H,EAAYtH,cCPVmG,G,MAAAA,aAAS,SAACI,GAAoC,IACnDP,EAASF,EAAOC,UAAhBC,KACFuB,EAAQvB,EAAK3C,WAAW1D,IAAI4G,EAAMiB,cACxC,IAAKD,EACH,OAAO,8BAGT,IAAME,EAAYF,EAAM9H,OAAS,EAC3BiI,EAAiBD,EAAY,EAAIA,EAAY,EAC7CE,EAAeJ,EAAMK,MAAM,EAAG,GACpC,OACE,yBAAKjB,UAAU,sBACb,yBAAKA,UAAU,kBAAkBe,EAAjC,oBACCC,EAAa7F,KAAI,SAACvC,EAAMiB,GACvB,IAAMqH,EAAc7B,EAAK8B,kBAAkBvI,GACrCP,EAAE,UAAMuH,EAAMiB,aAAZ,YAA4BhH,GACpC,OACE,yBAAKmG,UAAU,QACb,yBAAKA,UAAU,eACZpH,EAAKmC,WAAa,EAAInC,EAAKmC,WAAa,QAE3C,yBAAKiF,UAAU,aACb,yBAAKA,UAAW,mBAAqBpH,EAAKC,OAA1C,MAEF,yBAAKmH,UAAU,SACZpH,EAAKM,MAAMiC,KAAI,SAAC/B,GACf,OACE,yBAAK4G,UAAS,eAAU5G,EAAKP,QAAUO,EAAKC,YAIlD,yBAAK2G,UAAU,WACb,4BACE3H,GAAIA,EACJ+I,QAAS/B,EAAKgC,eACdC,UAAWjC,EAAKkC,kBAHlB,QAOA,4BACElJ,GAAIA,EACJ+I,QAAS/B,EAAKmC,gBACdF,UAAWJ,GAHb,iBC5CC1B,I,MAAAA,aAAS,WAAO,IACrBH,EAASF,EAAOC,UAAhBC,KACFQ,EAASR,EAAKzC,cACd6E,EAAgBtH,MAAMC,KAAKiF,EAAK5C,WAAWiF,QACjD,OACE,yBAAK1B,UAAU,sBACb,yBAAKA,UAAU,cAAf,cAEE,6BACCH,EAAOrG,UAAU2B,KAAI,SAACtC,GACrB,OACE,oCACE,yBAAKmH,UAAS,qBAAgBnH,IAA9B,KACA,4BACER,GAAE,UAAKQ,EAAL,cACFuI,QAAS/B,EAAKsC,mBAFhB,eAUPF,EAActG,KAAI,SAACyG,GAAgB,IAAD,EAC3BC,EAAcxC,EAAK5C,WAAWzD,IAAI4I,IAAe,EACjDE,GAAe,UAAAjC,EAAOrG,UAAUuI,MACpC,SAACC,GAAD,OAAUA,IAASJ,YADA,eAElB9I,QACC,EACA,EACEmJ,EAAiBJ,GAAgC,IAAjBC,EAChCI,EAAiBL,GAAe,IAAMhC,EAAOpF,cACnD,OACE,oCACE,yBAAKuF,UAAS,qBAAgB4B,IAAeC,GAC7B,SAAfD,GACC,oCACE,4BACEvJ,GAAE,UAAKuJ,EAAL,MACFN,UAAWW,EACXb,QAAS/B,EAAK8C,mBAHhB,UAOA,4BACE9J,GAAE,UAAKuJ,EAAL,MACFN,UAAWY,EACXd,QAAS/B,EAAK+C,mBAHhB,oBCvCKC,I,MADpB7C,Y,yKAEW,IACAH,EAASF,EAAOC,UAAhBC,KACR,OACE,yBAAKW,UAAU,iBACb,uCACUX,EAAKnC,aADf,aAEGmC,EAAKpD,QAAQd,KAAI,SAAC0E,GACjB,OAAO,kBAAC,EAAD,CAAiBA,OAAQA,QAGpC,sCAEE,kBAAC,GAAD,OAEF,sCAEE,kBAAC,EAAD,CAAoBgB,aAAc,IAClC,kBAAC,EAAD,CAAoBA,aAAc,IAClC,kBAAC,EAAD,CAAoBA,aAAc,KAEpC,uCAEGxB,EAAK1C,OAAOxB,KAAI,SAACuF,GAChB,OAAO,kBAAC,EAAD,CAAgBA,MAAOA,a,GAxBCH,IAAMC,a,GCIlC8B,OAVf,WACE,OACE,yBAAKtC,UAAU,OACb,gDAEA,kBAAC,GAAD,Q,MCHNuC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAD,OAEF7D,SAAS8D,eAAe,W","file":"static/js/main.2f4b0508.chunk.js","sourcesContent":["import { ChipColor } from \"./game\";\nimport { Card } from \"./card\";\nimport { observable, computed, action } from \"mobx\";\n\nexport default class Player {\n  id: number;\n  @observable name: string;\n  @observable chips = new Map<ChipColor, number>();\n  @observable tempChips: ChipColor[] = [];\n  tableau: Card[] = [];\n  reserveCards: Card[] = [];\n\n  constructor(id: number, name: string) {\n    this.id = id;\n    this.name = name;\n  }\n\n  public costReductionFor(chipColor: ChipColor): number {\n    return this.tableau.filter((card) => card.color === chipColor).length;\n  }\n\n  public buyingPowerForColor(chipColor: ChipColor): number {\n    const chipPower = this.chips.get(chipColor) || 0;\n    const cardPower = this.tableau.filter((card) => card.color === chipColor)\n      .length;\n    return chipPower + cardPower;\n  }\n\n  public canBuyCard(card: Card): boolean {\n    var deficit = 0;\n    card.costs.forEach((cost) => {\n      const amount = this.buyingPowerForColor(cost.color);\n      if (cost.amount > amount) {\n        deficit += cost.amount - amount;\n      }\n    });\n    const wildAmount = this.chips.get(\"wild\") || 0;\n    const deficitMinusWilds = deficit - wildAmount;\n    return deficitMinusWilds <= 0;\n  }\n\n  @computed\n  get canReserveCard(): boolean {\n    return this.reserveCards.length < 3;\n  }\n\n  @computed\n  get chipCount(): number {\n    return this.getChipCount();\n  }\n\n  @computed\n  get tempChipCount(): number {\n    return this.getChipCount(true);\n  }\n\n  @computed\n  get hasTempChips(): boolean {\n    return this.tempChipCount > 0;\n  }\n\n  public saveTempChips() {\n    this.tempChips.forEach((color: ChipColor) => {\n      const currentValue = this.chips.get(color) || 0;\n      this.chips.set(color, currentValue + 1);\n    });\n    this.tempChips = [];\n  }\n\n  public addChip(\n    chipColor: ChipColor,\n    amount: number = 1,\n    temp: boolean = false\n  ) {\n    if (temp) {\n      this.tempChips.push(chipColor);\n    } else {\n      const currentValue = this.chips.get(chipColor) || 0;\n      this.chips.set(chipColor, currentValue + amount);\n    }\n  }\n\n  @action\n  removeChip(chipColor: ChipColor, amount: number = 1, temp: boolean = false) {\n    if (temp) {\n      const index = this.tempChips.indexOf(chipColor);\n      this.tempChips.splice(index, 1);\n    } else {\n    }\n    const currentValue = this.chips.get(chipColor);\n    if (!currentValue) {\n      return;\n    }\n    console.log(\"removing chip\", chipColor, currentValue, amount);\n    if (currentValue >= amount) {\n      this.chips.set(chipColor, currentValue - amount);\n    } else {\n      this.chips.set(chipColor, 0);\n    }\n  }\n\n  private getChipCount(temp: boolean = false): number {\n    if (temp) {\n      return this.tempChips.length;\n    }\n    const values = Array.from(this.chips.values());\n    if (!values.length) {\n      return 0;\n    }\n    return values.reduce((s, c) => s + c);\n  }\n}\n","import { CardColor } from \"./game\";\n\nexport type CardRequirement = {\n  color: CardColor;\n  amount: number;\n};\n\nexport type Noble = {\n  pointValue: number;\n  cardRequirements: CardRequirement[];\n};\n\nexport const allNobles: Noble[] = [\n  {\n    pointValue: 3,\n    cardRequirements: [\n      { color: \"blue\", amount: 4 },\n      { color: \"white\", amount: 4 },\n    ],\n  },\n  {\n    pointValue: 3,\n    cardRequirements: [\n      { color: \"blue\", amount: 4 },\n      { color: \"green\", amount: 4 },\n    ],\n  },\n  {\n    pointValue: 3,\n    cardRequirements: [\n      { color: \"black\", amount: 4 },\n      { color: \"red\", amount: 4 },\n    ],\n  },\n  {\n    pointValue: 3,\n    cardRequirements: [\n      { color: \"red\", amount: 4 },\n      { color: \"green\", amount: 4 },\n    ],\n  },\n  {\n    pointValue: 3,\n    cardRequirements: [\n      { color: \"black\", amount: 4 },\n      { color: \"white\", amount: 4 },\n    ],\n  },\n  {\n    pointValue: 3,\n    cardRequirements: [\n      { color: \"black\", amount: 3 },\n      { color: \"blue\", amount: 3 },\n      { color: \"white\", amount: 3 },\n    ],\n  },\n  {\n    pointValue: 3,\n    cardRequirements: [\n      { color: \"black\", amount: 3 },\n      { color: \"red\", amount: 3 },\n      { color: \"white\", amount: 3 },\n    ],\n  },\n  {\n    pointValue: 3,\n    cardRequirements: [\n      { color: \"black\", amount: 3 },\n      { color: \"red\", amount: 3 },\n      { color: \"green\", amount: 3 },\n    ],\n  },\n  {\n    pointValue: 3,\n    cardRequirements: [\n      { color: \"green\", amount: 3 },\n      { color: \"blue\", amount: 3 },\n      { color: \"red\", amount: 3 },\n    ],\n  },\n  {\n    pointValue: 3,\n    cardRequirements: [\n      { color: \"green\", amount: 3 },\n      { color: \"blue\", amount: 3 },\n      { color: \"white\", amount: 3 },\n    ],\n  },\n];\n","export function randomizeArray(array: any[]): any[] {\n  return array\n    .map((a) => ({ sort: Math.random(), value: a }))\n    .sort((a, b) => a.sort - b.sort)\n    .map((a) => a.value);\n}\n\nexport function repeat(times: number, callbackfn: (index: number) => void) {\n  [...Array(times)].forEach((_, index) => {\n    callbackfn(index);\n  });\n}\n","import { Card } from \"./card\";\n\nexport const tier1Cards: Card[] = [\n  // best value\n  {\n    color: \"white\",\n    pointValue: 1,\n    tier: 1,\n    costs: [{ color: \"green\", amount: 4 }],\n  },\n  {\n    color: \"blue\",\n    pointValue: 1,\n    tier: 1,\n    costs: [{ color: \"red\", amount: 4 }],\n  },\n  {\n    color: \"green\",\n    pointValue: 1,\n    tier: 1,\n    costs: [{ color: \"black\", amount: 4 }],\n  },\n  {\n    color: \"red\",\n    pointValue: 1,\n    tier: 1,\n    costs: [{ color: \"white\", amount: 4 }],\n  },\n  {\n    color: \"black\",\n    pointValue: 1,\n    tier: 1,\n    costs: [{ color: \"blue\", amount: 4 }],\n  },\n  // great value\n  {\n    color: \"white\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"red\", amount: 2 },\n      { color: \"black\", amount: 1 },\n    ],\n  },\n  {\n    color: \"blue\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"white\", amount: 1 },\n      { color: \"black\", amount: 2 },\n    ],\n  },\n  {\n    color: \"green\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"white\", amount: 2 },\n      { color: \"blue\", amount: 1 },\n    ],\n  },\n  {\n    color: \"red\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"blue\", amount: 2 },\n      { color: \"green\", amount: 1 },\n    ],\n  },\n  {\n    color: \"black\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"green\", amount: 2 },\n      { color: \"red\", amount: 1 },\n    ],\n  },\n  // medium value\n  {\n    color: \"white\",\n    pointValue: 0,\n    tier: 1,\n    costs: [{ color: \"blue\", amount: 3 }],\n  },\n  {\n    color: \"blue\",\n    pointValue: 0,\n    tier: 1,\n    costs: [{ color: \"black\", amount: 3 }],\n  },\n  {\n    color: \"green\",\n    pointValue: 0,\n    tier: 1,\n    costs: [{ color: \"red\", amount: 3 }],\n  },\n  {\n    color: \"red\",\n    pointValue: 0,\n    tier: 1,\n    costs: [{ color: \"white\", amount: 3 }],\n  },\n  {\n    color: \"black\",\n    pointValue: 0,\n    tier: 1,\n    costs: [{ color: \"green\", amount: 3 }],\n  },\n  // ok value\n  {\n    color: \"white\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"blue\", amount: 1 },\n      { color: \"green\", amount: 1 },\n      { color: \"red\", amount: 1 },\n      { color: \"black\", amount: 1 },\n    ],\n  },\n  {\n    color: \"blue\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"white\", amount: 1 },\n      { color: \"green\", amount: 1 },\n      { color: \"red\", amount: 1 },\n      { color: \"black\", amount: 1 },\n    ],\n  },\n  {\n    color: \"green\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"white\", amount: 1 },\n      { color: \"blue\", amount: 1 },\n      { color: \"red\", amount: 1 },\n      { color: \"black\", amount: 1 },\n    ],\n  },\n  {\n    color: \"red\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"white\", amount: 1 },\n      { color: \"blue\", amount: 1 },\n      { color: \"green\", amount: 1 },\n      { color: \"black\", amount: 1 },\n    ],\n  },\n  {\n    color: \"black\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"white\", amount: 1 },\n      { color: \"blue\", amount: 1 },\n      { color: \"green\", amount: 1 },\n      { color: \"red\", amount: 1 },\n    ],\n  },\n  // middling value\n  {\n    color: \"white\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"blue\", amount: 2 },\n      { color: \"black\", amount: 2 },\n    ],\n  },\n  {\n    color: \"blue\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"green\", amount: 2 },\n      { color: \"black\", amount: 2 },\n    ],\n  },\n  {\n    color: \"green\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"blue\", amount: 2 },\n      { color: \"red\", amount: 2 },\n    ],\n  },\n  {\n    color: \"red\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"white\", amount: 2 },\n      { color: \"red\", amount: 2 },\n    ],\n  },\n  {\n    color: \"black\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"white\", amount: 2 },\n      { color: \"green\", amount: 2 },\n    ],\n  },\n];\n","import { Card } from \"./card\";\n\nexport const tier2Cards: Card[] = [\n  {\n    color: \"red\",\n    pointValue: 3,\n    tier: 2,\n    costs: [\n      { color: \"white\", amount: 3 },\n      { color: \"blue\", amount: 5 },\n      { color: \"green\", amount: 3 },\n      { color: \"black\", amount: 3 },\n    ],\n  },\n  {\n    color: \"red\",\n    pointValue: 3,\n    tier: 2,\n    costs: [\n      { color: \"white\", amount: 3 },\n      { color: \"blue\", amount: 5 },\n      { color: \"green\", amount: 3 },\n      { color: \"black\", amount: 3 },\n    ],\n  },\n  {\n    color: \"red\",\n    pointValue: 3,\n    tier: 2,\n    costs: [\n      { color: \"white\", amount: 3 },\n      { color: \"blue\", amount: 5 },\n      { color: \"green\", amount: 3 },\n      { color: \"black\", amount: 3 },\n    ],\n  },\n  {\n    color: \"red\",\n    pointValue: 3,\n    tier: 2,\n    costs: [\n      { color: \"white\", amount: 3 },\n      { color: \"blue\", amount: 5 },\n      { color: \"green\", amount: 3 },\n      { color: \"black\", amount: 3 },\n    ],\n  },\n];\n","import { Card } from \"./card\";\n\nexport const tier3Cards: Card[] = [\n  {\n    color: \"white\",\n    pointValue: 3,\n    tier: 3,\n    costs: [\n      { color: \"blue\", amount: 3 },\n      { color: \"green\", amount: 3 },\n      { color: \"red\", amount: 5 },\n      { color: \"black\", amount: 3 },\n    ],\n  },\n  {\n    color: \"blue\",\n    pointValue: 3,\n    tier: 3,\n    costs: [\n      { color: \"white\", amount: 3 },\n      { color: \"green\", amount: 3 },\n      { color: \"red\", amount: 3 },\n      { color: \"black\", amount: 5 },\n    ],\n  },\n  {\n    color: \"green\",\n    pointValue: 3,\n    tier: 3,\n    costs: [\n      { color: \"white\", amount: 5 },\n      { color: \"blue\", amount: 3 },\n      { color: \"red\", amount: 3 },\n      { color: \"black\", amount: 3 },\n    ],\n  },\n  {\n    color: \"red\",\n    pointValue: 3,\n    tier: 3,\n    costs: [\n      { color: \"white\", amount: 3 },\n      { color: \"blue\", amount: 5 },\n      { color: \"green\", amount: 3 },\n      { color: \"black\", amount: 3 },\n    ],\n  },\n  {\n    color: \"black\",\n    pointValue: 3,\n    tier: 3,\n    costs: [\n      { color: \"white\", amount: 3 },\n      { color: \"blue\", amount: 3 },\n      { color: \"green\", amount: 5 },\n      { color: \"red\", amount: 3 },\n    ],\n  },\n  {\n    color: \"white\",\n    pointValue: 4,\n    tier: 3,\n    costs: [{ color: \"black\", amount: 7 }],\n  },\n  {\n    color: \"black\",\n    pointValue: 4,\n    tier: 3,\n    costs: [{ color: \"red\", amount: 7 }],\n  },\n  {\n    color: \"blue\",\n    pointValue: 4,\n    tier: 3,\n    costs: [{ color: \"white\", amount: 7 }],\n  },\n  {\n    color: \"red\",\n    pointValue: 4,\n    tier: 3,\n    costs: [{ color: \"green\", amount: 7 }],\n  },\n  {\n    color: \"green\",\n    pointValue: 4,\n    tier: 3,\n    costs: [{ color: \"blue\", amount: 7 }],\n  },\n  {\n    color: \"red\",\n    pointValue: 4,\n    tier: 3,\n    costs: [\n      { color: \"blue\", amount: 3 },\n      { color: \"green\", amount: 6 },\n      { color: \"red\", amount: 3 },\n    ],\n  },\n  {\n    color: \"black\",\n    pointValue: 4,\n    tier: 3,\n    costs: [\n      { color: \"green\", amount: 3 },\n      { color: \"red\", amount: 6 },\n      { color: \"black\", amount: 3 },\n    ],\n  },\n];\n","import Player from \"./player\";\nimport { CardCostTier, Card } from \"./card\";\nimport { Noble, allNobles } from \"./noble\";\nimport { randomizeArray, repeat } from \"../utils/utilities\";\nimport { computed, observable, action } from \"mobx\";\nimport { tier1Cards } from \"./tier1Cards\";\nimport { tier2Cards } from \"./tier2Cards\";\nimport { tier3Cards } from \"./tier3Cards\";\n\nexport type PlayerCount = 2 | 3 | 4;\nexport type CardColor = \"white\" | \"blue\" | \"green\" | \"red\" | \"black\";\nexport type ChipColor = CardColor | \"wild\";\n\nexport const AllCardColors: CardColor[] = [\n  \"white\",\n  \"blue\",\n  \"green\",\n  \"red\",\n  \"black\",\n];\n\nexport default class SplendorGame {\n  players: Player[] = [];\n  @observable chipStacks = new Map<ChipColor, number>();\n  @observable cardStacks = new Map<CardCostTier, Card[]>();\n  @observable nobles: Noble[] = [];\n\n  @observable currentRound: number = 1;\n\n  @observable private currentPlayerIndex = 0;\n\n  constructor(numberOfPlayers: PlayerCount) {\n    this.initializePlayers(numberOfPlayers);\n    this.initializeChips(numberOfPlayers === 4 ? 7 : numberOfPlayers + 2);\n    this.initializeCards();\n    this.initializeNobles(numberOfPlayers + 1);\n  }\n\n  private initializePlayers(amount: number) {\n    repeat(amount, (index) => {\n      this.players.push(new Player(index + 1, \"player\"));\n    });\n  }\n\n  private initializeChips(amount: number) {\n    AllCardColors.forEach((color) => {\n      this.chipStacks.set(color, amount);\n    });\n    this.chipStacks.set(\"wild\", 5);\n  }\n\n  private initializeCards() {\n    this.cardStacks.set(1, randomizeArray(tier1Cards));\n    this.cardStacks.set(2, randomizeArray(tier2Cards));\n    this.cardStacks.set(3, randomizeArray(tier3Cards));\n  }\n\n  private initializeNobles(amount: number) {\n    this.nobles = randomizeArray(allNobles).splice(0, amount);\n  }\n\n  @computed\n  get currentPlayer(): Player {\n    return this.players[this.currentPlayerIndex];\n  }\n\n  public playerCanPurchase(card: Card): boolean {\n    return (\n      !this.currentPlayer.hasTempChips && this.currentPlayer.canBuyCard(card)\n    );\n  }\n\n  @computed\n  get playerCanReserve(): boolean {\n    return (\n      !this.currentPlayer.hasTempChips && this.currentPlayer.canReserveCard\n    );\n  }\n\n  @action\n  singleChipHandler = (\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>\n  ) => {\n    const chipColor = this.chipColorForId(event.currentTarget.id);\n    this.removeChips(chipColor, 1);\n    this.currentPlayer.addChip(chipColor, 1, true);\n    if (this.currentPlayer.tempChipCount >= 3) {\n      this.currentPlayer.saveTempChips();\n      this.endPlayerTurn();\n    }\n  };\n\n  @action\n  doubleChipHandler = (\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>\n  ) => {\n    const chipColor = this.chipColorForId(event.currentTarget.id);\n    this.removeChips(chipColor, 2);\n    this.currentPlayer.addChip(chipColor, 2);\n    this.endPlayerTurn();\n  };\n\n  @action purchaseHandler = (\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>\n  ) => {\n    const ids = event.currentTarget.id.split(\"-\");\n    const costTier = Number(ids[0]) as CardCostTier;\n    const cardIndex = Number(ids[1]);\n    const cardStack = this.cardStacks.get(costTier);\n    if (!cardStack) {\n      this.endPlayerTurn();\n      return;\n    }\n    const cardToBuy = cardStack.splice(cardIndex, 1)[0];\n\n    var deficit = 0;\n    cardToBuy.costs.forEach((cost) => {\n      const costReduction = this.currentPlayer.costReductionFor(cost.color);\n      const netCostForColor = cost.amount - costReduction;\n      const chipAmount = this.currentPlayer.chips.get(cost.color) || 0;\n      if (netCostForColor > chipAmount) {\n        deficit += netCostForColor - chipAmount;\n      }\n      const finalCost = netCostForColor >= 0 ? netCostForColor : 0;\n      this.currentPlayer.removeChip(cost.color, finalCost);\n      this.addChips(cost.color, finalCost);\n    });\n\n    if (deficit) {\n      this.currentPlayer.removeChip(\"wild\", deficit);\n      this.addChips(\"wild\", deficit);\n    }\n    this.currentPlayer.tableau.push(cardToBuy);\n    this.endPlayerTurn();\n  };\n\n  @action\n  returnChipHandler = (\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>\n  ) => {\n    const color = this.chipColorForId(event.currentTarget.id);\n\n    console.log(\"returning \", event.currentTarget.id);\n    this.currentPlayer.removeChip(color, 1, true);\n    this.addChips(color, 1);\n  };\n\n  @action\n  reserveHandler = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    const ids = event.currentTarget.id.split(\"-\");\n    const tier = Number(ids[0]) as CardCostTier;\n    const index = Number(ids[1]);\n    const cardStack = this.cardStacks.get(tier);\n\n    if (cardStack) {\n      const card = cardStack.splice(index, 1)[0];\n      this.currentPlayer.reserveCards.push(card);\n      const currentValue = this.chipStacks.get(\"wild\");\n      if (currentValue && currentValue > 0) {\n        this.chipStacks.set(\"wild\", currentValue - 1);\n        this.currentPlayer.addChip(\"wild\");\n      }\n      this.endPlayerTurn();\n    }\n  };\n\n  private removeChips(chipColor: ChipColor, amount: number) {\n    const currentValue = this.chipStacks.get(chipColor) || 0;\n    const newValue = currentValue - amount;\n    this.chipStacks.set(chipColor, newValue < 0 ? 0 : newValue);\n  }\n\n  private addChips(chipColor: ChipColor, amount: number = 1) {\n    const currentValue = this.chipStacks.get(chipColor) || 0;\n    this.chipStacks.set(chipColor, currentValue + amount);\n  }\n\n  private chipColorForId(id: string): ChipColor {\n    return id.split(\"-\")[0] as ChipColor;\n  }\n\n  private endPlayerTurn() {\n    this.currentPlayerIndex++;\n    if (this.currentPlayerIndex >= this.players.length) {\n      this.currentRound++;\n      this.currentPlayerIndex = 0;\n    }\n  }\n}\n","import openSocket from \"socket.io-client\";\nimport { observable } from \"mobx\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nexport default class SocketClient {\n  private socket: SocketIOClient.Socket;\n\n  @observable clientId: string = \"\";\n\n  constructor(url: string) {\n    const cook = document.cookie;\n    console.log(cook);\n    console.log(uuidv4());\n    this.socket = openSocket(url);\n    this.socket.on(\"connect\", () => {\n      console.log(\"connected to server\");\n      this.socket.emit(\"message\", \"hi from me\");\n    });\n  }\n\n  public sendMessage(message: string) {\n    this.socket.emit(\"message\", message);\n  }\n\n  private configureClientId() {}\n}\n","import GameStore from \"./GameStore\";\nimport SocketClient from \"../client/SocketClient\";\n\nconst stores = {\n  gameStore: new GameStore(),\n  client: new SocketClient(\"http://localhost:8080\"),\n};\n\nexport default stores;\n","import SplendorGame from \"../game/game\";\n\nexport default class GameStore {\n  game: SplendorGame = new SplendorGame(3);\n}\n","import React from \"react\";\nimport stores from \"../../stores/Stores\";\nimport { observer } from \"mobx-react\";\nimport { observable } from \"mobx\";\nimport Player from \"../../game/player\";\nimport \"./PlayerComponent.scss\";\n\nexport type PlayerProps = {\n  player: Player;\n};\n\n@observer\nexport default class PlayerComponent extends React.Component<PlayerProps> {\n  @observable name: string = \"\";\n\n  handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.name = event.target.value;\n  };\n\n  handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    this.props.player.name = this.name;\n    event.preventDefault();\n  };\n\n  render() {\n    const { player } = this.props;\n    const isActive = stores.gameStore.game.currentPlayer === this.props.player;\n    const activeClass = isActive ? \"active\" : \"\";\n    return (\n      <div className=\"PlayerComponent\">\n        <div className={activeClass}>\n          <div>player {player.name}</div>\n          <div>id {player.id}</div>\n          <div>\n            chips ({player.chipCount}) {JSON.stringify(player.chips)}\n          </div>\n          <div>\n            tempchips ({player.tempChipCount}){JSON.stringify(player.tempChips)}\n          </div>\n          <form onSubmit={this.handleSubmit}>\n            <label>\n              change name:\n              <input\n                type=\"text\"\n                value={this.name}\n                onChange={this.handleChange}\n              ></input>\n            </label>\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n","import { Noble } from \"../../game/noble\";\nimport React from \"react\";\nimport \"./NobleComponent.scss\";\n\nexport type NobleComponentProps = {\n  noble: Noble;\n};\n\nexport const NobleComponent: React.FunctionComponent<NobleComponentProps> = (\n  props\n) => {\n  return (\n    <div className=\"NobleComponent\">\n      <div className=\"point-value\">{props.noble.pointValue}</div>\n      {props.noble.cardRequirements.map((requirement) => {\n        return (\n          <div className={\"requirement \" + requirement.color}>\n            {requirement.amount}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./CardStackComponent.scss\";\nimport stores from \"../../stores/Stores\";\nimport { observer } from \"mobx-react\";\nimport { CardCostTier } from \"../../game/card\";\n\nexport type CardStackComponentProps = {\n  cardCostTier: CardCostTier;\n};\n\nexport default observer((props: CardStackComponentProps) => {\n  const { game } = stores.gameStore;\n  const cards = game.cardStacks.get(props.cardCostTier);\n  if (!cards) {\n    return <div />;\n  }\n\n  const remaining = cards.length - 4;\n  const remainingCards = remaining > 0 ? remaining : 0;\n  const visibleCards = cards.slice(0, 4);\n  return (\n    <div className=\"CardStackComponent\">\n      <div className=\"card remaining\">{remainingCards} cards remaining</div>\n      {visibleCards.map((card, index) => {\n        const canPurchase = game.playerCanPurchase(card);\n        const id = `${props.cardCostTier}-${index}`;\n        return (\n          <div className=\"card\">\n            <div className=\"point-value\">\n              {card.pointValue > 0 ? card.pointValue : \"\\u00a0\"}\n            </div>\n            <div className=\"indicator\">\n              <div className={\"color-indicator \" + card.color}> </div>\n            </div>\n            <div className=\"costs\">\n              {card.costs.map((cost) => {\n                return (\n                  <div className={`cost ${cost.color}`}>{cost.amount}</div>\n                );\n              })}\n            </div>\n            <div className=\"actions\">\n              <button\n                id={id}\n                onClick={game.reserveHandler}\n                disabled={!game.playerCanReserve}\n              >\n                hold\n              </button>\n              <button\n                id={id}\n                onClick={game.purchaseHandler}\n                disabled={!canPurchase}\n              >\n                buy\n              </button>\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n});\n","import React from \"react\";\nimport stores from \"../../stores/Stores\";\nimport { observer } from \"mobx-react\";\nimport \"./ChipStackComponent.scss\";\n\nexport default observer(() => {\n  const { game } = stores.gameStore;\n  const player = game.currentPlayer;\n  const chipStackKeys = Array.from(game.chipStacks.keys());\n  return (\n    <div className=\"ChipStackComponent\">\n      <div className=\"temp-chips\">\n        temp chips:\n        <br />\n        {player.tempChips.map((color) => {\n          return (\n            <>\n              <div className={`chip-stack ${color}`}>1</div>\n              <button\n                id={`${color}-temp-chip`}\n                onClick={game.returnChipHandler}\n              >\n                return\n              </button>\n            </>\n          );\n        })}\n      </div>\n      {chipStackKeys.map((stackColor) => {\n        const stackAmount = game.chipStacks.get(stackColor) || 0;\n        const playerAmount = player.tempChips.find(\n          (chip) => chip === stackColor\n        )?.length\n          ? 1\n          : 0;\n        const grabOneEnabled = stackAmount && playerAmount === 0;\n        const grabTwoEnabled = stackAmount >= 4 && !player.tempChipCount;\n        return (\n          <>\n            <div className={`chip-stack ${stackColor}`}>{stackAmount}</div>\n            {stackColor !== \"wild\" && (\n              <>\n                <button\n                  id={`${stackColor}-1`}\n                  disabled={!grabOneEnabled}\n                  onClick={game.singleChipHandler}\n                >\n                  grab 1\n                </button>\n                <button\n                  id={`${stackColor}-2`}\n                  disabled={!grabTwoEnabled}\n                  onClick={game.doubleChipHandler}\n                >\n                  grab 2\n                </button>\n              </>\n            )}\n          </>\n        );\n      })}\n    </div>\n  );\n});\n","import React from \"react\";\nimport stores from \"../../stores/Stores\";\nimport { observer } from \"mobx-react\";\nimport PlayerComponent from \"./PlayerComponent\";\nimport { NobleComponent } from \"./NobleComponent\";\nimport CardStackComponent from \"./CardStackComponent\";\nimport ChipStackComponent from \"./ChipStackComponent\";\nimport \"./GameComponent.scss\";\n\n@observer\nexport default class GameComponent extends React.Component {\n  render() {\n    const { game } = stores.gameStore;\n    return (\n      <div className=\"GameComponent\">\n        <div>\n          round #{game.currentRound}, players:\n          {game.players.map((player) => {\n            return <PlayerComponent player={player} />;\n          })}\n        </div>\n        <div>\n          chips:\n          <ChipStackComponent />\n        </div>\n        <div>\n          cards:\n          <CardStackComponent cardCostTier={1} />\n          <CardStackComponent cardCostTier={2} />\n          <CardStackComponent cardCostTier={3} />\n        </div>\n        <div>\n          nobles:\n          {game.nobles.map((noble) => {\n            return <NobleComponent noble={noble} />;\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport GameComponent from \"../Game/GameComponent\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div>it not splendor</div>\n\n      <GameComponent />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App/App\";\n\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}