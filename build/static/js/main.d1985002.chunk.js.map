{"version":3,"sources":["game/player.ts","game/card.ts","game/noble.ts","utils/utilities.ts","game/tier1Cards.ts","game/tier2Cards.ts","game/tier3Cards.ts","game/game.ts","stores/Stores.ts","stores/GameStore.ts","components/Game/PlayerComponent.tsx","components/Game/NobleComponent.tsx","components/Game/CardStackComponent.tsx","components/Game/ChipStackComponent.tsx","components/Game/GameComponent.tsx","components/Game/ResultsComponent.tsx","components/App/App.tsx","index.tsx"],"names":["fakeTableau","pointValue","color","tier","costs","Player","id","name","reserveCards","this","forEach","card","tableau","push","cardColor","filter","length","chipColor","chips","get","deficit","cost","amount","buyingPowerForColor","wildAmount","noble","cardRequirements","requirement","meetsNobleRequirement","tempChips","currentValue","set","temp","index","indexOf","splice","console","log","values","Array","from","reduce","s","c","cardPoints","noblesPoints","nobles","getChipCount","tempChipCount","observable","Map","computed","action","AllCardColors","keyForNoble","JSON","stringify","allNobles","randomizeArray","array","map","a","sort","Math","random","value","b","tier1Cards","tier2Cards","tier3Cards","SplendorGame","numberOfPlayers","players","initializePlayers","initializeChips","initializeCards","initializeNobles","times","callback","_","chipStacks","cardStacks","currentPlayer","hasTempChips","canBuyCard","fulfillsRequirementsForNoble","grabbedNoble","newValue","split","nobleCheck","currentPlayerIndex","handleEndOfRoundStuff","playersWithSufficientPoints","player","totalPoints","finishRound","endGame","highestScore","highestScorers","lowestCardCount","playersWithLowestCardCount","currentRound","winners","winningPlayers","runTestsForCards","cards","tierLabel","totalPointsValues","totalPointsValuesReduced","p","cardsOfColor","mappedCostsOfColor","flatMappedCostsOfColor","flat","flatMappedCostsOfColorFilter","cardCost","flatMappedCostsOfColorFilterReMapped","flatMappedCostsOfColorFilterReMappedReduced","canReserveCard","targetId","chipColorForId","removeChips","addChip","saveTempChips","endPlayerTurn","ids","costTier","Number","cardIndex","cardStack","cardToBuy","costReduction","costReductionFor","netCostForColor","chipAmount","finalCost","removeChip","addChips","stores","gameStore","game","PlayerComponent","observer","handleChange","event","tempName","target","handleSubmit","props","preventDefault","handleBlur","activeClass","className","quantity","key","onSubmit","type","onChange","onBlur","React","Component","NobleComponent","cardCostTier","remaining","remainingCards","visibleCards","slice","canPurchase","playerCanPurchase","onClick","reserveHandler","currentTarget","disabled","playerCanReserve","purchaseHandler","chipStackKeys","keys","returnChipHandler","stackColor","stackAmount","playerAmount","find","chip","grabOneEnabled","grabTwoEnabled","singleChipHandler","doubleChipHandler","GameComponent","ResultsComponent","winningScore","scoreString","winnerString","sortedPlayers","reset","App","TheGame","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0aAKMA,EAAsB,CAC1B,CAAEC,WAAY,EAAGC,MAAO,MAAOC,KAAM,EAAGC,MAAO,IAC/C,CAAEH,WAAY,EAAGC,MAAO,MAAOC,KAAM,EAAGC,MAAO,IAC/C,CAAEH,WAAY,EAAGC,MAAO,OAAQC,KAAM,EAAGC,MAAO,IAChD,CAAEH,WAAY,EAAGC,MAAO,OAAQC,KAAM,EAAGC,MAAO,IAChD,CAAEH,WAAY,EAAGC,MAAO,QAASC,KAAM,EAAGC,MAAO,IACjD,CAAEH,WAAY,EAAGC,MAAO,QAASC,KAAM,EAAGC,MAAO,IACjD,CAAEH,WAAY,EAAGC,MAAO,QAASC,KAAM,EAAGC,MAAO,IACjD,CAAEH,WAAY,EAAGC,MAAO,QAASC,KAAM,EAAGC,MAAO,IACjD,CAAEH,WAAY,EAAGC,MAAO,QAASC,KAAM,EAAGC,MAAO,IACjD,CAAEH,WAAY,EAAGC,MAAO,QAASC,KAAM,EAAGC,MAAO,KAE9BC,G,aAUnB,WAAYC,EAAYC,GAAe,IAAD,gCATtCD,QASsC,kLAFtCE,aAAuB,GAGrBC,KAAKH,GAAKA,EACVG,KAAKF,KAAOA,EACZP,EAAYU,SAAQ,SAACC,GAAD,OAAU,EAAKC,QAAQC,KAAKF,M,6DAG1BG,GACtB,OAAOL,KAAKG,QAAQG,QAAO,SAACJ,GAAD,OAAUA,EAAKT,QAAUY,KAAWE,S,0CAGtCC,GAIzB,OAHkBR,KAAKS,MAAMC,IAAIF,IAAc,GAC7BR,KAAKG,QAAQG,QAAO,SAACJ,GAAD,OAAUA,EAAKT,QAAUe,KAC5DD,S,iCAIaL,GAAsB,IAAD,OACjCS,EAAU,EACdT,EAAKP,MAAMM,SAAQ,SAACW,GAClB,IAAMC,EAAS,EAAKC,oBAAoBF,EAAKnB,OACzCmB,EAAKC,OAASA,IAChBF,GAAWC,EAAKC,OAASA,MAG7B,IAAME,EAAaf,KAAKS,MAAMC,IAAI,SAAW,EAE7C,OAD0BC,EAAUI,GACR,I,mDAGMC,GAAwB,IAAD,OAMzD,OAA2C,IALVA,EAAMC,iBAAiBX,QACtD,SAACY,GACC,OAAQ,EAAKC,sBAAsBD,MAGPX,S,4CAGJW,GAC5B,OACElB,KAAKG,QAAQG,QAAO,SAACJ,GAAD,OAAUA,EAAKT,QAAUyB,EAAYzB,SAAOc,QAChEW,EAAYL,S,sCAiCQ,IAAD,OACrBb,KAAKoB,UAAUnB,SAAQ,SAACR,GACtB,IAAM4B,EAAe,EAAKZ,MAAMC,IAAIjB,IAAU,EAC9C,EAAKgB,MAAMa,IAAI7B,EAAO4B,EAAe,MAEvCrB,KAAKoB,UAAY,K,8BAIjBZ,GAGC,IAFDK,EAEA,uDAFiB,EACjBU,EACA,wDACA,GAAIA,EACFvB,KAAKoB,UAAUhB,KAAKI,OACf,CACL,IAAMa,EAAerB,KAAKS,MAAMC,IAAIF,IAAc,EAClDR,KAAKS,MAAMa,IAAId,EAAWa,EAAeR,M,iCAKlCL,GAAkE,IAA5CK,EAA2C,uDAA1B,EAAGU,EAAuB,wDAC1E,GAAIA,EAAM,CACR,IAAMC,EAAQxB,KAAKoB,UAAUK,QAAQjB,GACrCR,KAAKoB,UAAUM,OAAOF,EAAO,GAG/B,IAAMH,EAAerB,KAAKS,MAAMC,IAAIF,GAC/Ba,IAGLM,QAAQC,IAAI,gBAAiBpB,EAAWa,EAAcR,GAClDQ,GAAgBR,EAClBb,KAAKS,MAAMa,IAAId,EAAWa,EAAeR,GAEzCb,KAAKS,MAAMa,IAAId,EAAW,M,qCAIuB,IAAhCe,EAA+B,wDAClD,GAAIA,EACF,OAAOvB,KAAKoB,UAAUb,OAExB,IAAMsB,EAASC,MAAMC,KAAK/B,KAAKS,MAAMoB,UACrC,OAAKA,EAAOtB,OAGLsB,EAAOG,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KAF1B,I,qCAzET,OAAOlC,KAAKD,aAAaQ,OAAS,I,kCAKlC,IAAI4B,EAAa,EACjBnC,KAAKG,QAAQF,SAAQ,SAACC,GAAD,OAAWiC,GAAcjC,EAAKV,cACnD,IAAI4C,EAAe,EAEnB,OADApC,KAAKqC,OAAOpC,SAAQ,SAACe,GAAD,OAAYoB,GAAgBpB,EAAMxB,cAC/C2C,EAAaC,I,gCAKpB,OAAOpC,KAAKsC,iB,oCAKZ,OAAOtC,KAAKsC,cAAa,K,mCAKzB,OAAOtC,KAAKuC,cAAgB,M,uCAhF7BC,c,iGACAA,c,yEAAmB,IAAIC,O,uCACvBD,c,wEAAoC,M,oCACpCA,c,wEAA6B,M,qCAE7BA,c,wEAA6B,M,0CAiD7BE,Y,kHAKAA,Y,6GASAA,Y,+GAKAA,Y,kHAKAA,Y,+GA0BAC,U,0ECzHUC,EAA6B,CACxC,QACA,OACA,QACA,MACA,SCAK,SAASC,EAAY7B,GAC1B,OAAO8B,KAAKC,UAAU/B,EAAMC,kBAQvB,IAAM+B,EAAqB,CAChC,CACExD,WAAY,EACZyB,iBAAkB,CAChB,CAAExB,MAAO,OAAQoB,OAAQ,GACzB,CAAEpB,MAAO,QAASoB,OAAQ,KAG9B,CACErB,WAAY,EACZyB,iBAAkB,CAChB,CAAExB,MAAO,OAAQoB,OAAQ,GACzB,CAAEpB,MAAO,QAASoB,OAAQ,KAG9B,CACErB,WAAY,EACZyB,iBAAkB,CAChB,CAAExB,MAAO,QAASoB,OAAQ,GAC1B,CAAEpB,MAAO,MAAOoB,OAAQ,KAG5B,CACErB,WAAY,EACZyB,iBAAkB,CAChB,CAAExB,MAAO,MAAOoB,OAAQ,GACxB,CAAEpB,MAAO,QAASoB,OAAQ,KAG9B,CACErB,WAAY,EACZyB,iBAAkB,CAChB,CAAExB,MAAO,QAASoB,OAAQ,GAC1B,CAAEpB,MAAO,QAASoB,OAAQ,KAG9B,CACErB,WAAY,EACZyB,iBAAkB,CAChB,CAAExB,MAAO,QAASoB,OAAQ,GAC1B,CAAEpB,MAAO,OAAQoB,OAAQ,GACzB,CAAEpB,MAAO,QAASoB,OAAQ,KAG9B,CACErB,WAAY,EACZyB,iBAAkB,CAChB,CAAExB,MAAO,QAASoB,OAAQ,GAC1B,CAAEpB,MAAO,MAAOoB,OAAQ,GACxB,CAAEpB,MAAO,QAASoB,OAAQ,KAG9B,CACErB,WAAY,EACZyB,iBAAkB,CAChB,CAAExB,MAAO,QAASoB,OAAQ,GAC1B,CAAEpB,MAAO,MAAOoB,OAAQ,GACxB,CAAEpB,MAAO,QAASoB,OAAQ,KAG9B,CACErB,WAAY,EACZyB,iBAAkB,CAChB,CAAExB,MAAO,QAASoB,OAAQ,GAC1B,CAAEpB,MAAO,OAAQoB,OAAQ,GACzB,CAAEpB,MAAO,MAAOoB,OAAQ,KAG5B,CACErB,WAAY,EACZyB,iBAAkB,CAChB,CAAExB,MAAO,QAASoB,OAAQ,GAC1B,CAAEpB,MAAO,OAAQoB,OAAQ,GACzB,CAAEpB,MAAO,QAASoB,OAAQ,M,QCzFzB,SAASoC,EAAeC,GAC7B,OAAOA,EACJC,KAAI,SAACC,GAAD,MAAQ,CAAEC,KAAMC,KAAKC,SAAUC,MAAOJ,MAC1CC,MAAK,SAACD,EAAGK,GAAJ,OAAUL,EAAEC,KAAOI,EAAEJ,QAC1BF,KAAI,SAACC,GAAD,OAAOA,EAAEI,SCFX,I,oCAAME,EAAqB,CAEhC,CACEjE,MAAO,QACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CAAC,CAAEF,MAAO,QAASoB,OAAQ,KAEpC,CACEpB,MAAO,OACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CAAC,CAAEF,MAAO,MAAOoB,OAAQ,KAElC,CACEpB,MAAO,QACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CAAC,CAAEF,MAAO,QAASoB,OAAQ,KAEpC,CACEpB,MAAO,MACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CAAC,CAAEF,MAAO,QAASoB,OAAQ,KAEpC,CACEpB,MAAO,QACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CAAC,CAAEF,MAAO,OAAQoB,OAAQ,KAGnC,CACEpB,MAAO,QACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CACL,CAAEF,MAAO,MAAOoB,OAAQ,GACxB,CAAEpB,MAAO,QAASoB,OAAQ,KAG9B,CACEpB,MAAO,OACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CACL,CAAEF,MAAO,QAASoB,OAAQ,GAC1B,CAAEpB,MAAO,QAASoB,OAAQ,KAG9B,CACEpB,MAAO,QACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CACL,CAAEF,MAAO,QAASoB,OAAQ,GAC1B,CAAEpB,MAAO,OAAQoB,OAAQ,KAG7B,CACEpB,MAAO,MACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CACL,CAAEF,MAAO,OAAQoB,OAAQ,GACzB,CAAEpB,MAAO,QAASoB,OAAQ,KAG9B,CACEpB,MAAO,QACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CACL,CAAEF,MAAO,QAASoB,OAAQ,GAC1B,CAAEpB,MAAO,MAAOoB,OAAQ,KAI5B,CACEpB,MAAO,QACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CAAC,CAAEF,MAAO,OAAQoB,OAAQ,KAEnC,CACEpB,MAAO,OACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CAAC,CAAEF,MAAO,QAASoB,OAAQ,KAEpC,CACEpB,MAAO,QACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CAAC,CAAEF,MAAO,MAAOoB,OAAQ,KAElC,CACEpB,MAAO,MACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CAAC,CAAEF,MAAO,QAASoB,OAAQ,KAEpC,CACEpB,MAAO,QACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CAAC,CAAEF,MAAO,QAASoB,OAAQ,KAGpC,CACEpB,MAAO,QACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CACL,CAAEF,MAAO,OAAQoB,OAAQ,GACzB,CAAEpB,MAAO,QAASoB,OAAQ,GAC1B,CAAEpB,MAAO,MAAOoB,OAAQ,GACxB,CAAEpB,MAAO,QAASoB,OAAQ,KAG9B,CACEpB,MAAO,OACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CACL,CAAEF,MAAO,QAASoB,OAAQ,GAC1B,CAAEpB,MAAO,QAASoB,OAAQ,GAC1B,CAAEpB,MAAO,MAAOoB,OAAQ,GACxB,CAAEpB,MAAO,QAASoB,OAAQ,KAG9B,CACEpB,MAAO,QACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CACL,CAAEF,MAAO,QAASoB,OAAQ,GAC1B,CAAEpB,MAAO,OAAQoB,OAAQ,GACzB,CAAEpB,MAAO,MAAOoB,OAAQ,GACxB,CAAEpB,MAAO,QAASoB,OAAQ,KAG9B,CACEpB,MAAO,MACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CACL,CAAEF,MAAO,QAASoB,OAAQ,GAC1B,CAAEpB,MAAO,OAAQoB,OAAQ,GACzB,CAAEpB,MAAO,QAASoB,OAAQ,GAC1B,CAAEpB,MAAO,QAASoB,OAAQ,KAG9B,CACEpB,MAAO,QACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CACL,CAAEF,MAAO,QAASoB,OAAQ,GAC1B,CAAEpB,MAAO,OAAQoB,OAAQ,GACzB,CAAEpB,MAAO,QAASoB,OAAQ,GAC1B,CAAEpB,MAAO,MAAOoB,OAAQ,KAI5B,CACEpB,MAAO,QACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CACL,CAAEF,MAAO,OAAQoB,OAAQ,GACzB,CAAEpB,MAAO,QAASoB,OAAQ,KAG9B,CACEpB,MAAO,OACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CACL,CAAEF,MAAO,QAASoB,OAAQ,GAC1B,CAAEpB,MAAO,QAASoB,OAAQ,KAG9B,CACEpB,MAAO,QACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CACL,CAAEF,MAAO,OAAQoB,OAAQ,GACzB,CAAEpB,MAAO,MAAOoB,OAAQ,KAG5B,CACEpB,MAAO,MACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CACL,CAAEF,MAAO,QAASoB,OAAQ,GAC1B,CAAEpB,MAAO,MAAOoB,OAAQ,KAG5B,CACEpB,MAAO,QACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CACL,CAAEF,MAAO,QAASoB,OAAQ,GAC1B,CAAEpB,MAAO,QAASoB,OAAQ,KAG9B,CACEpB,MAAO,QACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CACL,CAAEF,MAAO,QAASoB,OAAQ,GAC1B,CAAEpB,MAAO,OAAQoB,OAAQ,GACzB,CAAEpB,MAAO,QAASoB,OAAQ,KAG9B,CACEpB,MAAO,OACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CACL,CAAEF,MAAO,QAASoB,OAAQ,GAC1B,CAAEpB,MAAO,OAAQoB,OAAQ,GACzB,CAAEpB,MAAO,MAAOoB,OAAQ,KAG5B,CACEpB,MAAO,QACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CACL,CAAEF,MAAO,QAASoB,OAAQ,GAC1B,CAAEpB,MAAO,OAAQoB,OAAQ,GACzB,CAAEpB,MAAO,QAASoB,OAAQ,KAG9B,CACEpB,MAAO,MACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CACL,CAAEF,MAAO,MAAOoB,OAAQ,GACxB,CAAEpB,MAAO,QAASoB,OAAQ,GAC1B,CAAEpB,MAAO,QAASoB,OAAQ,KAG9B,CACEpB,MAAO,QACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CACL,CAAEF,MAAO,MAAOoB,OAAQ,GACxB,CAAEpB,MAAO,QAASoB,OAAQ,GAC1B,CAAEpB,MAAO,QAASoB,OAAQ,KAG9B,CACEpB,MAAO,QACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CACL,CAAEF,MAAO,OAAQoB,OAAQ,GACzB,CAAEpB,MAAO,QAASoB,OAAQ,GAC1B,CAAEpB,MAAO,QAASoB,OAAQ,KAG9B,CACEpB,MAAO,OACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CACL,CAAEF,MAAO,MAAOoB,OAAQ,GACxB,CAAEpB,MAAO,QAASoB,OAAQ,GAC1B,CAAEpB,MAAO,QAASoB,OAAQ,KAG9B,CACEpB,MAAO,QACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CACL,CAAEF,MAAO,MAAOoB,OAAQ,GACxB,CAAEpB,MAAO,OAAQoB,OAAQ,GACzB,CAAEpB,MAAO,QAASoB,OAAQ,KAG9B,CACEpB,MAAO,MACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CACL,CAAEF,MAAO,QAASoB,OAAQ,GAC1B,CAAEpB,MAAO,QAASoB,OAAQ,GAC1B,CAAEpB,MAAO,QAASoB,OAAQ,KAG9B,CACEpB,MAAO,QACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CACL,CAAEF,MAAO,QAASoB,OAAQ,GAC1B,CAAEpB,MAAO,MAAOoB,OAAQ,GACxB,CAAEpB,MAAO,OAAQoB,OAAQ,KAG7B,CACEpB,MAAO,QACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CACL,CAAEF,MAAO,QAASoB,OAAQ,GAC1B,CAAEpB,MAAO,MAAOoB,OAAQ,GACxB,CAAEpB,MAAO,OAAQoB,OAAQ,GACzB,CAAEpB,MAAO,QAASoB,OAAQ,KAG9B,CACEpB,MAAO,OACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CACL,CAAEF,MAAO,QAASoB,OAAQ,GAC1B,CAAEpB,MAAO,MAAOoB,OAAQ,GACxB,CAAEpB,MAAO,QAASoB,OAAQ,GAC1B,CAAEpB,MAAO,QAASoB,OAAQ,KAG9B,CACEpB,MAAO,QACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CACL,CAAEF,MAAO,OAAQoB,OAAQ,GACzB,CAAEpB,MAAO,MAAOoB,OAAQ,GACxB,CAAEpB,MAAO,QAASoB,OAAQ,GAC1B,CAAEpB,MAAO,QAASoB,OAAQ,KAG9B,CACEpB,MAAO,MACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CACL,CAAEF,MAAO,OAAQoB,OAAQ,GACzB,CAAEpB,MAAO,QAASoB,OAAQ,GAC1B,CAAEpB,MAAO,QAASoB,OAAQ,GAC1B,CAAEpB,MAAO,QAASoB,OAAQ,KAG9B,CACEpB,MAAO,QACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CACL,CAAEF,MAAO,OAAQoB,OAAQ,GACzB,CAAEpB,MAAO,QAASoB,OAAQ,GAC1B,CAAEpB,MAAO,QAASoB,OAAQ,GAC1B,CAAEpB,MAAO,MAAOoB,OAAQ,MC3WjB8C,EAAqB,CAChC,CACElE,MAAO,QACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CAAC,CAAEF,MAAO,QAASoB,OAAQ,KAEpC,CACEpB,MAAO,OACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CAAC,CAAEF,MAAO,OAAQoB,OAAQ,KAEnC,CACEpB,MAAO,QACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CAAC,CAAEF,MAAO,QAASoB,OAAQ,KAEpC,CACEpB,MAAO,MACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CAAC,CAAEF,MAAO,MAAOoB,OAAQ,KAElC,CACEpB,MAAO,QACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CAAC,CAAEF,MAAO,QAASoB,OAAQ,KAEpC,CACEpB,MAAO,QACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CACL,CAAEF,MAAO,QAASoB,OAAQ,GAC1B,CAAEpB,MAAO,OAAQoB,OAAQ,GACzB,CAAEpB,MAAO,MAAOoB,OAAQ,KAG5B,CACEpB,MAAO,QACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CACL,CAAEF,MAAO,MAAOoB,OAAQ,GACxB,CAAEpB,MAAO,QAASoB,OAAQ,GAC1B,CAAEpB,MAAO,QAASoB,OAAQ,KAG9B,CACEpB,MAAO,OACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CACL,CAAEF,MAAO,QAASoB,OAAQ,GAC1B,CAAEpB,MAAO,QAASoB,OAAQ,GAC1B,CAAEpB,MAAO,MAAOoB,OAAQ,KAG5B,CACEpB,MAAO,QACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CACL,CAAEF,MAAO,QAASoB,OAAQ,GAC1B,CAAEpB,MAAO,OAAQoB,OAAQ,GACzB,CAAEpB,MAAO,QAASoB,OAAQ,KAG9B,CACEpB,MAAO,MACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CACL,CAAEF,MAAO,OAAQoB,OAAQ,GACzB,CAAEpB,MAAO,QAASoB,OAAQ,GAC1B,CAAEpB,MAAO,QAASoB,OAAQ,KAG9B,CACEpB,MAAO,QACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CAAC,CAAEF,MAAO,QAASoB,OAAQ,KAEpC,CACEpB,MAAO,QACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CAAC,CAAEF,MAAO,MAAOoB,OAAQ,KAElC,CACEpB,MAAO,OACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CAAC,CAAEF,MAAO,OAAQoB,OAAQ,KAEnC,CACEpB,MAAO,QACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CAAC,CAAEF,MAAO,QAASoB,OAAQ,KAEpC,CACEpB,MAAO,MACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CAAC,CAAEF,MAAO,QAASoB,OAAQ,KAEpC,CACEpB,MAAO,MACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CACL,CAAEF,MAAO,QAASoB,OAAQ,GAC1B,CAAEpB,MAAO,QAASoB,OAAQ,KAG9B,CACEpB,MAAO,QACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CACL,CAAEF,MAAO,QAASoB,OAAQ,GAC1B,CAAEpB,MAAO,MAAOoB,OAAQ,KAG5B,CACEpB,MAAO,QACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CACL,CAAEF,MAAO,QAASoB,OAAQ,GAC1B,CAAEpB,MAAO,MAAOoB,OAAQ,KAG5B,CACEpB,MAAO,QACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CACL,CAAEF,MAAO,OAAQoB,OAAQ,GACzB,CAAEpB,MAAO,QAASoB,OAAQ,KAG9B,CACEpB,MAAO,OACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CACL,CAAEF,MAAO,QAASoB,OAAQ,GAC1B,CAAEpB,MAAO,OAAQoB,OAAQ,KAG7B,CACEpB,MAAO,QACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CACL,CAAEF,MAAO,MAAOoB,OAAQ,GACxB,CAAEpB,MAAO,QAASoB,OAAQ,GAC1B,CAAEpB,MAAO,QAASoB,OAAQ,KAG9B,CACEpB,MAAO,OACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CACL,CAAEF,MAAO,MAAOoB,OAAQ,GACxB,CAAEpB,MAAO,OAAQoB,OAAQ,GACzB,CAAEpB,MAAO,QAASoB,OAAQ,KAG9B,CACEpB,MAAO,QACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CACL,CAAEF,MAAO,QAASoB,OAAQ,GAC1B,CAAEpB,MAAO,OAAQoB,OAAQ,GACzB,CAAEpB,MAAO,QAASoB,OAAQ,KAG9B,CACEpB,MAAO,MACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CACL,CAAEF,MAAO,QAASoB,OAAQ,GAC1B,CAAEpB,MAAO,MAAOoB,OAAQ,GACxB,CAAEpB,MAAO,QAASoB,OAAQ,KAG9B,CACEpB,MAAO,QACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CACL,CAAEF,MAAO,QAASoB,OAAQ,GAC1B,CAAEpB,MAAO,OAAQoB,OAAQ,GACzB,CAAEpB,MAAO,QAASoB,OAAQ,KAG9B,CACEpB,MAAO,QACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CACL,CAAEF,MAAO,QAASoB,OAAQ,GAC1B,CAAEpB,MAAO,MAAOoB,OAAQ,GACxB,CAAEpB,MAAO,QAASoB,OAAQ,KAG9B,CACEpB,MAAO,QACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CACL,CAAEF,MAAO,QAASoB,OAAQ,GAC1B,CAAEpB,MAAO,MAAOoB,OAAQ,GACxB,CAAEpB,MAAO,OAAQoB,OAAQ,KAG7B,CACEpB,MAAO,MACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CACL,CAAEF,MAAO,QAASoB,OAAQ,GAC1B,CAAEpB,MAAO,MAAOoB,OAAQ,GACxB,CAAEpB,MAAO,OAAQoB,OAAQ,KAG7B,CACEpB,MAAO,OACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CACL,CAAEF,MAAO,QAASoB,OAAQ,GAC1B,CAAEpB,MAAO,QAASoB,OAAQ,GAC1B,CAAEpB,MAAO,OAAQoB,OAAQ,KAG7B,CACEpB,MAAO,QACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CACL,CAAEF,MAAO,QAASoB,OAAQ,GAC1B,CAAEpB,MAAO,QAASoB,OAAQ,GAC1B,CAAEpB,MAAO,QAASoB,OAAQ,MC7PnB+C,EAAqB,CAChC,CACEnE,MAAO,QACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CACL,CAAEF,MAAO,OAAQoB,OAAQ,GACzB,CAAEpB,MAAO,QAASoB,OAAQ,GAC1B,CAAEpB,MAAO,MAAOoB,OAAQ,GACxB,CAAEpB,MAAO,QAASoB,OAAQ,KAG9B,CACEpB,MAAO,OACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CACL,CAAEF,MAAO,QAASoB,OAAQ,GAC1B,CAAEpB,MAAO,QAASoB,OAAQ,GAC1B,CAAEpB,MAAO,MAAOoB,OAAQ,GACxB,CAAEpB,MAAO,QAASoB,OAAQ,KAG9B,CACEpB,MAAO,QACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CACL,CAAEF,MAAO,QAASoB,OAAQ,GAC1B,CAAEpB,MAAO,OAAQoB,OAAQ,GACzB,CAAEpB,MAAO,MAAOoB,OAAQ,GACxB,CAAEpB,MAAO,QAASoB,OAAQ,KAG9B,CACEpB,MAAO,MACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CACL,CAAEF,MAAO,QAASoB,OAAQ,GAC1B,CAAEpB,MAAO,OAAQoB,OAAQ,GACzB,CAAEpB,MAAO,QAASoB,OAAQ,GAC1B,CAAEpB,MAAO,QAASoB,OAAQ,KAG9B,CACEpB,MAAO,QACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CACL,CAAEF,MAAO,QAASoB,OAAQ,GAC1B,CAAEpB,MAAO,OAAQoB,OAAQ,GACzB,CAAEpB,MAAO,QAASoB,OAAQ,GAC1B,CAAEpB,MAAO,MAAOoB,OAAQ,KAG5B,CACEpB,MAAO,QACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CAAC,CAAEF,MAAO,QAASoB,OAAQ,KAEpC,CACEpB,MAAO,QACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CAAC,CAAEF,MAAO,MAAOoB,OAAQ,KAElC,CACEpB,MAAO,OACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CAAC,CAAEF,MAAO,QAASoB,OAAQ,KAEpC,CACEpB,MAAO,MACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CAAC,CAAEF,MAAO,QAASoB,OAAQ,KAEpC,CACEpB,MAAO,QACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CAAC,CAAEF,MAAO,OAAQoB,OAAQ,KAEnC,CACEpB,MAAO,MACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CACL,CAAEF,MAAO,OAAQoB,OAAQ,GACzB,CAAEpB,MAAO,QAASoB,OAAQ,GAC1B,CAAEpB,MAAO,MAAOoB,OAAQ,KAG5B,CACEpB,MAAO,QACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CACL,CAAEF,MAAO,QAASoB,OAAQ,GAC1B,CAAEpB,MAAO,MAAOoB,OAAQ,GACxB,CAAEpB,MAAO,QAASoB,OAAQ,KAG9B,CACEpB,MAAO,QACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CACL,CAAEF,MAAO,QAASoB,OAAQ,GAC1B,CAAEpB,MAAO,MAAOoB,OAAQ,GACxB,CAAEpB,MAAO,QAASoB,OAAQ,KAG9B,CACEpB,MAAO,OACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CACL,CAAEF,MAAO,QAASoB,OAAQ,GAC1B,CAAEpB,MAAO,OAAQoB,OAAQ,GACzB,CAAEpB,MAAO,QAASoB,OAAQ,KAG9B,CACEpB,MAAO,QACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CACL,CAAEF,MAAO,QAASoB,OAAQ,GAC1B,CAAEpB,MAAO,OAAQoB,OAAQ,GACzB,CAAEpB,MAAO,QAASoB,OAAQ,KAG9B,CACEpB,MAAO,QACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CACL,CAAEF,MAAO,QAASoB,OAAQ,GAC1B,CAAEpB,MAAO,QAASoB,OAAQ,KAG9B,CACEpB,MAAO,OACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CACL,CAAEF,MAAO,QAASoB,OAAQ,GAC1B,CAAEpB,MAAO,OAAQoB,OAAQ,KAG7B,CACEpB,MAAO,QACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CACL,CAAEF,MAAO,QAASoB,OAAQ,GAC1B,CAAEpB,MAAO,OAAQoB,OAAQ,KAG7B,CACEpB,MAAO,MACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CACL,CAAEF,MAAO,QAASoB,OAAQ,GAC1B,CAAEpB,MAAO,MAAOoB,OAAQ,KAG5B,CACEpB,MAAO,QACPD,WAAY,EACZE,KAAM,EACNC,MAAO,CACL,CAAEF,MAAO,QAASoB,OAAQ,GAC1B,CAAEpB,MAAO,MAAOoB,OAAQ,MCxKTgD,G,aAWnB,WAAYC,GAA+B,+GAP3CC,QAAoB,GAOsB,oXACxC/D,KAAKgE,kBAAkBF,GACvB9D,KAAKiE,gBAAoC,IAApBH,EAAwB,EAAIA,EAAkB,GACnE9D,KAAKkE,kBACLlE,KAAKmE,iBAAiBL,EAAkB,G,8DAKhBjD,GAAiB,IJzBtBuD,EAAeC,EIyBM,OJzBrBD,EI0BZvD,EJ1B2BwD,EI0BnB,SAAC7C,GACd,EAAKuC,QAAQ3D,KAAK,IAAIR,EAAO4B,EAAQ,EAAG,YJ1B5C,YAAIM,MAAMsC,IAAQnE,SAAQ,SAACqE,EAAG9C,GAC5B6C,EAAS7C,Q,sCI6BaX,GAAiB,IAAD,OACtC+B,EAAc3C,SAAQ,SAACR,GACrB,EAAK8E,WAAWjD,IAAI7B,EAAOoB,MAE7Bb,KAAKuE,WAAWjD,IAAI,OAAQ,K,wCAI5BtB,KAAKwE,WAAWlD,IAAI,EAAG2B,EAAeS,IACtC1D,KAAKwE,WAAWlD,IAAI,EAAG2B,EAAeU,IACtC3D,KAAKwE,WAAWlD,IAAI,EAAG2B,EAAeW,M,uCAGf/C,GACvBb,KAAKqC,OAASY,EAAeD,GAAWtB,OAAO,EAAGb,K,wCAoB3BX,GACvB,OACGF,KAAKyE,cAAcC,cAAgB1E,KAAKyE,cAAcE,WAAWzE,K,mCAiFhD,IAAD,OAInB,GAHwBF,KAAKqC,OAAO/B,QAAO,SAACU,GAC1C,OAAO,EAAKyD,cAAcG,6BAA6B5D,MAErCT,OAAS,EAAG,CAC9B,IAAMsE,EAAe7E,KAAKqC,OAAOX,OAAO,EAAG,GAAG,GAC9C1B,KAAKyE,cAAcpC,OAAOjC,KAAKyE,M,kCAIfrE,EAAsBK,GACxC,IACMiE,GADe9E,KAAKuE,WAAW7D,IAAIF,IAAc,GACvBK,EAChCb,KAAKuE,WAAWjD,IAAId,EAAWsE,EAAW,EAAI,EAAIA,K,+BAGnCtE,GAA2C,IAArBK,EAAoB,uDAAH,EAChDQ,EAAerB,KAAKuE,WAAW7D,IAAIF,IAAc,EACvDR,KAAKuE,WAAWjD,IAAId,EAAWa,EAAeR,K,qCAGzBhB,GACrB,OAAOA,EAAGkF,MAAM,KAAK,K,sCAIrB/E,KAAKgF,aACLhF,KAAKiF,qBACDjF,KAAKiF,oBAAsBjF,KAAK+D,QAAQxD,QAC1CP,KAAKkF,0B,8CAKP,IAAMC,EAA8BnF,KAAK+D,QAAQzD,QAC/C,SAAC8E,GAAD,OAAYA,EAAOC,aAAe,MAEpC,GAA2C,IAAvCF,EAA4B5E,OAC9BP,KAAKsF,mBACA,GAA2C,IAAvCH,EAA4B5E,OACrCoB,QAAQC,IAAI,kBACZ5B,KAAKuF,QAAQJ,OACR,CACLxD,QAAQC,IAAI,6BAA8BuD,GAC1C,IAGMK,EAHgBL,EAA4B9B,MAChD,SAACD,EAAWK,GAAZ,OAA0BA,EAAE4B,YAAcjC,EAAEiC,eAEX,GAAGA,YACtC1D,QAAQC,IAAI,kBAAmB4D,GAC/B,IAAMC,EAAiBN,EAA4B7E,QACjD,SAAC8E,GAAD,OAAYA,EAAOC,cAAgBG,KAGrC,GADA7D,QAAQC,IAAI,2BAA4B6D,GACV,IAA1BA,EAAelF,OACjBoB,QAAQC,IAAI,uBACZ5B,KAAKuF,QAAQE,OACR,CACL,IAGMC,EAHoBD,EAAepC,MACvC,SAACD,EAAGK,GAAJ,OAAUL,EAAEjD,QAAQI,OAASkD,EAAEtD,QAAQI,UAEC,GAAGJ,QAAQI,OACrDoB,QAAQC,IAAI,sBAAuB8D,GACnC,IAAMC,EAA6BF,EAAenF,QAChD,SAAC8E,GAAD,OAAYA,EAAOjF,QAAQI,SAAWmF,KAExC/D,QAAQC,IACN,mCACA+D,GAEF3F,KAAKuF,QAAQI,O,oCAMjBhE,QAAQC,IAAI,mBAEZ5B,KAAK4F,eACL5F,KAAKiF,mBAAqB,I,8BAGZY,GACdlE,QAAQC,IAAI,4BAA6BiE,GACzC7F,KAAK8F,eAAiBD,I,qCAMtB7F,KAAK+F,iBAAiBnC,EAAY,O,uCAGXoC,EAAeC,GACtCtE,QAAQC,IAAI,iCAAkCqE,GAC9CtE,QAAQC,IAAI,sBAAuBoE,GAEnC,IAAME,EAAoBF,EAAM7C,KAAI,SAACjD,GAAD,OAAUA,EAAKV,cACnDmC,QAAQC,IAAI,oCAAqCsE,GAEjD,IAAMC,EAA2BD,EAAkBlE,QAAO,SAACoE,EAAGlE,GAAJ,OAAUkE,EAAIlE,KACxEP,QAAQC,IACN,yCACAuE,GAQFxE,QAAQC,IAAI,mBACZgB,EAAc3C,SAAQ,SAACI,GACrBsB,QAAQC,IAAI,qBAAsBvB,GAClC,IAAMgG,EAAeL,EAAM1F,QAAO,SAACJ,GAAD,OAAUA,EAAKT,QAAUY,KAErDiG,EAAqBN,EAAM7C,KAAI,SAACjD,GAAD,OAAUA,EAAKP,SACpDgC,QAAQC,IAAI,QAAS0E,GAErB,IAAMC,EAAyBD,EAAmBE,OAClD7E,QAAQC,IAAI,OAAQ2E,GACpB,IAAME,EAA+BF,EAAuBjG,QAC1D,SAACoG,GAAD,OAAcA,EAASjH,QAAUY,KAEnCsB,QAAQC,IAAI,SAAU6E,GACtB,IAAME,EAAuCF,EAA6BtD,KACxE,SAACuD,GAAD,OAAcA,EAAS7F,UAEzBc,QAAQC,IAAI,MAAO+E,GACnB,IAAMC,EAA8CD,EAAqC3E,QACvF,SAACoE,EAAGlE,GAAJ,OAAUkE,EAAIlE,KAEhBP,QAAQC,IAAI,UAAWgF,GAMvBjF,QAAQC,IAAR,UAAeyE,EAAa9F,OAA5B,sBAAgDF,IAChDsB,QAAQC,IAAR,eACUqE,EADV,sBACiC5F,EADjC,aAC+CuG,S,oCA7OjD,OAAO5G,KAAK+D,QAAQ/D,KAAKiF,sB,oCAKzB,OAAOjF,KAAK+D,QAAQV,MAAK,SAACD,EAAGK,GAAJ,OAAUA,EAAE4B,YAAcjC,EAAEiC,iB,uCAKrD,OACGrF,KAAKyE,cAAcC,cAAgB1E,KAAKyE,cAAcoC,mB,+CAvD1DrE,c,yEAAkC,K,gDAClCA,c,yEAAwC,K,4CAGxCA,c,sGAEAA,c,yEAAwB,IAAIC,O,wCAC5BD,c,yEAAwB,IAAIC,O,oCAC5BD,c,wEAA6B,M,yCAkC7BE,Y,mHAKAA,Y,sHAKAA,Y,4HAaAC,U,oFACmB,SAACmE,GACnB,IAAMtG,EAAY,EAAKuG,eAAeD,GACtC,EAAKE,YAAYxG,EAAW,GAC5B,EAAKiE,cAAcwC,QAAQzG,EAAW,GAAG,GACrC,EAAKiE,cAAclC,eAAiB,IACtC,EAAKkC,cAAcyC,gBACnB,EAAKC,qB,+CAIRxE,U,oFACmB,SAACmE,GACnB,IAAMtG,EAAY,EAAKuG,eAAeD,GACtC,EAAKE,YAAYxG,EAAW,GAC5B,EAAKiE,cAAcwC,QAAQzG,EAAW,GACtC,EAAK2G,oB,6CAGNxE,U,oFAAyB,SAACmE,GACzB,IAAMM,EAAMN,EAAS/B,MAAM,KACrBsC,EAAWC,OAAOF,EAAI,IACtBG,EAAYD,OAAOF,EAAI,IACvBI,EAAY,EAAKhD,WAAW9D,IAAI2G,GACtC,GAAKG,EAAL,CAIA,IAAMC,EAAYD,EAAU9F,OAAO6F,EAAW,GAAG,GAE7C5G,EAAU,EACd8G,EAAU9H,MAAMM,SAAQ,SAACW,GACvB,IAAM8G,EAAgB,EAAKjD,cAAckD,iBAAiB/G,EAAKnB,OACzDmI,EAAkBhH,EAAKC,OAAS6G,EAChCG,EAAa,EAAKpD,cAAchE,MAAMC,IAAIE,EAAKnB,QAAU,EAC3DmI,EAAkBC,IACpBlH,GAAWiH,EAAkBC,GAE/B,IAAMC,EAAYF,GAAmB,EAAIA,EAAkB,EAC3D,EAAKnD,cAAcsD,WAAWnH,EAAKnB,MAAOqI,GAC1C,EAAKE,SAASpH,EAAKnB,MAAOqI,MAGxBnH,IACF,EAAK8D,cAAcsD,WAAW,OAAQpH,GACtC,EAAKqH,SAAS,OAAQrH,IAExB,EAAK8D,cAActE,QAAQC,KAAKqH,GAChC,EAAKN,qBAvBH,EAAKA,oB,+CA0BRxE,U,oFACmB,SAACmE,GACnB,IAAMrH,EAAQ,EAAKsH,eAAeD,GAClC,EAAKrC,cAAcsD,WAAWtI,EAAO,GAAG,GACxC,EAAKuI,SAASvI,EAAO,O,4CAGtBkD,U,oFACgB,SAACmE,GAChB,IAAMM,EAAMN,EAAS/B,MAAM,KACrBrF,EAAO4H,OAAOF,EAAI,IAClB5F,EAAQ8F,OAAOF,EAAI,IACnBI,EAAY,EAAKhD,WAAW9D,IAAIhB,GAEtC,GAAI8H,EAAW,CACb,IAAMtH,EAAOsH,EAAU9F,OAAOF,EAAO,GAAG,GACxC,EAAKiD,cAAc1E,aAAaK,KAAKF,GACrC,IAAMmB,EAAe,EAAKkD,WAAW7D,IAAI,QACrCW,GAAgBA,EAAe,IACjC,EAAKkD,WAAWjD,IAAI,OAAQD,EAAe,GAC3C,EAAKoD,cAAcwC,QAAQ,SAE7B,EAAKE,qB,GChJIc,EALA,CACbC,UAAW,I,kICMTlI,KAAKmI,KAAO,IAAItE,EANM,O,uCAGvBrB,c,yEAAgC,IAAIqB,EAHb,M,mBCULuE,G,MADpBC,a,0PAICC,aAAe,SAACC,GACd,EAAKC,SAAWD,EAAME,OAAOjF,O,EAG/BkF,aAAe,SAACH,GACd,EAAKI,MAAMvD,OAAOtF,KAAO,EAAK0I,SAC9BD,EAAMK,kB,EAGRC,WAAa,SAACN,GACZ,EAAKI,MAAMvD,OAAOtF,KAAO,EAAK0I,U,uDAGtB,IACApD,EAAWpF,KAAK2I,MAAhBvD,OAEF0D,EADWb,EAAOC,UAAUC,KAAK1D,gBAAkBzE,KAAK2I,MAAMvD,OACrC,SAAW,WAC1C,OACE,yBAAK2D,UAAU,mBACb,yBAAKA,UAAWD,GACd,uCAAa1D,EAAOtF,MACpB,mCAASsF,EAAOvF,IAChB,uCAAauF,EAAOC,aACpB,yBAAK0D,UAAU,mBACb,yBAAKA,UAAU,cAAf,gBACA,yBAAKA,UAAU,gBACZjH,MAAMC,KAAKqD,EAAO3E,OAChBH,QAAO,SAACkD,GAAD,OAAWA,EAAM,GAAK,KAC7BL,KAAI,SAACK,GACJ,IAAM/D,EAAQ+D,EAAM,GACdwF,EAAWxF,EAAM,GACvB,OACE,yBAAKuF,UAAS,eAAUtJ,GAASwJ,IAAK3F,KAAKC,UACxCyF,QAOb,yBAAKD,UAAU,mBACb,yBAAKA,UAAU,cAAf,kBACA,yBAAKA,UAAU,gBACZ3D,EAAOjF,QAAQgD,KAAI,SAACjD,GACnB,OACE,yBAAK6I,UAAS,eAAU7I,EAAKT,OAASwJ,IAAK3F,KAAKC,UAC7CrD,EAAKV,iBAOhB,yBAAKuJ,UAAU,oBACb,yBAAKA,UAAU,iBACZ3D,EAAO/C,OAAOc,KAAI,SAACnC,GAClB,OACE,yBAAK+H,UAAS,QAAWE,IAAK3F,KAAKC,UAChCvC,EAAMxB,gBAKf,0BAAM0J,SAAUlJ,KAAK0I,cACnB,8CAEE,2BACES,KAAK,OACL3F,MAAOxD,KAAKwI,SACZY,SAAUpJ,KAAKsI,aACfe,OAAQrJ,KAAK6I,sB,GAzEcS,IAAMC,W,sCAChD/G,c,wEAA8B,M,UCLpBgH,G,MAA+D,SAC1Eb,GAEA,OACE,yBAAKI,UAAU,kBACb,yBAAKA,UAAU,eAAeJ,EAAM3H,MAAMxB,YACzCmJ,EAAM3H,MAAMC,iBAAiBkC,KAAI,SAACjC,GACjC,OACE,yBACE6H,UAAW,eAAiB7H,EAAYzB,MACxCwJ,IAAG,UAAK/H,EAAYzB,OAAjB,OAAyByB,EAAYL,SAEvCK,EAAYL,cCRVwH,I,MAAAA,aAAS,SAACM,GAAoC,IACnDR,EAASF,EAAOC,UAAhBC,KACFnC,EAAQmC,EAAK3D,WAAW9D,IAAIiI,EAAMc,cACxC,IAAKzD,EACH,OAAO,8BAGT,IAAM0D,EAAY1D,EAAMzF,OATJ,EAUdoJ,EAAiBD,EAAY,EAAIA,EAAY,EAC7CE,EAAe5D,EAAM6D,MAAM,EAXb,GAYpB,OACE,yBAAKd,UAAU,sBACb,yBAAKA,UAAU,kBAAkBY,EAAjC,oBACCC,EAAazG,KAAI,SAACjD,EAAMsB,GACvB,IAAMsI,EAAc3B,EAAK4B,kBAAkB7J,GACrCL,EAAE,UAAM8I,EAAMc,aAAZ,YAA4BjI,GACpC,OACE,yBAAKuH,UAAU,OAAOE,IAAKpJ,GACzB,yBAAKkJ,UAAU,eACZ7I,EAAKV,WAAa,EAAIU,EAAKV,WAAa,QAE3C,yBAAKuJ,UAAU,aACb,yBAAKA,UAAW,mBAAqB7I,EAAKT,OAA1C,MAEF,yBAAKsJ,UAAU,SACZ7I,EAAKP,MAAMwD,KAAI,SAACvC,GACf,IAAMmI,EAAS,eAAWnI,EAAKnB,OAC/B,OACE,yBAAKsJ,UAAWA,EAAWE,IAAKF,GAC7BnI,EAAKC,YAKd,yBAAKkI,UAAU,WACb,4BACElJ,GAAIA,EACJmK,QAAS,SAACzB,GAAD,OAAWJ,EAAK8B,eAAe1B,EAAM2B,cAAcrK,KAC5DsK,UAAWhC,EAAKiC,kBAHlB,QAOA,4BACEvK,GAAIA,EACJmK,QAAS,SAACzB,GAAD,OACPJ,EAAKkC,gBAAgB9B,EAAM2B,cAAcrK,KAE3CsK,UAAWL,GALb,iBCjDCzB,I,MAAAA,aAAS,WAAO,IACrBF,EAASF,EAAOC,UAAhBC,KACF/C,EAAS+C,EAAK1D,cACd6F,EAAgBxI,MAAMC,KAAKoG,EAAK5D,WAAWgG,QACjD,OACE,yBAAKxB,UAAU,sBACb,yBAAKA,UAAU,cAAf,cAEE,6BACC3D,EAAOhE,UAAU+B,KAAI,SAAC1D,GACrB,OACE,yBAAKwJ,IAAKxJ,GACR,yBAAKsJ,UAAS,qBAAgBtJ,IAA9B,KACA,4BACEI,GAAE,UAAKJ,EAAL,cACFuK,QAAS,SAACzB,GAAD,OACPJ,EAAKqC,kBAAkBjC,EAAM2B,cAAcrK,MAH/C,eAYPyK,EAAcnH,KAAI,SAACsH,GAAgB,IAAD,EAC3BC,EAAcvC,EAAK5D,WAAW7D,IAAI+J,IAAe,EACjDE,GAAe,UAAAvF,EAAOhE,UAAUwJ,MACpC,SAACC,GAAD,OAAUA,IAASJ,YADA,eAElBlK,QACC,EACA,EACEuK,EAAiBJ,GAAgC,IAAjBC,EAChCI,EAAiBL,GAAe,IAAMtF,EAAO7C,cACnD,OACE,yBAAK0G,IAAKwB,GACR,yBAAK1B,UAAS,qBAAgB0B,IAAeC,GAC7B,SAAfD,GACC,oCACE,4BACE5K,GAAE,UAAK4K,EAAL,MACFN,UAAWW,EACXd,QAAS,SAACzB,GAAD,OACPJ,EAAK6C,kBAAkBzC,EAAM2B,cAAcrK,MAJ/C,UASA,4BACEA,GAAE,UAAK4K,EAAL,MACFN,UAAWY,EACXf,QAAS,SAACzB,GAAD,OACPJ,EAAK8C,kBAAkB1C,EAAM2B,cAAcrK,MAJ/C,oBC1CKqL,GADpB7C,Y,yKAEW,IACAF,EAASF,EAAOC,UAAhBC,KACR,OACE,yBAAKY,UAAU,iBACb,uCACUZ,EAAKvC,aADf,aAEGuC,EAAKpE,QAAQZ,KAAI,SAACiC,GACjB,OAAO,kBAAC,EAAD,CAAiBA,OAAQA,EAAQ6D,IAAK7D,EAAOvF,SAGxD,sCAEE,kBAAC,GAAD,OAEF,6BACE,sCAEE,kBAAC,GAAD,CAAoB4J,aAAc,IAClC,kBAAC,GAAD,CAAoBA,aAAc,IAClC,kBAAC,GAAD,CAAoBA,aAAc,KAEpC,yBAAKV,UAAU,oBAAf,UAEGZ,EAAK9F,OAAOc,KAAI,SAACnC,GAChB,OAAO,kBAAC,EAAD,CAAgBA,MAAOA,EAAOiI,IAAKpG,EAAY7B,e,GAzBzBsI,IAAMC,a,ECF5B4B,I,6KAIjB,IAAKnL,KAAK2I,MAAMR,KAAKrC,eACnB,OAAO,qCAET,IAAMsF,EAAepL,KAAK2I,MAAMR,KAAKrC,eAAe,GAAGT,YACjDgG,EAAW,eAAWD,EAAX,WACXE,EACsC,IAA1CtL,KAAK2I,MAAMR,KAAKrC,eAAevF,OAA/B,sBACmB8K,EADnB,gCAEoBA,EAFpB,UAGF,OACE,yBAAKtC,UAAU,oBACb,yBAAKA,UAAU,YAAYuC,GAC1BtL,KAAK2I,MAAMR,KAAKrC,eAAe3C,KAAI,SAACiC,GACnC,OACE,yBAAK2D,UAAU,SAASE,IAAK3F,KAAKC,UAC/B6B,EAAOtF,SAId,6BACA,0DAEE,+BACE,+BACGE,KAAK2I,MAAMR,KAAKoD,cAAcpI,KAAI,SAACiC,GAClC,OACE,wBAAI6D,IAAK3F,KAAKC,UACZ,4CAAkB6B,EAAOtF,MACzB,6CAAmBsF,EAAOC,aAC1B,kDAAwBD,EAAOjF,QAAQI,cAMjD,4BAAQyJ,QAAS,kBAAM/B,EAAOC,UAAUsD,UAAxC,oB,GAvCoClC,IAAMC,YCOrCkC,OATf,WACE,OACE,yBAAK1C,UAAU,OACb,gDACA,kBAAC2C,GAAD,QAOAA,GAAUrD,aAAS,WAAO,IACtBF,EAASF,EAAOC,UAAhBC,KACR,OAAOA,EAAKrC,eACV,kBAAC,GAAD,CAAkBqC,KAAMA,IAExB,kBAAC,GAAD,S,YClBJwD,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.d1985002.chunk.js","sourcesContent":["import { ChipColor } from \"./game\";\nimport { Card, CardColor } from \"./card\";\nimport { observable, computed, action } from \"mobx\";\nimport { Noble, CardRequirement } from \"./noble\";\n\nconst fakeTableau: Card[] = [\n  { pointValue: 0, color: \"red\", tier: 1, costs: [] },\n  { pointValue: 2, color: \"red\", tier: 1, costs: [] },\n  { pointValue: 1, color: \"blue\", tier: 1, costs: [] },\n  { pointValue: 0, color: \"blue\", tier: 1, costs: [] },\n  { pointValue: 0, color: \"green\", tier: 1, costs: [] },\n  { pointValue: 4, color: \"green\", tier: 1, costs: [] },\n  { pointValue: 0, color: \"white\", tier: 1, costs: [] },\n  { pointValue: 0, color: \"white\", tier: 1, costs: [] },\n  { pointValue: 4, color: \"black\", tier: 1, costs: [] },\n  { pointValue: 3, color: \"black\", tier: 1, costs: [] },\n];\nexport default class Player {\n  id: number;\n  @observable name: string;\n  @observable chips = new Map<ChipColor, number>();\n  @observable tempChips: ChipColor[] = [];\n  @observable nobles: Noble[] = [];\n\n  @observable tableau: Card[] = [];\n  reserveCards: Card[] = [];\n\n  constructor(id: number, name: string) {\n    this.id = id;\n    this.name = name;\n    fakeTableau.forEach((card) => this.tableau.push(card));\n  }\n\n  public costReductionFor(cardColor: CardColor): number {\n    return this.tableau.filter((card) => card.color === cardColor).length;\n  }\n\n  public buyingPowerForColor(chipColor: ChipColor): number {\n    const chipPower = this.chips.get(chipColor) || 0;\n    const cardPower = this.tableau.filter((card) => card.color === chipColor)\n      .length;\n    return chipPower + cardPower;\n  }\n\n  public canBuyCard(card: Card): boolean {\n    var deficit = 0;\n    card.costs.forEach((cost) => {\n      const amount = this.buyingPowerForColor(cost.color);\n      if (cost.amount > amount) {\n        deficit += cost.amount - amount;\n      }\n    });\n    const wildAmount = this.chips.get(\"wild\") || 0;\n    const deficitMinusWilds = deficit - wildAmount;\n    return deficitMinusWilds <= 0;\n  }\n\n  public fulfillsRequirementsForNoble(noble: Noble): boolean {\n    const numberOfNotMetConditions = noble.cardRequirements.filter(\n      (requirement) => {\n        return !this.meetsNobleRequirement(requirement);\n      }\n    );\n    return numberOfNotMetConditions.length === 0;\n  }\n\n  private meetsNobleRequirement(requirement: CardRequirement): boolean {\n    return (\n      this.tableau.filter((card) => card.color === requirement.color).length >=\n      requirement.amount\n    );\n  }\n\n  @computed\n  get canReserveCard(): boolean {\n    return this.reserveCards.length < 3;\n  }\n\n  @computed\n  get totalPoints(): number {\n    var cardPoints = 0;\n    this.tableau.forEach((card) => (cardPoints += card.pointValue));\n    var noblesPoints = 0;\n    this.nobles.forEach((noble) => (noblesPoints += noble.pointValue));\n    return cardPoints + noblesPoints;\n  }\n\n  @computed\n  get chipCount(): number {\n    return this.getChipCount();\n  }\n\n  @computed\n  get tempChipCount(): number {\n    return this.getChipCount(true);\n  }\n\n  @computed\n  get hasTempChips(): boolean {\n    return this.tempChipCount > 0;\n  }\n\n  public saveTempChips() {\n    this.tempChips.forEach((color: ChipColor) => {\n      const currentValue = this.chips.get(color) || 0;\n      this.chips.set(color, currentValue + 1);\n    });\n    this.tempChips = [];\n  }\n\n  public addChip(\n    chipColor: ChipColor,\n    amount: number = 1,\n    temp: boolean = false\n  ) {\n    if (temp) {\n      this.tempChips.push(chipColor);\n    } else {\n      const currentValue = this.chips.get(chipColor) || 0;\n      this.chips.set(chipColor, currentValue + amount);\n    }\n  }\n\n  @action\n  removeChip(chipColor: ChipColor, amount: number = 1, temp: boolean = false) {\n    if (temp) {\n      const index = this.tempChips.indexOf(chipColor);\n      this.tempChips.splice(index, 1);\n    } else {\n    }\n    const currentValue = this.chips.get(chipColor);\n    if (!currentValue) {\n      return;\n    }\n    console.log(\"removing chip\", chipColor, currentValue, amount);\n    if (currentValue >= amount) {\n      this.chips.set(chipColor, currentValue - amount);\n    } else {\n      this.chips.set(chipColor, 0);\n    }\n  }\n\n  private getChipCount(temp: boolean = false): number {\n    if (temp) {\n      return this.tempChips.length;\n    }\n    const values = Array.from(this.chips.values());\n    if (!values.length) {\n      return 0;\n    }\n    return values.reduce((s, c) => s + c);\n  }\n}\n","export type CardColor = \"white\" | \"blue\" | \"green\" | \"red\" | \"black\";\n\nexport const AllCardColors: CardColor[] = [\n  \"white\",\n  \"blue\",\n  \"green\",\n  \"red\",\n  \"black\",\n];\n\nexport type CardCostTier = 1 | 2 | 3;\n\nexport type CardCost = {\n  color: CardColor;\n  amount: number;\n};\n\nexport type Card = {\n  pointValue: number;\n  color: CardColor;\n  tier: CardCostTier;\n  costs: CardCost[];\n};\n","import { CardColor } from \"./card\";\n\nexport type CardRequirement = {\n  color: CardColor;\n  amount: number;\n};\n\nexport function keyForNoble(noble: Noble): string {\n  return JSON.stringify(noble.cardRequirements);\n}\n\nexport type Noble = {\n  pointValue: number;\n  cardRequirements: CardRequirement[];\n};\n\nexport const allNobles: Noble[] = [\n  {\n    pointValue: 3,\n    cardRequirements: [\n      { color: \"blue\", amount: 4 },\n      { color: \"white\", amount: 4 },\n    ],\n  },\n  {\n    pointValue: 3,\n    cardRequirements: [\n      { color: \"blue\", amount: 4 },\n      { color: \"green\", amount: 4 },\n    ],\n  },\n  {\n    pointValue: 3,\n    cardRequirements: [\n      { color: \"black\", amount: 4 },\n      { color: \"red\", amount: 4 },\n    ],\n  },\n  {\n    pointValue: 3,\n    cardRequirements: [\n      { color: \"red\", amount: 4 },\n      { color: \"green\", amount: 4 },\n    ],\n  },\n  {\n    pointValue: 3,\n    cardRequirements: [\n      { color: \"black\", amount: 4 },\n      { color: \"white\", amount: 4 },\n    ],\n  },\n  {\n    pointValue: 3,\n    cardRequirements: [\n      { color: \"black\", amount: 3 },\n      { color: \"blue\", amount: 3 },\n      { color: \"white\", amount: 3 },\n    ],\n  },\n  {\n    pointValue: 3,\n    cardRequirements: [\n      { color: \"black\", amount: 3 },\n      { color: \"red\", amount: 3 },\n      { color: \"white\", amount: 3 },\n    ],\n  },\n  {\n    pointValue: 3,\n    cardRequirements: [\n      { color: \"black\", amount: 3 },\n      { color: \"red\", amount: 3 },\n      { color: \"green\", amount: 3 },\n    ],\n  },\n  {\n    pointValue: 3,\n    cardRequirements: [\n      { color: \"green\", amount: 3 },\n      { color: \"blue\", amount: 3 },\n      { color: \"red\", amount: 3 },\n    ],\n  },\n  {\n    pointValue: 3,\n    cardRequirements: [\n      { color: \"green\", amount: 3 },\n      { color: \"blue\", amount: 3 },\n      { color: \"white\", amount: 3 },\n    ],\n  },\n];\n","export function randomizeArray(array: any[]): any[] {\n  return array\n    .map((a) => ({ sort: Math.random(), value: a }))\n    .sort((a, b) => a.sort - b.sort)\n    .map((a) => a.value);\n}\n\nexport function repeat(times: number, callback: (index: number) => void) {\n  [...Array(times)].forEach((_, index) => {\n    callback(index);\n  });\n}\n","import { Card } from \"./card\";\n\nexport const tier1Cards: Card[] = [\n  // best value\n  {\n    color: \"white\",\n    pointValue: 1,\n    tier: 1,\n    costs: [{ color: \"green\", amount: 4 }],\n  },\n  {\n    color: \"blue\",\n    pointValue: 1,\n    tier: 1,\n    costs: [{ color: \"red\", amount: 4 }],\n  },\n  {\n    color: \"green\",\n    pointValue: 1,\n    tier: 1,\n    costs: [{ color: \"black\", amount: 4 }],\n  },\n  {\n    color: \"red\",\n    pointValue: 1,\n    tier: 1,\n    costs: [{ color: \"white\", amount: 4 }],\n  },\n  {\n    color: \"black\",\n    pointValue: 1,\n    tier: 1,\n    costs: [{ color: \"blue\", amount: 4 }],\n  },\n  // great value\n  {\n    color: \"white\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"red\", amount: 2 },\n      { color: \"black\", amount: 1 },\n    ],\n  },\n  {\n    color: \"blue\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"white\", amount: 1 },\n      { color: \"black\", amount: 2 },\n    ],\n  },\n  {\n    color: \"green\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"white\", amount: 2 },\n      { color: \"blue\", amount: 1 },\n    ],\n  },\n  {\n    color: \"red\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"blue\", amount: 2 },\n      { color: \"green\", amount: 1 },\n    ],\n  },\n  {\n    color: \"black\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"green\", amount: 2 },\n      { color: \"red\", amount: 1 },\n    ],\n  },\n  // medium value\n  {\n    color: \"white\",\n    pointValue: 0,\n    tier: 1,\n    costs: [{ color: \"blue\", amount: 3 }],\n  },\n  {\n    color: \"blue\",\n    pointValue: 0,\n    tier: 1,\n    costs: [{ color: \"black\", amount: 3 }],\n  },\n  {\n    color: \"green\",\n    pointValue: 0,\n    tier: 1,\n    costs: [{ color: \"red\", amount: 3 }],\n  },\n  {\n    color: \"red\",\n    pointValue: 0,\n    tier: 1,\n    costs: [{ color: \"white\", amount: 3 }],\n  },\n  {\n    color: \"black\",\n    pointValue: 0,\n    tier: 1,\n    costs: [{ color: \"green\", amount: 3 }],\n  },\n  // ok value\n  {\n    color: \"white\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"blue\", amount: 1 },\n      { color: \"green\", amount: 1 },\n      { color: \"red\", amount: 1 },\n      { color: \"black\", amount: 1 },\n    ],\n  },\n  {\n    color: \"blue\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"white\", amount: 1 },\n      { color: \"green\", amount: 1 },\n      { color: \"red\", amount: 1 },\n      { color: \"black\", amount: 1 },\n    ],\n  },\n  {\n    color: \"green\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"white\", amount: 1 },\n      { color: \"blue\", amount: 1 },\n      { color: \"red\", amount: 1 },\n      { color: \"black\", amount: 1 },\n    ],\n  },\n  {\n    color: \"red\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"white\", amount: 1 },\n      { color: \"blue\", amount: 1 },\n      { color: \"green\", amount: 1 },\n      { color: \"black\", amount: 1 },\n    ],\n  },\n  {\n    color: \"black\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"white\", amount: 1 },\n      { color: \"blue\", amount: 1 },\n      { color: \"green\", amount: 1 },\n      { color: \"red\", amount: 1 },\n    ],\n  },\n  // middling value\n  {\n    color: \"white\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"blue\", amount: 2 },\n      { color: \"black\", amount: 2 },\n    ],\n  },\n  {\n    color: \"blue\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"green\", amount: 2 },\n      { color: \"black\", amount: 2 },\n    ],\n  },\n  {\n    color: \"green\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"blue\", amount: 2 },\n      { color: \"red\", amount: 2 },\n    ],\n  },\n  {\n    color: \"red\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"white\", amount: 2 },\n      { color: \"red\", amount: 2 },\n    ],\n  },\n  {\n    color: \"black\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"white\", amount: 2 },\n      { color: \"green\", amount: 2 },\n    ],\n  },\n  {\n    color: \"white\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"white\", amount: 3 },\n      { color: \"blue\", amount: 1 },\n      { color: \"black\", amount: 1 },\n    ],\n  },\n  {\n    color: \"blue\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"green\", amount: 3 },\n      { color: \"blue\", amount: 1 },\n      { color: \"red\", amount: 1 },\n    ],\n  },\n  {\n    color: \"green\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"green\", amount: 1 },\n      { color: \"blue\", amount: 3 },\n      { color: \"white\", amount: 1 },\n    ],\n  },\n  {\n    color: \"red\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"red\", amount: 1 },\n      { color: \"black\", amount: 3 },\n      { color: \"white\", amount: 1 },\n    ],\n  },\n  {\n    color: \"black\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"red\", amount: 3 },\n      { color: \"black\", amount: 1 },\n      { color: \"green\", amount: 1 },\n    ],\n  },\n  {\n    color: \"white\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"blue\", amount: 2 },\n      { color: \"black\", amount: 1 },\n      { color: \"green\", amount: 2 },\n    ],\n  },\n  {\n    color: \"blue\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"red\", amount: 2 },\n      { color: \"white\", amount: 1 },\n      { color: \"green\", amount: 2 },\n    ],\n  },\n  {\n    color: \"green\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"red\", amount: 2 },\n      { color: \"blue\", amount: 1 },\n      { color: \"black\", amount: 2 },\n    ],\n  },\n  {\n    color: \"red\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"white\", amount: 2 },\n      { color: \"green\", amount: 1 },\n      { color: \"black\", amount: 2 },\n    ],\n  },\n  {\n    color: \"black\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"white\", amount: 2 },\n      { color: \"red\", amount: 1 },\n      { color: \"blue\", amount: 2 },\n    ],\n  },\n  {\n    color: \"white\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"green\", amount: 2 },\n      { color: \"red\", amount: 1 },\n      { color: \"blue\", amount: 1 },\n      { color: \"black\", amount: 1 },\n    ],\n  },\n  {\n    color: \"blue\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"green\", amount: 1 },\n      { color: \"red\", amount: 2 },\n      { color: \"white\", amount: 1 },\n      { color: \"black\", amount: 1 },\n    ],\n  },\n  {\n    color: \"green\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"blue\", amount: 1 },\n      { color: \"red\", amount: 1 },\n      { color: \"white\", amount: 1 },\n      { color: \"black\", amount: 2 },\n    ],\n  },\n  {\n    color: \"red\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"blue\", amount: 1 },\n      { color: \"green\", amount: 1 },\n      { color: \"white\", amount: 2 },\n      { color: \"black\", amount: 1 },\n    ],\n  },\n  {\n    color: \"black\",\n    pointValue: 0,\n    tier: 1,\n    costs: [\n      { color: \"blue\", amount: 2 },\n      { color: \"green\", amount: 1 },\n      { color: \"white\", amount: 1 },\n      { color: \"red\", amount: 1 },\n    ],\n  },\n];\n","import { Card } from \"./card\";\n\nexport const tier2Cards: Card[] = [\n  {\n    color: \"white\",\n    pointValue: 3,\n    tier: 2,\n    costs: [{ color: \"white\", amount: 6 }],\n  },\n  {\n    color: \"blue\",\n    pointValue: 3,\n    tier: 2,\n    costs: [{ color: \"blue\", amount: 6 }],\n  },\n  {\n    color: \"green\",\n    pointValue: 3,\n    tier: 2,\n    costs: [{ color: \"green\", amount: 6 }],\n  },\n  {\n    color: \"red\",\n    pointValue: 3,\n    tier: 2,\n    costs: [{ color: \"red\", amount: 6 }],\n  },\n  {\n    color: \"black\",\n    pointValue: 3,\n    tier: 2,\n    costs: [{ color: \"black\", amount: 6 }],\n  },\n  {\n    color: \"black\",\n    pointValue: 2,\n    tier: 2,\n    costs: [\n      { color: \"green\", amount: 4 },\n      { color: \"blue\", amount: 1 },\n      { color: \"red\", amount: 2 },\n    ],\n  },\n  {\n    color: \"white\",\n    pointValue: 2,\n    tier: 2,\n    costs: [\n      { color: \"red\", amount: 4 },\n      { color: \"green\", amount: 1 },\n      { color: \"black\", amount: 2 },\n    ],\n  },\n  {\n    color: \"blue\",\n    pointValue: 2,\n    tier: 2,\n    costs: [\n      { color: \"black\", amount: 4 },\n      { color: \"white\", amount: 2 },\n      { color: \"red\", amount: 1 },\n    ],\n  },\n  {\n    color: \"green\",\n    pointValue: 2,\n    tier: 2,\n    costs: [\n      { color: \"white\", amount: 4 },\n      { color: \"blue\", amount: 2 },\n      { color: \"black\", amount: 1 },\n    ],\n  },\n  {\n    color: \"red\",\n    pointValue: 2,\n    tier: 2,\n    costs: [\n      { color: \"blue\", amount: 4 },\n      { color: \"white\", amount: 1 },\n      { color: \"green\", amount: 2 },\n    ],\n  },\n  {\n    color: \"black\",\n    pointValue: 2,\n    tier: 2,\n    costs: [{ color: \"white\", amount: 5 }],\n  },\n  {\n    color: \"white\",\n    pointValue: 2,\n    tier: 2,\n    costs: [{ color: \"red\", amount: 5 }],\n  },\n  {\n    color: \"blue\",\n    pointValue: 2,\n    tier: 2,\n    costs: [{ color: \"blue\", amount: 5 }],\n  },\n  {\n    color: \"green\",\n    pointValue: 2,\n    tier: 2,\n    costs: [{ color: \"green\", amount: 5 }],\n  },\n  {\n    color: \"red\",\n    pointValue: 2,\n    tier: 2,\n    costs: [{ color: \"black\", amount: 5 }],\n  },\n  {\n    color: \"red\",\n    pointValue: 2,\n    tier: 2,\n    costs: [\n      { color: \"black\", amount: 5 },\n      { color: \"white\", amount: 3 },\n    ],\n  },\n  {\n    color: \"white\",\n    pointValue: 2,\n    tier: 2,\n    costs: [\n      { color: \"black\", amount: 3 },\n      { color: \"red\", amount: 5 },\n    ],\n  },\n  {\n    color: \"black\",\n    pointValue: 2,\n    tier: 2,\n    costs: [\n      { color: \"green\", amount: 5 },\n      { color: \"red\", amount: 3 },\n    ],\n  },\n  {\n    color: \"green\",\n    pointValue: 2,\n    tier: 2,\n    costs: [\n      { color: \"blue\", amount: 5 },\n      { color: \"green\", amount: 3 },\n    ],\n  },\n  {\n    color: \"blue\",\n    pointValue: 2,\n    tier: 2,\n    costs: [\n      { color: \"white\", amount: 5 },\n      { color: \"blue\", amount: 3 },\n    ],\n  },\n  {\n    color: \"white\",\n    pointValue: 1,\n    tier: 2,\n    costs: [\n      { color: \"red\", amount: 2 },\n      { color: \"black\", amount: 2 },\n      { color: \"green\", amount: 3 },\n    ],\n  },\n  {\n    color: \"blue\",\n    pointValue: 1,\n    tier: 2,\n    costs: [\n      { color: \"red\", amount: 3 },\n      { color: \"blue\", amount: 2 },\n      { color: \"green\", amount: 2 },\n    ],\n  },\n  {\n    color: \"green\",\n    pointValue: 1,\n    tier: 2,\n    costs: [\n      { color: \"white\", amount: 2 },\n      { color: \"blue\", amount: 3 },\n      { color: \"black\", amount: 2 },\n    ],\n  },\n  {\n    color: \"red\",\n    pointValue: 1,\n    tier: 2,\n    costs: [\n      { color: \"white\", amount: 2 },\n      { color: \"red\", amount: 2 },\n      { color: \"black\", amount: 3 },\n    ],\n  },\n  {\n    color: \"black\",\n    pointValue: 1,\n    tier: 2,\n    costs: [\n      { color: \"white\", amount: 3 },\n      { color: \"blue\", amount: 2 },\n      { color: \"green\", amount: 2 },\n    ],\n  },\n  {\n    color: \"green\",\n    pointValue: 1,\n    tier: 2,\n    costs: [\n      { color: \"white\", amount: 3 },\n      { color: \"red\", amount: 3 },\n      { color: \"green\", amount: 2 },\n    ],\n  },\n  {\n    color: \"white\",\n    pointValue: 1,\n    tier: 2,\n    costs: [\n      { color: \"white\", amount: 2 },\n      { color: \"red\", amount: 3 },\n      { color: \"blue\", amount: 3 },\n    ],\n  },\n  {\n    color: \"red\",\n    pointValue: 1,\n    tier: 2,\n    costs: [\n      { color: \"black\", amount: 3 },\n      { color: \"red\", amount: 2 },\n      { color: \"blue\", amount: 3 },\n    ],\n  },\n  {\n    color: \"blue\",\n    pointValue: 1,\n    tier: 2,\n    costs: [\n      { color: \"black\", amount: 3 },\n      { color: \"green\", amount: 3 },\n      { color: \"blue\", amount: 2 },\n    ],\n  },\n  {\n    color: \"black\",\n    pointValue: 1,\n    tier: 2,\n    costs: [\n      { color: \"black\", amount: 2 },\n      { color: \"green\", amount: 3 },\n      { color: \"white\", amount: 3 },\n    ],\n  },\n];\n","import { Card } from \"./card\";\n\nexport const tier3Cards: Card[] = [\n  {\n    color: \"white\",\n    pointValue: 3,\n    tier: 3,\n    costs: [\n      { color: \"blue\", amount: 3 },\n      { color: \"green\", amount: 3 },\n      { color: \"red\", amount: 5 },\n      { color: \"black\", amount: 3 },\n    ],\n  },\n  {\n    color: \"blue\",\n    pointValue: 3,\n    tier: 3,\n    costs: [\n      { color: \"white\", amount: 3 },\n      { color: \"green\", amount: 3 },\n      { color: \"red\", amount: 3 },\n      { color: \"black\", amount: 5 },\n    ],\n  },\n  {\n    color: \"green\",\n    pointValue: 3,\n    tier: 3,\n    costs: [\n      { color: \"white\", amount: 5 },\n      { color: \"blue\", amount: 3 },\n      { color: \"red\", amount: 3 },\n      { color: \"black\", amount: 3 },\n    ],\n  },\n  {\n    color: \"red\",\n    pointValue: 3,\n    tier: 3,\n    costs: [\n      { color: \"white\", amount: 3 },\n      { color: \"blue\", amount: 5 },\n      { color: \"green\", amount: 3 },\n      { color: \"black\", amount: 3 },\n    ],\n  },\n  {\n    color: \"black\",\n    pointValue: 3,\n    tier: 3,\n    costs: [\n      { color: \"white\", amount: 3 },\n      { color: \"blue\", amount: 3 },\n      { color: \"green\", amount: 5 },\n      { color: \"red\", amount: 3 },\n    ],\n  },\n  {\n    color: \"white\",\n    pointValue: 4,\n    tier: 3,\n    costs: [{ color: \"black\", amount: 7 }],\n  },\n  {\n    color: \"black\",\n    pointValue: 4,\n    tier: 3,\n    costs: [{ color: \"red\", amount: 7 }],\n  },\n  {\n    color: \"blue\",\n    pointValue: 4,\n    tier: 3,\n    costs: [{ color: \"white\", amount: 7 }],\n  },\n  {\n    color: \"red\",\n    pointValue: 4,\n    tier: 3,\n    costs: [{ color: \"green\", amount: 7 }],\n  },\n  {\n    color: \"green\",\n    pointValue: 4,\n    tier: 3,\n    costs: [{ color: \"blue\", amount: 7 }],\n  },\n  {\n    color: \"red\",\n    pointValue: 4,\n    tier: 3,\n    costs: [\n      { color: \"blue\", amount: 3 },\n      { color: \"green\", amount: 6 },\n      { color: \"red\", amount: 3 },\n    ],\n  },\n  {\n    color: \"black\",\n    pointValue: 4,\n    tier: 3,\n    costs: [\n      { color: \"green\", amount: 3 },\n      { color: \"red\", amount: 6 },\n      { color: \"black\", amount: 3 },\n    ],\n  },\n  {\n    color: \"white\",\n    pointValue: 4,\n    tier: 3,\n    costs: [\n      { color: \"white\", amount: 3 },\n      { color: \"red\", amount: 3 },\n      { color: \"black\", amount: 6 },\n    ],\n  },\n  {\n    color: \"blue\",\n    pointValue: 4,\n    tier: 3,\n    costs: [\n      { color: \"white\", amount: 6 },\n      { color: \"blue\", amount: 3 },\n      { color: \"black\", amount: 3 },\n    ],\n  },\n  {\n    color: \"green\",\n    pointValue: 4,\n    tier: 3,\n    costs: [\n      { color: \"white\", amount: 3 },\n      { color: \"blue\", amount: 6 },\n      { color: \"green\", amount: 3 },\n    ],\n  },\n  {\n    color: \"white\",\n    pointValue: 5,\n    tier: 3,\n    costs: [\n      { color: \"white\", amount: 3 },\n      { color: \"black\", amount: 7 },\n    ],\n  },\n  {\n    color: \"blue\",\n    pointValue: 5,\n    tier: 3,\n    costs: [\n      { color: \"white\", amount: 7 },\n      { color: \"blue\", amount: 3 },\n    ],\n  },\n  {\n    color: \"green\",\n    pointValue: 5,\n    tier: 3,\n    costs: [\n      { color: \"green\", amount: 3 },\n      { color: \"blue\", amount: 7 },\n    ],\n  },\n  {\n    color: \"red\",\n    pointValue: 5,\n    tier: 3,\n    costs: [\n      { color: \"green\", amount: 7 },\n      { color: \"red\", amount: 3 },\n    ],\n  },\n  {\n    color: \"black\",\n    pointValue: 5,\n    tier: 3,\n    costs: [\n      { color: \"black\", amount: 3 },\n      { color: \"red\", amount: 7 },\n    ],\n  },\n];\n","import Player from \"./player\";\nimport { CardCostTier, Card, CardColor, AllCardColors } from \"./card\";\nimport { Noble, allNobles } from \"./noble\";\nimport { randomizeArray, repeat } from \"../utils/utilities\";\nimport { computed, observable, action } from \"mobx\";\nimport { tier1Cards } from \"./tier1Cards\";\nimport { tier2Cards } from \"./tier2Cards\";\nimport { tier3Cards } from \"./tier3Cards\";\n\nexport type PlayerCount = 2 | 3 | 4;\nexport type ChipColor = CardColor | \"wild\";\n\nexport default class SplendorGame {\n  @observable currentRound: number = 1;\n  @observable private currentPlayerIndex = 0;\n\n  players: Player[] = [];\n  @observable winningPlayers?: Player[];\n\n  @observable chipStacks = new Map<ChipColor, number>();\n  @observable cardStacks = new Map<CardCostTier, Card[]>();\n  @observable nobles: Noble[] = [];\n\n  constructor(numberOfPlayers: PlayerCount) {\n    this.initializePlayers(numberOfPlayers);\n    this.initializeChips(numberOfPlayers === 4 ? 7 : numberOfPlayers + 2);\n    this.initializeCards();\n    this.initializeNobles(numberOfPlayers + 1);\n    // this.runCardTests();\n    // this.winningPlayer = this.players[0];\n  }\n\n  private initializePlayers(amount: number) {\n    repeat(amount, (index) => {\n      this.players.push(new Player(index + 1, \"player\"));\n    });\n  }\n\n  private initializeChips(amount: number) {\n    AllCardColors.forEach((color) => {\n      this.chipStacks.set(color, amount);\n    });\n    this.chipStacks.set(\"wild\", 5);\n  }\n\n  private initializeCards() {\n    this.cardStacks.set(1, randomizeArray(tier1Cards));\n    this.cardStacks.set(2, randomizeArray(tier2Cards));\n    this.cardStacks.set(3, randomizeArray(tier3Cards));\n  }\n\n  private initializeNobles(amount: number) {\n    this.nobles = randomizeArray(allNobles).splice(0, amount);\n  }\n\n  @computed\n  get currentPlayer(): Player {\n    return this.players[this.currentPlayerIndex];\n  }\n\n  @computed\n  get sortedPlayers(): Player[] {\n    return this.players.sort((a, b) => b.totalPoints - a.totalPoints);\n  }\n\n  @computed\n  get playerCanReserve(): boolean {\n    return (\n      !this.currentPlayer.hasTempChips && this.currentPlayer.canReserveCard\n    );\n  }\n\n  public playerCanPurchase(card: Card): boolean {\n    return (\n      !this.currentPlayer.hasTempChips && this.currentPlayer.canBuyCard(card)\n    );\n  }\n\n  @action\n  singleChipHandler = (targetId: string) => {\n    const chipColor = this.chipColorForId(targetId);\n    this.removeChips(chipColor, 1);\n    this.currentPlayer.addChip(chipColor, 1, true);\n    if (this.currentPlayer.tempChipCount >= 3) {\n      this.currentPlayer.saveTempChips();\n      this.endPlayerTurn();\n    }\n  };\n\n  @action\n  doubleChipHandler = (targetId: string) => {\n    const chipColor = this.chipColorForId(targetId);\n    this.removeChips(chipColor, 2);\n    this.currentPlayer.addChip(chipColor, 2);\n    this.endPlayerTurn();\n  };\n\n  @action purchaseHandler = (targetId: string) => {\n    const ids = targetId.split(\"-\");\n    const costTier = Number(ids[0]) as CardCostTier;\n    const cardIndex = Number(ids[1]);\n    const cardStack = this.cardStacks.get(costTier);\n    if (!cardStack) {\n      this.endPlayerTurn();\n      return;\n    }\n    const cardToBuy = cardStack.splice(cardIndex, 1)[0];\n\n    var deficit = 0;\n    cardToBuy.costs.forEach((cost) => {\n      const costReduction = this.currentPlayer.costReductionFor(cost.color);\n      const netCostForColor = cost.amount - costReduction;\n      const chipAmount = this.currentPlayer.chips.get(cost.color) || 0;\n      if (netCostForColor > chipAmount) {\n        deficit += netCostForColor - chipAmount;\n      }\n      const finalCost = netCostForColor >= 0 ? netCostForColor : 0;\n      this.currentPlayer.removeChip(cost.color, finalCost);\n      this.addChips(cost.color, finalCost);\n    });\n\n    if (deficit) {\n      this.currentPlayer.removeChip(\"wild\", deficit);\n      this.addChips(\"wild\", deficit);\n    }\n    this.currentPlayer.tableau.push(cardToBuy);\n    this.endPlayerTurn();\n  };\n\n  @action\n  returnChipHandler = (targetId: string) => {\n    const color = this.chipColorForId(targetId);\n    this.currentPlayer.removeChip(color, 1, true);\n    this.addChips(color, 1);\n  };\n\n  @action\n  reserveHandler = (targetId: string) => {\n    const ids = targetId.split(\"-\");\n    const tier = Number(ids[0]) as CardCostTier;\n    const index = Number(ids[1]);\n    const cardStack = this.cardStacks.get(tier);\n\n    if (cardStack) {\n      const card = cardStack.splice(index, 1)[0];\n      this.currentPlayer.reserveCards.push(card);\n      const currentValue = this.chipStacks.get(\"wild\");\n      if (currentValue && currentValue > 0) {\n        this.chipStacks.set(\"wild\", currentValue - 1);\n        this.currentPlayer.addChip(\"wild\");\n      }\n      this.endPlayerTurn();\n    }\n  };\n\n  private nobleCheck() {\n    const availableNobles = this.nobles.filter((noble) => {\n      return this.currentPlayer.fulfillsRequirementsForNoble(noble);\n    });\n    if (availableNobles.length > 0) {\n      const grabbedNoble = this.nobles.splice(0, 1)[0];\n      this.currentPlayer.nobles.push(grabbedNoble);\n    }\n  }\n\n  private removeChips(chipColor: ChipColor, amount: number) {\n    const currentValue = this.chipStacks.get(chipColor) || 0;\n    const newValue = currentValue - amount;\n    this.chipStacks.set(chipColor, newValue < 0 ? 0 : newValue);\n  }\n\n  private addChips(chipColor: ChipColor, amount: number = 1) {\n    const currentValue = this.chipStacks.get(chipColor) || 0;\n    this.chipStacks.set(chipColor, currentValue + amount);\n  }\n\n  private chipColorForId(id: string): ChipColor {\n    return id.split(\"-\")[0] as ChipColor;\n  }\n\n  private endPlayerTurn() {\n    this.nobleCheck();\n    this.currentPlayerIndex++;\n    if (this.currentPlayerIndex >= this.players.length) {\n      this.handleEndOfRoundStuff();\n    }\n  }\n\n  private handleEndOfRoundStuff() {\n    const playersWithSufficientPoints = this.players.filter(\n      (player) => player.totalPoints >= 15\n    );\n    if (playersWithSufficientPoints.length === 0) {\n      this.finishRound();\n    } else if (playersWithSufficientPoints.length === 1) {\n      console.log(\"1 clear winner\");\n      this.endGame(playersWithSufficientPoints);\n    } else {\n      console.log(\"multiple possile winners: \", playersWithSufficientPoints);\n      const sortedByScore = playersWithSufficientPoints.sort(\n        (a: Player, b: Player) => b.totalPoints - a.totalPoints\n      );\n      const highestScore = sortedByScore[0].totalPoints;\n      console.log(\"highest score: \", highestScore);\n      const highestScorers = playersWithSufficientPoints.filter(\n        (player) => player.totalPoints === highestScore\n      );\n      console.log(\"all the higest scoreres:\", highestScorers);\n      if (highestScorers.length === 1) {\n        console.log(\"1 winningest winner\");\n        this.endGame(highestScorers);\n      } else {\n        const sortedByCardCount = highestScorers.sort(\n          (a, b) => a.tableau.length - b.tableau.length\n        );\n        const lowestCardCount = sortedByCardCount[0].tableau.length;\n        console.log(\"lowest card count: \", lowestCardCount);\n        const playersWithLowestCardCount = highestScorers.filter(\n          (player) => player.tableau.length === lowestCardCount\n        );\n        console.log(\n          \"players with lowest card count: \",\n          playersWithLowestCardCount\n        );\n        this.endGame(playersWithLowestCardCount);\n      }\n    }\n  }\n\n  private finishRound() {\n    console.log(\"finishing round\");\n\n    this.currentRound++;\n    this.currentPlayerIndex = 0;\n  }\n\n  private endGame(winners: Player[]) {\n    console.log(\"game has ended, winners: \", winners);\n    this.winningPlayers = winners;\n  }\n\n  private runCardTests() {\n    // this.runTestsForCards(tier1Cards, \"1\");\n    // this.runTestsForCards(tier2Cards, \"2\");\n    this.runTestsForCards(tier3Cards, \"3\");\n  }\n\n  private runTestsForCards(cards: Card[], tierLabel: string) {\n    console.log(\"\\n\\nbeginning test for tier : \", tierLabel);\n    console.log(\"here are my cards: \", cards);\n\n    const totalPointsValues = cards.map((card) => card.pointValue);\n    console.log(\"these are the totalPointsValues: \", totalPointsValues);\n\n    const totalPointsValuesReduced = totalPointsValues.reduce((p, c) => p + c);\n    console.log(\n      \"these are the totalPointsValuesReduced\",\n      totalPointsValuesReduced\n    );\n\n    // const totalPoints = cards\n    //   .map((card) => card.pointValue)\n    //   .reduce((p, c) => p + c);\n    // console.log(`tier ${tierLabel} points: ${totalPoints}`);\n\n    console.log(\"cards of color:\");\n    AllCardColors.forEach((cardColor) => {\n      console.log(\"now checking for: \", cardColor);\n      const cardsOfColor = cards.filter((card) => card.color === cardColor);\n\n      const mappedCostsOfColor = cards.map((card) => card.costs);\n      console.log(\"map: \", mappedCostsOfColor);\n\n      const flatMappedCostsOfColor = mappedCostsOfColor.flat();\n      console.log(\"flat\", flatMappedCostsOfColor);\n      const flatMappedCostsOfColorFilter = flatMappedCostsOfColor.filter(\n        (cardCost) => cardCost.color === cardColor\n      );\n      console.log(\"filter\", flatMappedCostsOfColorFilter);\n      const flatMappedCostsOfColorFilterReMapped = flatMappedCostsOfColorFilter.map(\n        (cardCost) => cardCost.amount\n      );\n      console.log(\"map\", flatMappedCostsOfColorFilterReMapped);\n      const flatMappedCostsOfColorFilterReMappedReduced = flatMappedCostsOfColorFilterReMapped.reduce(\n        (p, c) => p + c\n      );\n      console.log(\"reduced\", flatMappedCostsOfColorFilterReMappedReduced);\n      // const costsOfColor = cards;\n      // .flatMap((card) => card.costs)\n      // .filter((cardCost) => cardCost.color === cardColor)\n      // .map((cardCost) => cardCost.amount)\n      // .reduce((p, c) => p + c);\n      console.log(`${cardsOfColor.length} cards for ${cardColor}`);\n      console.log(\n        `tier ${tierLabel} costs for ${cardColor}: ${flatMappedCostsOfColorFilterReMappedReduced}`\n      );\n    });\n  }\n}\n","import GameStore from \"./GameStore\";\n\nconst stores = {\n  gameStore: new GameStore(),\n  // client: new SocketClient(\"http://localhost:8080\"),\n};\n\nexport default stores;\n","import SplendorGame from \"../game/game\";\nimport { observable } from \"mobx\";\n\nconst NUMBER_OF_PLAYERS = 4;\n\nexport default class GameStore {\n  @observable game: SplendorGame = new SplendorGame(NUMBER_OF_PLAYERS);\n\n  reset() {\n    this.game = new SplendorGame(NUMBER_OF_PLAYERS);\n  }\n}\n","import \"./PlayerComponent.scss\";\n\nimport React from \"react\";\nimport stores from \"../../stores/Stores\";\nimport { observer } from \"mobx-react\";\nimport { observable } from \"mobx\";\nimport Player from \"../../game/player\";\n\nexport type PlayerProps = {\n  player: Player;\n};\n\n@observer\nexport default class PlayerComponent extends React.Component<PlayerProps> {\n  @observable tempName: string = \"\";\n\n  handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.tempName = event.target.value;\n  };\n\n  handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    this.props.player.name = this.tempName;\n    event.preventDefault();\n  };\n\n  handleBlur = (event: React.FocusEvent<HTMLInputElement>) => {\n    this.props.player.name = this.tempName;\n  };\n\n  render() {\n    const { player } = this.props;\n    const isActive = stores.gameStore.game.currentPlayer === this.props.player;\n    const activeClass = isActive ? \"active\" : \"inactive\";\n    return (\n      <div className=\"PlayerComponent\">\n        <div className={activeClass}>\n          <div>player {player.name}</div>\n          <div>id {player.id}</div>\n          <div>points {player.totalPoints}</div>\n          <div className=\"chips-container\">\n            <div className=\"background\">player chips</div>\n            <div className=\"player-chips\">\n              {Array.from(player.chips)\n                .filter((value) => value[1] > 0)\n                .map((value) => {\n                  const color = value[0];\n                  const quantity = value[1];\n                  return (\n                    <div className={`chip ${color}`} key={Math.random()}>\n                      {quantity}\n                    </div>\n                  );\n                })}\n            </div>\n          </div>\n\n          <div className=\"cards-container\">\n            <div className=\"background\">player tableau</div>\n            <div className=\"player-cards\">\n              {player.tableau.map((card) => {\n                return (\n                  <div className={`card ${card.color}`} key={Math.random()}>\n                    {card.pointValue}\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n\n          <div className=\"nobles-container\">\n            <div className=\"player-nobles\">\n              {player.nobles.map((noble) => {\n                return (\n                  <div className={`noble`} key={Math.random()}>\n                    {noble.pointValue}\n                  </div>\n                );\n              })}\n            </div>\n            <form onSubmit={this.handleSubmit}>\n              <label>\n                change name:\n                <input\n                  type=\"text\"\n                  value={this.tempName}\n                  onChange={this.handleChange}\n                  onBlur={this.handleBlur}\n                ></input>\n              </label>\n            </form>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import \"./NobleComponent.scss\";\n\nimport { Noble } from \"../../game/noble\";\nimport React from \"react\";\n\nexport type NobleComponentProps = {\n  noble: Noble;\n};\n\nexport const NobleComponent: React.FunctionComponent<NobleComponentProps> = (\n  props\n) => {\n  return (\n    <div className=\"NobleComponent\">\n      <div className=\"point-value\">{props.noble.pointValue}</div>\n      {props.noble.cardRequirements.map((requirement) => {\n        return (\n          <div\n            className={\"requirement \" + requirement.color}\n            key={`${requirement.color}${requirement.amount}`}\n          >\n            {requirement.amount}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n","import \"./CardStackComponent.scss\";\n\nimport React from \"react\";\nimport stores from \"../../stores/Stores\";\nimport { observer } from \"mobx-react\";\nimport { CardCostTier } from \"../../game/card\";\n\nexport type CardStackComponentProps = {\n  cardCostTier: CardCostTier;\n};\n\nconst VISIBLE_SLOTS = 4;\n\nexport default observer((props: CardStackComponentProps) => {\n  const { game } = stores.gameStore;\n  const cards = game.cardStacks.get(props.cardCostTier);\n  if (!cards) {\n    return <div />;\n  }\n\n  const remaining = cards.length - VISIBLE_SLOTS;\n  const remainingCards = remaining > 0 ? remaining : 0;\n  const visibleCards = cards.slice(0, VISIBLE_SLOTS);\n  return (\n    <div className=\"CardStackComponent\">\n      <div className=\"card remaining\">{remainingCards} cards remaining</div>\n      {visibleCards.map((card, index) => {\n        const canPurchase = game.playerCanPurchase(card);\n        const id = `${props.cardCostTier}-${index}`;\n        return (\n          <div className=\"card\" key={id}>\n            <div className=\"point-value\">\n              {card.pointValue > 0 ? card.pointValue : \"\\u00a0\"}\n            </div>\n            <div className=\"indicator\">\n              <div className={\"color-indicator \" + card.color}> </div>\n            </div>\n            <div className=\"costs\">\n              {card.costs.map((cost) => {\n                const className = `cost ${cost.color}`;\n                return (\n                  <div className={className} key={className}>\n                    {cost.amount}\n                  </div>\n                );\n              })}\n            </div>\n            <div className=\"actions\">\n              <button\n                id={id}\n                onClick={(event) => game.reserveHandler(event.currentTarget.id)}\n                disabled={!game.playerCanReserve}\n              >\n                hold\n              </button>\n              <button\n                id={id}\n                onClick={(event) =>\n                  game.purchaseHandler(event.currentTarget.id)\n                }\n                disabled={!canPurchase}\n              >\n                buy\n              </button>\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n});\n","import \"./ChipStackComponent.scss\";\n\nimport React from \"react\";\nimport stores from \"../../stores/Stores\";\nimport { observer } from \"mobx-react\";\n\nexport default observer(() => {\n  const { game } = stores.gameStore;\n  const player = game.currentPlayer;\n  const chipStackKeys = Array.from(game.chipStacks.keys());\n  return (\n    <div className=\"ChipStackComponent\">\n      <div className=\"temp-chips\">\n        temp chips:\n        <br />\n        {player.tempChips.map((color) => {\n          return (\n            <div key={color}>\n              <div className={`chip-stack ${color}`}>1</div>\n              <button\n                id={`${color}-temp-chip`}\n                onClick={(event) =>\n                  game.returnChipHandler(event.currentTarget.id)\n                }\n              >\n                return\n              </button>\n            </div>\n          );\n        })}\n      </div>\n      {chipStackKeys.map((stackColor) => {\n        const stackAmount = game.chipStacks.get(stackColor) || 0;\n        const playerAmount = player.tempChips.find(\n          (chip) => chip === stackColor\n        )?.length\n          ? 1\n          : 0;\n        const grabOneEnabled = stackAmount && playerAmount === 0;\n        const grabTwoEnabled = stackAmount >= 4 && !player.tempChipCount;\n        return (\n          <div key={stackColor}>\n            <div className={`chip-stack ${stackColor}`}>{stackAmount}</div>\n            {stackColor !== \"wild\" && (\n              <>\n                <button\n                  id={`${stackColor}-1`}\n                  disabled={!grabOneEnabled}\n                  onClick={(event) =>\n                    game.singleChipHandler(event.currentTarget.id)\n                  }\n                >\n                  grab 1\n                </button>\n                <button\n                  id={`${stackColor}-2`}\n                  disabled={!grabTwoEnabled}\n                  onClick={(event) =>\n                    game.doubleChipHandler(event.currentTarget.id)\n                  }\n                >\n                  grab 2\n                </button>\n              </>\n            )}\n          </div>\n        );\n      })}\n    </div>\n  );\n});\n","import \"./GameComponent.scss\";\n\nimport React from \"react\";\nimport stores from \"../../stores/Stores\";\nimport { observer } from \"mobx-react\";\nimport PlayerComponent from \"./PlayerComponent\";\nimport { NobleComponent } from \"./NobleComponent\";\nimport CardStackComponent from \"./CardStackComponent\";\nimport ChipStackComponent from \"./ChipStackComponent\";\nimport { keyForNoble } from \"../../game/noble\";\n\n@observer\nexport default class GameComponent extends React.Component {\n  render() {\n    const { game } = stores.gameStore;\n    return (\n      <div className=\"GameComponent\">\n        <div>\n          round #{game.currentRound}, players:\n          {game.players.map((player) => {\n            return <PlayerComponent player={player} key={player.id} />;\n          })}\n        </div>\n        <div>\n          chips:\n          <ChipStackComponent />\n        </div>\n        <div>\n          <div>\n            cards:\n            <CardStackComponent cardCostTier={1} />\n            <CardStackComponent cardCostTier={2} />\n            <CardStackComponent cardCostTier={3} />\n          </div>\n          <div className=\"nobles-container\">\n            nobles:\n            {game.nobles.map((noble) => {\n              return <NobleComponent noble={noble} key={keyForNoble(noble)} />;\n            })}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import \"./ResultsComponent.scss\";\n\nimport React from \"react\";\nimport stores from \"../../stores/Stores\";\nimport SplendorGame from \"../../game/game\";\n\nexport type ResultsComponentProps = {\n  game: SplendorGame;\n};\n\nexport default class ResultsComponent extends React.Component<\n  ResultsComponentProps\n> {\n  render() {\n    if (!this.props.game.winningPlayers) {\n      return <></>;\n    }\n    const winningScore = this.props.game.winningPlayers[0].totalPoints;\n    const scoreString = `with ${winningScore} points`;\n    const winnerString =\n      this.props.game.winningPlayers.length === 1\n        ? `the winner, ${scoreString}, is:`\n        : `the winners, ${scoreString}, are:`;\n    return (\n      <div className=\"ResultsComponent\">\n        <div className=\"announce\">{winnerString}</div>\n        {this.props.game.winningPlayers.map((player) => {\n          return (\n            <div className=\"winner\" key={Math.random()}>\n              {player.name}\n            </div>\n          );\n        })}\n        <hr />\n        <div>\n          all players, final scores:\n          <table>\n            <tbody>\n              {this.props.game.sortedPlayers.map((player) => {\n                return (\n                  <tr key={Math.random()}>\n                    <td>player Name: {player.name}</td>\n                    <td>player score: {player.totalPoints}</td>\n                    <td>development cards: {player.tableau.length}</td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n          <button onClick={() => stores.gameStore.reset()}>reset game</button>\n        </div>\n      </div>\n    );\n  }\n}\n","import \"./App.css\";\n\nimport React from \"react\";\nimport GameComponent from \"../Game/GameComponent\";\nimport stores from \"../../stores/Stores\";\nimport ResultsComponent from \"../Game/ResultsComponent\";\nimport { observer } from \"mobx-react\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div>it not splendor</div>\n      <TheGame />\n    </div>\n  );\n}\n\nexport default App;\n\nconst TheGame = observer(() => {\n  const { game } = stores.gameStore;\n  return game.winningPlayers ? (\n    <ResultsComponent game={game} />\n  ) : (\n    <GameComponent />\n  );\n});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App/App\";\nimport \"mobx-react-lite/batchingForReactDom\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}